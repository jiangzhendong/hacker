{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/install_docker.sh","path":"install_docker.sh","modified":0,"renderable":1},{"_id":"themes/yilia/source/shellStatus.php","path":"shellStatus.php","modified":0,"renderable":1},{"_id":"themes/yilia/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/yilia/source/Web-Notepad/LICENSE","path":"Web-Notepad/LICENSE","modified":0,"renderable":1},{"_id":"themes/yilia/source/Web-Notepad/README.md","path":"Web-Notepad/README.md","modified":0,"renderable":1},{"_id":"themes/yilia/source/Web-Notepad/Web-Notepad.html","path":"Web-Notepad/Web-Notepad.html","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/Create_Graph.jpg","path":"docker/Create_Graph.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/InfluxDB_login.png","path":"docker/InfluxDB_login.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/3d_images.js","path":"js/3d_images.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jq.snow.js","path":"js/jq.snow.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/LICENSE","path":"mplayer/LICENSE","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/README.md","path":"mplayer/README.md","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/index.html","path":"mplayer/index.html","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/index.html","path":"picture/index.html","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/CreateDB.png","path":"docker/CreateDB.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/New_Dashboard.png","path":"docker/New_Dashboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/war_games_movie.jpg","path":"docker/war_games_movie.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/ice.ico","path":"img/ice.ico","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.main.js","path":"js/jquery.main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/Web-Notepad/screenshot.png","path":"Web-Notepad/screenshot.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/Grafana_Config.png","path":"docker/Grafana_Config.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/cAdvisor_Dashboard.png","path":"docker/cAdvisor_Dashboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/filesystem_graph.png","path":"docker/filesystem_graph.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/docker/1.jpg","path":"img/docker/1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/docker/raspberrypi.gif","path":"img/docker/raspberrypi.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/maven/1.png","path":"img/maven/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/maven/2.png","path":"img/maven/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/maven/3.png","path":"img/maven/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/css/mplayer.css.map","path":"mplayer/css/mplayer.css.map","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/css/mplayer.css","path":"mplayer/css/mplayer.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/css/mplayer.less","path":"mplayer/css/mplayer.less","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/css/mplayer.min.css","path":"mplayer/css/mplayer.min.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/img/mplayer_bg.png","path":"mplayer/img/mplayer_bg.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/img/mplayer_error.png","path":"mplayer/img/mplayer_error.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/js/jquery.nstSlider.js","path":"mplayer/js/jquery.nstSlider.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/js/mplayer-list.js","path":"mplayer/js/mplayer-list.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/js/mplayer-functions.js","path":"mplayer/js/mplayer-functions.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/js/mplayer.js","path":"mplayer/js/mplayer.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/as.html","path":"picture/welove/as.html","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/js/mplayer.min.js","path":"mplayer/js/mplayer.min.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/index.html","path":"picture/welove/index.html","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/04F8VWU7GR80.jpg","path":"picture/images/04F8VWU7GR80.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/0YONP2W4M4N8.jpg","path":"picture/images/0YONP2W4M4N8.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/0e85d4fe6d.jpg","path":"picture/images/0e85d4fe6d.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/16BI56S8G191.jpg","path":"picture/images/16BI56S8G191.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/15QC210I592Y.jpg","path":"picture/images/15QC210I592Y.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/1B138N144Q1L.jpg","path":"picture/images/1B138N144Q1L.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/26AWCN2F2NK3.jpg","path":"picture/images/26AWCN2F2NK3.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/228d8f57870a.jpg","path":"picture/images/228d8f57870a.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/26e9357e8919.jpg","path":"picture/images/26e9357e8919.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/2891F8UL99JN.jpg","path":"picture/images/2891F8UL99JN.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/3288H86PKXYD.jpg","path":"picture/images/3288H86PKXYD.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/3E3I28924Y1H.jpg","path":"picture/images/3E3I28924Y1H.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/3YRZV3UUIJ8J.jpg","path":"picture/images/3YRZV3UUIJ8J.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/46eae50db6.jpg","path":"picture/images/46eae50db6.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/4K1VOC35V83U.jpg","path":"picture/images/4K1VOC35V83U.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/5a32993d65kd.jpg","path":"picture/images/5a32993d65kd.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/661a66329a.jpg","path":"picture/images/661a66329a.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/6a884d6ef2.jpg","path":"picture/images/6a884d6ef2.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/7087QERO2GD1.jpg","path":"picture/images/7087QERO2GD1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/774573728f.jpg","path":"picture/images/774573728f.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/7H008442213G.jpg","path":"picture/images/7H008442213G.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/8I6F653TF901.jpg","path":"picture/images/8I6F653TF901.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/943N6616H80M.jpg","path":"picture/images/943N6616H80M.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/8fe86226ff.jpg","path":"picture/images/8fe86226ff.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/94da4fb185.jpg","path":"picture/images/94da4fb185.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/9A0A1WM8X9PN.jpg","path":"picture/images/9A0A1WM8X9PN.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/A6677X5WKQ7Q.jpg","path":"picture/images/A6677X5WKQ7Q.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/B64L7138TZN2.jpg","path":"picture/images/B64L7138TZN2.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/FUIF5Y7034D8.jpg","path":"picture/images/FUIF5Y7034D8.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/B7Y8D1ZSS631.jpg","path":"picture/images/B7Y8D1ZSS631.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/FUIF5Y7034F8.jpg","path":"picture/images/FUIF5Y7034F8.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/I70POCIS22HL.jpg","path":"picture/images/I70POCIS22HL.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/G5S68I07EQ4Y.jpg","path":"picture/images/G5S68I07EQ4Y.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/J26R5CJ60EF3.jpg","path":"picture/images/J26R5CJ60EF3.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/KNRS78Y66861.jpg","path":"picture/images/KNRS78Y66861.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/M153679UB60O.jpg","path":"picture/images/M153679UB60O.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/R40770M17353.jpg","path":"picture/images/R40770M17353.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/PWW4KTT4U4P6.jpg","path":"picture/images/PWW4KTT4U4P6.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/RZ49I171U0S9.jpg","path":"picture/images/RZ49I171U0S9.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/V9G45V6WN66F.jpg","path":"picture/images/V9G45V6WN66F.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/V945A82ZRN68.jpg","path":"picture/images/V945A82ZRN68.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/XC7I095R1BL8.jpg","path":"picture/images/XC7I095R1BL8.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/Z1FH3FC92JS8.jpg","path":"picture/images/Z1FH3FC92JS8.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/Z8806BVO1ZH7.jpg","path":"picture/images/Z8806BVO1ZH7.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/ZS0V7969IOVT.jpg","path":"picture/images/ZS0V7969IOVT.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/a8008ae7f7.jpg","path":"picture/images/a8008ae7f7.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/b2a96f2762d0.jpg","path":"picture/images/b2a96f2762d0.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/c136720da3.jpg","path":"picture/images/c136720da3.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/cb16bdfe091c.jpg","path":"picture/images/cb16bdfe091c.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/d04505fe96.jpg","path":"picture/images/d04505fe96.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/d57dc05c81.jpg","path":"picture/images/d57dc05c81.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/dab9f9326e93.jpg","path":"picture/images/dab9f9326e93.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/f130a592bbef.jpg","path":"picture/images/f130a592bbef.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/f9de619a168d.jpg","path":"picture/images/f9de619a168d.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/f22e53da3a.jpg","path":"picture/images/f22e53da3a.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/f9de619a16sd.jpg","path":"picture/images/f9de619a16sd.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/r.gif","path":"picture/images/r.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/fe00425d0a.jpg","path":"picture/images/fe00425d0a.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/docker/2.png","path":"img/docker/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/1ef7ea6559.jpg","path":"picture/images/1ef7ea6559.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/200ff06c0e.jpg","path":"picture/images/200ff06c0e.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/5b0b0c8119.jpg","path":"picture/images/5b0b0c8119.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/65f8787807.jpg","path":"picture/images/65f8787807.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/69833ed09a.jpg","path":"picture/images/69833ed09a.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/73d310387e.jpg","path":"picture/images/73d310387e.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/7b4cc906b3.jpg","path":"picture/images/7b4cc906b3.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/b05b0c6962.jpg","path":"picture/images/b05b0c6962.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/b05c9edc7f.jpg","path":"picture/images/b05c9edc7f.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/ed37a0925e.jpg","path":"picture/images/ed37a0925e.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/images/ed57bce8c4.jpg","path":"picture/images/ed57bce8c4.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/css/templatemo-misc.css","path":"picture/welove/css/templatemo-misc.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/css/animate.css","path":"picture/welove/css/animate.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/css/bootstrap.css","path":"picture/welove/css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/css/templatemo-style.css","path":"picture/welove/css/templatemo-style.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/FontAwesome.otf","path":"picture/welove/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/fontawesome-webfont.eot","path":"picture/welove/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/fontawesome-webfont.woff","path":"picture/welove/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/linecons.eot","path":"picture/welove/fonts/linecons.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/linecons.ttf","path":"picture/welove/fonts/linecons.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/linecons.woff","path":"picture/welove/fonts/linecons.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/style/default.css","path":"picture/welove/style/default.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/style/functions.js","path":"picture/welove/style/functions.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/style/garden.js","path":"picture/welove/style/garden.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/style/show_ads.js","path":"picture/welove/style/show_ads.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/js/main.js","path":"picture/welove/js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/style/show_ads.js.bak","path":"picture/welove/style/show_ads.js.bak","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/js/main.min.js","path":"picture/welove/js/main.min.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/docker/Docker_Monitoring.png","path":"docker/Docker_Monitoring.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/fontawesome-webfont.ttf","path":"picture/welove/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/linecons.svg","path":"picture/welove/fonts/linecons.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/images/slide1.jpg","path":"picture/welove/images/slide1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/style/jquery.js","path":"picture/welove/style/jquery.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/js/plugins.min.js","path":"picture/welove/js/plugins.min.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mplayer/js/jquery.js","path":"mplayer/js/jquery.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/css/bootstrap/bootstrap.css","path":"picture/welove/css/bootstrap/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/css/font-awesome.css","path":"picture/welove/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/js/vendor/jquery.gmap3.min.js","path":"picture/welove/js/vendor/jquery.gmap3.min.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/js/vendor/modernizr-2.6.1-respond-1.1.0.min.js","path":"picture/welove/js/vendor/modernizr-2.6.1-respond-1.1.0.min.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/fonts/fontawesome-webfont.svg","path":"picture/welove/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/images/slide4.jpg","path":"picture/welove/images/slide4.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/js/vendor/jquery-1.11.0.min.js","path":"picture/welove/js/vendor/jquery-1.11.0.min.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/js/plugins.js","path":"picture/welove/js/plugins.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/images/slide7.jpg","path":"picture/welove/images/slide7.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/images/slide5.jpg","path":"picture/welove/images/slide5.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/images/slide3.jpg","path":"picture/welove/images/slide3.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/images/slide2.jpg","path":"picture/welove/images/slide2.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/picture/welove/images/slide6.jpg","path":"picture/welove/images/slide6.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3172574ead3dcdb7a6cdbc2a224894234e4a9ce5","modified":1481591833000},{"_id":"themes/yilia/_config.yml","hash":"85375b412ede74003bbdea7ef63b854c6d3ea7b9","modified":1483680415000},{"_id":"themes/yilia/.DS_Store","hash":"d9b6e013a72ceccaac092fdd97b58bd5887955a6","modified":1482299528000},{"_id":"themes/yilia/package.json","hash":"99e419b9d09ef18345ad4fa0e46767a68f53ab46","modified":1481538221000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1481591833000},{"_id":"source/_posts/apt-get.md","hash":"02a86da64585439aaa736aeb5d051bbc1e16d38c","modified":1557035253969},{"_id":"source/about/index.md","hash":"259d7e72a47d7b3bde49e95edad7ebaa36de8c9c","modified":1481538221000},{"_id":"source/_posts/docker.md","hash":"b297498faf9f0ea032d89387b0ed1690e48ec74a","modified":1482300187000},{"_id":"source/_posts/dubbo-jar-start-error.md","hash":"3a6bbea76ed37be21ecc034def4e58170c0b693c","modified":1481688224000},{"_id":"source/_posts/dubbo-jar-start.md","hash":"d7ae308f77933f99c4b32f775bdc04eba756fcb3","modified":1481681213000},{"_id":"source/_posts/hexo-guide.md","hash":"7f3b5f4cb2944f7f970c2596cda599c3b1444f37","modified":1481538221000},{"_id":"source/_posts/graduation-you-must-strive.md","hash":"f6c6fb85136526757180b7ede31e405229d82eb0","modified":1481538221000},{"_id":"source/_posts/hexo-install-config.md","hash":"1b017d4ecba5599fa5a07319f369fbf8f830de7d","modified":1483517508000},{"_id":"source/_posts/hexo-note.md","hash":"09e9320365cc626b8563066502d51e033c5d23d6","modified":1481538221000},{"_id":"source/_posts/i_start_study_english.md.bak","hash":"f80a8075a1ed5e7243559e8580e04cacb5916a89","modified":1481538221000},{"_id":"source/_posts/install-docker-to-raspberry.md","hash":"d482dcd31a4dab7855a6c6e8a1da091b849c6a8c","modified":1483609799000},{"_id":"source/_posts/markdown.md","hash":"cc5a7ec48426b1a3cfe06e74b639e4955cceda5e","modified":1481594730000},{"_id":"source/_posts/linux-baidu-pan.md","hash":"f20e6a5e3cb9b6062745b31d37e5b8d98fd25789","modified":1481606862000},{"_id":"source/_posts/linux-command.md","hash":"cd26cb1e9ad233fdadec5b6aa2db2d2dfcbb2dcb","modified":1481620851000},{"_id":"source/_posts/maven-wrapper.md","hash":"55bb2fc2cd4ddc523509ee6477421d0ee26a5901","modified":1482386860000},{"_id":"source/_posts/node-about.md","hash":"ebfaa3c999b0355a8b43c2ce666327b1f391c389","modified":1481538221000},{"_id":"source/_posts/nginx-restart.md","hash":"ac1449fd34a2e4aaf3ddc322dc3f48df5e3acf13","modified":1482372695000},{"_id":"source/_posts/perl-lan.md","hash":"6870350a0f0ba8844eedbaa91a5db8d6452799d4","modified":1481601772000},{"_id":"source/_posts/python-socket.md","hash":"8007df465629f697d2771945cb7a1587a2472a65","modified":1481858542000},{"_id":"source/_posts/spring-boot-log.md","hash":"41b8dc06383e28478560bb2bc139cc38f644750e","modified":1482391464000},{"_id":"source/_posts/ssh-linux-windows.md","hash":"2752985c8059aecf247c2d9b089720de229c34a6","modified":1481538221000},{"_id":"source/_posts/ssh-c.md","hash":"69b332504c395619ffe3646a93605346c83b5e1e","modified":1481538221000},{"_id":"source/_posts/ubuntu-amd.md","hash":"44ed110dcf5c7dced18d0ada95df6e94e1884402","modified":1481615544000},{"_id":"source/_posts/windows10-1.md","hash":"82333713d23515ab9cd22cab1a054d46aa933cdd","modified":1481538221000},{"_id":"source/_posts/word-of-the-day.md","hash":"ef563715c20f6e5b1c305f197e767e25f21c1a7e","modified":1482313501000},{"_id":"source/_posts/wps-can-not-input-chinese.md","hash":"a771b83615be22159f37aa17ee3e77e0e69e5640","modified":1481592642000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1481538221000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1481538221000},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1481538221000},{"_id":"themes/yilia/layout/layout.ejs","hash":"3bc1bba131445a07be002f490c70cd242bf8efce","modified":1481538221000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481538221000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481538221000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1481538221000},{"_id":"themes/yilia/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1481538221000},{"_id":"themes/yilia/source/.DS_Store","hash":"cc633ecd8d2dd4749c8428934d96e7eb93661cc2","modified":1483597333000},{"_id":"themes/yilia/source/install_docker.sh","hash":"a07686e5407e3248b946ae0f8670557129c1b3b1","modified":1481870417000},{"_id":"themes/yilia/source/shellStatus.php","hash":"069581e0c55cb3e7b06721ad5c71ca369896327f","modified":1483579780000},{"_id":"themes/yilia/source/favicon.ico","hash":"265ca54050df3427b7f0735a4b685201fd539be7","modified":1483510738000},{"_id":"source/_posts/study-notes/AJAX工作原理.md","hash":"8377f28247323eb252ceb12441c7c7c09f633132","modified":1557036741905},{"_id":"source/_posts/study-notes/Arguments对象作用深度研究.md","hash":"58bcd40975534d8b578d1592b2afa7e23af8372e","modified":1557038761792},{"_id":"source/_posts/study-notes/JS中的call、apply、bind方法详解.md","hash":"e3748b93d7fccbb7f243623bb9ca906096348df1","modified":1557038878979},{"_id":"source/_posts/study-notes/JS的原型和原型链.md","hash":"08fa69b0422d724c89012c5d9cb62154b6647fad","modified":1557038897374},{"_id":"source/_posts/study-notes/JavaScript中this指向.md","hash":"35b9cf775fcd422c61df28e5e46e51fdeb699f47","modified":1557038859098},{"_id":"source/_posts/study-notes/React学习资源汇总.md","hash":"69c900056914f46fea2c4d08dff0045de64e2665","modified":1557038905115},{"_id":"source/_posts/study-notes/JavaScript闭包(closure).md","hash":"621fb941bcd90c7e6c02bd8a26ffaa97741acb9f","modified":1557038868001},{"_id":"source/_posts/study-notes/html5 API postMessage跨域详解.md","hash":"ff6a6d07e6d0c1f217ba8ce7cae2ab78badae790","modified":1557038848261},{"_id":"source/_posts/study-notes/windowName跨域详解.md","hash":"3e4456c551d86a5589aede659e1e8b5062173310","modified":1557038914031},{"_id":"source/_posts/study-notes/事件绑定、事件监听、事件委托.md","hash":"dc6895a5ca6e8e3ea39210b9b8fcdebd635026ef","modified":1557036671441},{"_id":"source/_posts/study-notes/折腾：coding.net IDE node环境的安装.md","hash":"30bc9b984475b38a52f9533d05b0b33d34688b82","modified":1557038935644},{"_id":"source/_posts/study-notes/各阶段前端工程师都应该具备什么能力（JS篇）.md","hash":"05917716b05b333cf0c62be90e8a0891e7a602b0","modified":1557038925100},{"_id":"source/_posts/study-notes/模仿知乎界面的一个简单React demo.md","hash":"533037d925d1401c50a6f43128f64700f4e260ca","modified":1557038946763},{"_id":"source/_posts/study-notes/深入了解JavaScript，从作用域链开始（1）.md","hash":"6e757810cf3fb803ff80d03aa8e99d2c7196a0e7","modified":1557038954395},{"_id":"source/_posts/study-notes/深入了解JavaScript，优化作用域链（2）.md","hash":"37e85cae2020e7e8c3f7d9ebc896ac876ca32a3e","modified":1557038961222},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"aa0e9b5aeb97bd7424b28145be1e46f189f033c1","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"a27cc79336c2cf5402ae2aa01ee3a5126fb41924","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"fa7c982ac5bd3837c1536e9618f8e490f4d5657e","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"c3dd29a6ad5582c46aae6b8e7ad8440222658bfd","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/footer.ejs~","hash":"8d15eb6507e1625b4081553c56f2ce2b1bf38ebb","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"c97c4bae0a13d0696dc100c95ea509c7ad122ae0","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/head.ejs~","hash":"3a60378ae8cd07d370d3051320efbd4a7c774d0e","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"4fa71db4df6d5c076004c66777edd71c24aba647","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"243adb2246731f29089932a5ace07d8f11db537b","modified":1481538221000},{"_id":"themes/yilia/source/TNote/README.md","hash":"ab803f34075722668ab40997d796616070852554","modified":1483953821000},{"_id":"themes/yilia/source/Web-Notepad/LICENSE","hash":"292eab882db06fcb00f70e1868e8d1d369a283c9","modified":1483603031000},{"_id":"themes/yilia/source/Web-Notepad/README.md","hash":"114b6c86d767a2c960321ba69dc3a0cd29b67819","modified":1483603031000},{"_id":"themes/yilia/source/Web-Notepad/Web-Notepad.html","hash":"4be08cb5b4faf56f6df965f30762bc425ae61ea7","modified":1483603031000},{"_id":"themes/yilia/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1481538221000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1481538221000},{"_id":"themes/yilia/source/css/style.styl","hash":"c0a43c6fa1167f231e9736aec596b509a2c057ec","modified":1481538221000},{"_id":"themes/yilia/source/docker/Create_Graph.jpg","hash":"02a848be5546e6356083674f2df26757f2c6c2ad","modified":1482298635000},{"_id":"themes/yilia/source/docker/InfluxDB_login.png","hash":"8718a33bcb30a92b31bbf2b466fb300cc457793e","modified":1482298589000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1481538221000},{"_id":"themes/yilia/source/img/.DS_Store","hash":"c4caa8c68e0a0006cc5b482f4ca8e47089467553","modified":1484709321000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1481538221000},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1481538221000},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1481538221000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1481538221000},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1481538221000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1481538221000},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1481538221000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1481538221000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1481538221000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1481538221000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1481538221000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1481538221000},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1481538221000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1481538221000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1481538221000},{"_id":"themes/yilia/source/js/instagram.js","hash":"4732ad371044cbca35a4b85a29f8744335250f82","modified":1481538221000},{"_id":"themes/yilia/source/js/3d_images.js","hash":"a971bf0c01054c1e5f59633b904ef927a7fee022","modified":1481538221000},{"_id":"themes/yilia/source/js/jq.snow.js","hash":"7f79df1ce67eba07895cd48054ecd2908fb4d8de","modified":1481538221000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1481538221000},{"_id":"themes/yilia/source/js/main.js","hash":"6132d754c3c528d0a68222258bcfe6d9010fa924","modified":1481538221000},{"_id":"themes/yilia/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1481538221000},{"_id":"themes/yilia/source/mplayer/LICENSE","hash":"c58ac31ad86c126d42f627183257281d6c5745b6","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/README.md","hash":"39dda636142196739e444982ff3e7a96275a8f28","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/index.html","hash":"091a279e25d3f1d90f8339340daa3c0bd026d8df","modified":1483510428000},{"_id":"themes/yilia/source/picture/index.html","hash":"3b8c21636ef43deead1e3cc75d6867482374f310","modified":1481538221000},{"_id":"themes/yilia/source/docker/CreateDB.png","hash":"a628be1f314db06961571ce9f0fa836e5f232c60","modified":1482298601000},{"_id":"themes/yilia/source/docker/New_Dashboard.png","hash":"1ae7d2e503b8d707728a324f9b9ef669373586d0","modified":1482298630000},{"_id":"themes/yilia/source/docker/war_games_movie.jpg","hash":"19f4e66ba8eb954cfb197ae22badff28cf4bfdbf","modified":1482298569000},{"_id":"themes/yilia/source/img/ice.ico","hash":"265ca54050df3427b7f0735a4b685201fd539be7","modified":1481538221000},{"_id":"themes/yilia/source/js/jquery.main.js","hash":"4622b788d0e21abd05e91de5390a8bef557b6a85","modified":1481538221000},{"_id":"source/_posts/study-notes/JavaScript中this指向.docx","hash":"9cd429a19a0bbc67ec107d5acb8f5793f34a9c75","modified":1483593829000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"4fe41872f010c32fe34da0fa176398712baa03a2","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1939c94f24ba0f25dd728eef559509ba8647b546","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"da39b4ba0c0ce4e1932fd45c5aee10e8aca41f28","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1481538221000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1481538221000},{"_id":"themes/yilia/source/TNote/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1483953821000},{"_id":"themes/yilia/source/TNote/.git/config","hash":"6a3ffbc724d78c8a7ed527d2a12c2a2dc4b94179","modified":1483953821000},{"_id":"themes/yilia/source/TNote/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/index","hash":"0289cb271e4ee3de2826b9fadde3aa1169bbf288","modified":1483954340000},{"_id":"themes/yilia/source/TNote/.git/packed-refs","hash":"c833210da1b6d9a4f24693b4b299504fa9d8744b","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/.DS_Store","hash":"11e03b4031608d1907f6dda859296752f008506e","modified":1483954358000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"81624b9d5a510cc5f47f10bd1e6a0f8ea218844f","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"16fa9293ad5060e5de45272a3189ac25c0332a13","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"8f1a6ddd8f7976b5bfbf99150619332d0f592128","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"7d23a484c93bd8244d071164509907b1334ae262","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"050ce5a0e3987be270ffb1a4759ce4ac8b721a13","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"0b5b20b33142dee8509cfebe7dbb1bd89150bad8","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"676c98237ec983111d460089b09c1726f8bb2256","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"25ec28ceef1c28e5fc814cad08b9d7ce59fb67fa","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"6ac15a6815b1bbdbea89d3fe933c2821aa80b926","modified":1481538221000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"9052fa9155d132b667c7ce630366b795da034ae1","modified":1481538221000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1481538221000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1481538221000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1481538221000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1481538221000},{"_id":"themes/yilia/source/Web-Notepad/screenshot.png","hash":"9cb2bdeddc683810f59f0b43b2fd51f116a4a05f","modified":1483603031000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1481538221000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1481538221000},{"_id":"themes/yilia/source/docker/Grafana_Config.png","hash":"aa8fc7935a71d7d393f6a2975ea92794282f77c5","modified":1482298625000},{"_id":"themes/yilia/source/docker/cAdvisor_Dashboard.png","hash":"76ad96b79d64102ad07b7c5e1c01ee18653a2451","modified":1482298610000},{"_id":"themes/yilia/source/docker/filesystem_graph.png","hash":"2c0a6135982e9dcdd1f5dd85515f00ea3d7802c2","modified":1482298640000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1481538221000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1481538221000},{"_id":"themes/yilia/source/img/docker/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484709329000},{"_id":"themes/yilia/source/img/docker/1.jpg","hash":"da25e9e0844271b1dd26721d2699a207beebea91","modified":1483607919000},{"_id":"themes/yilia/source/img/docker/raspberrypi.gif","hash":"04a57fba7ab22aeaf64739f5cedfff598a175333","modified":1486096763000},{"_id":"themes/yilia/source/img/maven/1.png","hash":"ffedd7ce3c4eb83d9f81ba8e9fd3195e08156f6f","modified":1482386179000},{"_id":"themes/yilia/source/img/maven/2.png","hash":"2edc6c932bbabe2a32a00188443a4b4e5b36a83e","modified":1482386233000},{"_id":"themes/yilia/source/img/maven/3.png","hash":"b2ef61b7ca458f216f0761f80059921bc146df17","modified":1482386242000},{"_id":"themes/yilia/source/mplayer/css/mplayer.css.map","hash":"2e0bb28f7e2417b2f9fa9a2da7ef5098ff289346","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/css/mplayer.css","hash":"b7fdf2faaef3ded2acac7b3f1866906e9f2d2386","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/css/mplayer.less","hash":"c2f52345724df55bb3704afd8030e09b6ccbd776","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/css/mplayer.min.css","hash":"6ea4a1570ce1f9716f0c60ce4b6afea5d55b5589","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/img/mplayer_bg.png","hash":"582d8562b315dfb3bfffec48051f0ed22c63ccea","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/img/mplayer_error.png","hash":"e9445f933bf3fac622c23f0b9af1e413d0ca48d8","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/js/jquery.nstSlider.js","hash":"50d2df090104fb826bb1fca33fa49955c2ab384e","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/js/mplayer-list.js","hash":"02a40de2b975b86809f1f98a70fd80e71ec3e666","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/js/mplayer-functions.js","hash":"194a6faa3646bee9322b9cd9f75e751e9bdd6c97","modified":1483510428000},{"_id":"themes/yilia/source/mplayer/js/mplayer.js","hash":"b9922524b7012d019f4bab67c6213fc32ca5716f","modified":1483510428000},{"_id":"themes/yilia/source/picture/welove/as.html","hash":"2adca361194e42387620bf8e1f5317d3ae93c0a6","modified":1481538221000},{"_id":"themes/yilia/source/mplayer/js/mplayer.min.js","hash":"4f72c2ace6406fe85f1b03ee16de0e5dc5c91081","modified":1483510428000},{"_id":"themes/yilia/source/picture/welove/index.html","hash":"9c81cdb2687e7d299f2ab1ed1815cea8e6ca3375","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/04F8VWU7GR80.jpg","hash":"b3ed4ab171a4e19fba84d6aef307cbcabc7d6896","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/0YONP2W4M4N8.jpg","hash":"2b73da1d56dc76a7df63ae960f32f7bde0e2d56c","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/0e85d4fe6d.jpg","hash":"81454be6ecd33c082dd039ba68a976cdfe1a88bb","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/16BI56S8G191.jpg","hash":"783475c78fd2709fc82605ea57883b4141afbe96","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/15QC210I592Y.jpg","hash":"a6add59bea95a99ac98f5b58f1d88a2ae8e3c704","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/1B138N144Q1L.jpg","hash":"51eb95ff30195dae7e565ae76526eac88cba1e38","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/26AWCN2F2NK3.jpg","hash":"e8e2373ca065105d0d3eb1c66286e93984291ae2","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/228d8f57870a.jpg","hash":"1823364915fb22978b6843ff5540472072b0df69","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/26e9357e8919.jpg","hash":"f323aa31ffcde189ce6e756bee4b3508d14aff8f","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/2891F8UL99JN.jpg","hash":"b0717524dd5708cecb624c6a764d180372c53050","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/3288H86PKXYD.jpg","hash":"5ec6cbb2022dd31aaff245c982b392dd3638d6e6","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/3E3I28924Y1H.jpg","hash":"08e6f081b0192e087f3ec8f899d78fa83cb65bc6","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/3YRZV3UUIJ8J.jpg","hash":"ef813a866fa459edf88ad20d498eb0376ad88bb9","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/46eae50db6.jpg","hash":"857f809fa050d211382855b7baab969a1932c749","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/4K1VOC35V83U.jpg","hash":"21047f3d57380f0dc05f56ecb38a7a12556dd7e7","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/5a32993d65kd.jpg","hash":"a7a718adf8a70b283111b24135534c971194a2c0","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/661a66329a.jpg","hash":"11a538f3b17cba818032fd125378454ae878f43a","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/6a884d6ef2.jpg","hash":"31639da575e7fc863fdfcb19a4a6833399fa454f","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/7087QERO2GD1.jpg","hash":"2b527068b33bc290a0c1fb3a3bbae5d7b8de3f46","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/774573728f.jpg","hash":"733edf86dc98fee7c220b16e109931563e53f405","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/7H008442213G.jpg","hash":"328ceb0dc41b44a8232057a266dc7c3fa919733e","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/8I6F653TF901.jpg","hash":"d6e1ce5c6a8ab741ec9da9e3e62785999a079704","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/943N6616H80M.jpg","hash":"b0f70565cbce7484769ef16c32f64e0977b64857","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/8fe86226ff.jpg","hash":"177e8267a1ba17ede0a9cd1be446fdb0342eaebb","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/94da4fb185.jpg","hash":"32c1ad710625bd97fdbe5dbbc865cac854df2cec","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/9A0A1WM8X9PN.jpg","hash":"bf1ad2da66e82ed991683854a1fc4215c19dbc54","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/A6677X5WKQ7Q.jpg","hash":"8e438a318eeeddb7ab542e5d21e0ceba370bf854","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/B64L7138TZN2.jpg","hash":"f380ac49d98fe617396bc709d9c7cc1c3b53a17f","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/FUIF5Y7034D8.jpg","hash":"b2d419a20f480503778abb4b4da36269136f4d4d","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/B7Y8D1ZSS631.jpg","hash":"a44b8a2d3574c41ea4a93bfc11f5919a8f10762b","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/FUIF5Y7034F8.jpg","hash":"193e247c2dc07a829447918be4623eef2fa0acd8","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/I70POCIS22HL.jpg","hash":"38af34c2975237396de67f352e2ccac0b242d092","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/G5S68I07EQ4Y.jpg","hash":"a15ec21ccc2a4fb4718ad61d5188e16d69203f2c","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/J26R5CJ60EF3.jpg","hash":"70a951363f1343bb4705e6a238af4f328274f875","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/KNRS78Y66861.jpg","hash":"7f400c0714d57d3110eca0de18144e5dcfd42cca","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/M153679UB60O.jpg","hash":"83f25fe2c7e5c3b3e1d6e3a5b0b24dfc8ddb1f6b","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/R40770M17353.jpg","hash":"e368d476c7db993e380c45bc4c187186ea38fede","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/PWW4KTT4U4P6.jpg","hash":"af2e26affd64603aa1ae7c793617d9d0e1ad7640","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/RZ49I171U0S9.jpg","hash":"e8623bc5e8632eebbd49ba396ea21273246e531e","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/V9G45V6WN66F.jpg","hash":"478f3960db17e6d782d88c72448194eec263a6ff","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/V945A82ZRN68.jpg","hash":"9044c21776ef0f64ef992d4fe1fb7e98136dbc07","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/XC7I095R1BL8.jpg","hash":"ffbaffcd493529257f735402cfb94f13aef88627","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/Z1FH3FC92JS8.jpg","hash":"b391bca95e027a186afbdc88ee45b2ced6405cb6","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/Z8806BVO1ZH7.jpg","hash":"24cd1b4d85de707e2c2e1b190b479cc01c40dbf1","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/ZS0V7969IOVT.jpg","hash":"ce97c315ca9064d8bfa26ab2823aeca00b9cac29","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/a8008ae7f7.jpg","hash":"10a84cb38e5c89c515b3935aec3259dfa0e44d95","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/b2a96f2762d0.jpg","hash":"1cb7da15676341464d4912cf746d6e5eed14c23c","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/c136720da3.jpg","hash":"e26eb5c8d642228980b9b0870b62e5833a70abda","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/cb16bdfe091c.jpg","hash":"c925fc986adf9828bf05a67a01729b7283b8c640","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/d04505fe96.jpg","hash":"931bde3ff1fa4fcd223360ad14254102bbba07f1","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/d57dc05c81.jpg","hash":"62a39bf3cf7b97dddd261f9795a6a498e616993c","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/dab9f9326e93.jpg","hash":"c436d8d331a0ce108b2e1a0a47288df8a60ce3a6","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/f130a592bbef.jpg","hash":"b5ead9562489c09785f77021bde06f7ee9a5d47e","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/f9de619a168d.jpg","hash":"3d343c1a0169258e9371b240c7cba45347417632","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/f22e53da3a.jpg","hash":"e08748b2745736bcab483ff924f9879a0f2814cd","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/f9de619a16sd.jpg","hash":"bad9e40d9b6fba31e6b302029ce01b17564555d4","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/r.gif","hash":"b655697e6d787e1150f77db893754cf844588c71","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/fe00425d0a.jpg","hash":"a4e27f03e9c995130b6275cbdad233a22a0ac502","modified":1481538221000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"23a6f5b2ff76de9cb3cf1e886194c67647fd868a","modified":1481538221000},{"_id":"themes/yilia/source/img/docker/2.png","hash":"58f242dca7ec55314870489d0ba11d75ff168154","modified":1483607952000},{"_id":"themes/yilia/source/picture/images/1ef7ea6559.jpg","hash":"ba025f13965c87ce6425ef9cbb18efaac4b0d141","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/200ff06c0e.jpg","hash":"902162f507e23b7af7ff742f09bb1a5cccea59a6","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/5b0b0c8119.jpg","hash":"750f74947a96ad8fb5cfce18071b8693e8ad8df7","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/65f8787807.jpg","hash":"747267ebdf95af31503074142b084ff992a18a93","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/69833ed09a.jpg","hash":"3f64106fd42b36d5b33e413b49422880865470c1","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/73d310387e.jpg","hash":"dd8d11115bee0adefbcadd1fca31b51e719ca802","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/7b4cc906b3.jpg","hash":"8dc16a4630e01edd7c041a6aa2e17bdade6cea9b","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/b05b0c6962.jpg","hash":"e5f37f48e65d5cc7164663544beaa08071c743a2","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/b05c9edc7f.jpg","hash":"863b26a1178db241c7acecfbb67b5cc48d008f9b","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/ed37a0925e.jpg","hash":"e1e02aad711c15bb4117da6074f90fc3df60e9ee","modified":1481538221000},{"_id":"themes/yilia/source/picture/images/ed57bce8c4.jpg","hash":"1027ac37cf931b23b1079266e8cb0f6d4d4e5734","modified":1481538221000},{"_id":"themes/yilia/source/TNote/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1483953632000},{"_id":"themes/yilia/source/TNote/.git/logs/HEAD","hash":"d001389f11289aa6070aa355648f424a129dce6a","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/index.html","hash":"994eb6522ad19fff2ac6dcdd89741d91177665f9","modified":1483953821000},{"_id":"themes/yilia/source/TNote/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1483953632000},{"_id":"themes/yilia/source/picture/welove/css/templatemo-misc.css","hash":"41da84d1c5a2f681c0d58e553beeb1fd8895118d","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/css/animate.css","hash":"f07a09e532fe7f233f57e129d640b5b3d43cd39f","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/css/bootstrap.css","hash":"d5a26082576746d99600610b61274873222f3a3e","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/css/templatemo-style.css","hash":"21a34213287ee3bb3444d17ee81940f88cfde361","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/fonts/linecons.eot","hash":"3aa7c7528b015c6779d8572a40efbef7cb376f81","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/fonts/linecons.ttf","hash":"5422fa07604392b9869e7583b548eb6f81ec9136","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/fonts/linecons.woff","hash":"f1a9fd07996f24302f1410ec38faaaa741a53e10","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/style/default.css","hash":"ab5023b41aae12223b7ff670c91b458b84496cc6","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/style/functions.js","hash":"b032d58cad44108b3a0b9817a3f1be17b3af7067","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/style/garden.js","hash":"85790814137752af9f99363eb0dc38c54fa394b7","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/style/show_ads.js","hash":"92d996a768436031f22f9340a6c4501d5dd36c1a","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/js/main.js","hash":"a8d47823fc83b7aad05cabf9c7ccd560c13e5413","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/style/show_ads.js.bak","hash":"ce7f34492501585b76244c06369d8334ff634646","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/js/main.min.js","hash":"2ff68bd265ddb07c9d7d44f22c42374b1d48a593","modified":1481538221000},{"_id":"themes/yilia/source/docker/Docker_Monitoring.png","hash":"c2dc00bb53d780e8637377674e174ac51070aaf3","modified":1482298646000},{"_id":"themes/yilia/source/picture/welove/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/fonts/linecons.svg","hash":"18d5e599643f06bf7a45a6c62c295d0e838a99ad","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/images/slide1.jpg","hash":"9d1020ee05cda068bdec4724ff12e429848fa700","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/style/jquery.js","hash":"8f65e6a5886e7927ddb13a73561d3af324e82737","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/js/plugins.min.js","hash":"a49ebb06965cb53b1c609c69b180deb72d0c31bd","modified":1481538221000},{"_id":"themes/yilia/source/TNote/.git/refs/heads/master","hash":"6286c081a2e379c4b400119358bfdf98621ae962","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/css/style.css","hash":"c53d686fdb55bdf920b4172b0398de99f42e838b","modified":1483953821000},{"_id":"themes/yilia/source/TNote/.git/objects/pack/pack-388d3ac7d3cdc234afd57d047962c6aa42ef8f83.idx","hash":"d35e2d4a3efb4123d8cc96cd386273eeed0c951a","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.array.js","hash":"fe05e504adc5d41e4d7bebd258b5251efdd0d14b","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.base.js","hash":"7cbcda8836ee1488a2aa8c23c876350243a3ec45","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.browser.js","hash":"f9024c63dc80ac5adc23bfb6695819122b51cae2","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.cookie.js","hash":"3b04e462e7035f4f859092b800512660b728880e","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.core.js","hash":"5360f1bf45ce442124c022747ea0c8b5a9fc6fca","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.event.js","hash":"42e640a2bd1a1f9a740d9e4fcaa838e1ba8a3727","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.dom.js","hash":"32faddb7418a6103beb7c124b5cd1cfee4a54873","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.format.js","hash":"7b2792773e8ad4929f468753f0d37c5bd11a99de","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.string.js","hash":"9717955336e6feaacf6fa3eda4e8a906ac98c11e","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/jx.http.js","hash":"bca1644ab1828c631e90e4bc2f6ca65a98498e18","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.config.js","hash":"7b67dfd6a7890f4f6df0766531e43745a5efaa88","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.i18n.js","hash":"5aeedadb71910fec25217b1c068ebb30c07f9d0f","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.main.js","hash":"18b7081c5c10388f54a1cb3d57d8d8cfd398b8ed","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.net.js","hash":"210b82d09a59c4e1773ffad2f60daf325dd5889d","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.model.js","hash":"e1cdc81ee9ddde613fadbbe07b3e197b80b472f2","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.notelist.js","hash":"f8f6521a40c460832bd7ff4a6cdda81deeae0850","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.start.js","hash":"68a7ed5801b11e1dc65a73825b04d4ced2a92fb4","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.ui.js","hash":"fa26b0d6b23134783a37062d454ada365b5c1988","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.storage.js","hash":"30e2c20cdfddb78075fcbde95fed0a262d69909d","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.template.js","hash":"e9df901ceb0ed81cc6a6c9afe65aeee69dd9b1bd","modified":1483953821000},{"_id":"themes/yilia/source/TNote/resource/%C8%D5־%B2鿴%B1༭.png","hash":"0fa82c0b5dd4b119a7c8c850c24ba29d574043a9","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.view.editor.js","hash":"f125aaea19b976ded3fb1cac3c07af860d8aad5c","modified":1483953821000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.util.js","hash":"35c91b31e0d9936822e990351c60932ae5fcfaf8","modified":1483953821000},{"_id":"themes/yilia/source/TNote/resource/%C8%D5־%C1б%ED-hover%B1߽%E7.png","hash":"4b66f4d4ef32a5e2ed6d3d591f5ddb9ba0f0e60d","modified":1483953821000},{"_id":"themes/yilia/source/TNote/resource/%C8%D5־%C1б%ED.png","hash":"edc3d297d620bd67de44f458283c8929d7ceaa11","modified":1483953821000},{"_id":"themes/yilia/source/mplayer/js/jquery.js","hash":"c627912195acd6574c80e216a8eddfa21d4c0720","modified":1483510428000},{"_id":"themes/yilia/source/TNote/src/front/js/tn.view.js","hash":"faa9f60b91aacc4161ff30a92fc30ae30b764c7d","modified":1483953821000},{"_id":"themes/yilia/source/picture/welove/css/bootstrap/bootstrap.css","hash":"fb6454a878c270e741c11ab8167e9b12dae8c032","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/css/font-awesome.css","hash":"52f5ce0b1684af8e571c0bf23f026d1b709207fb","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/js/vendor/jquery.gmap3.min.js","hash":"f0e5e63ce8c7779f195002e69cd280d93f06ea31","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/js/vendor/modernizr-2.6.1-respond-1.1.0.min.js","hash":"cba21e140e211352ff840781f0c1c3f6b6c935de","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/images/slide4.jpg","hash":"09f193fd56ead4f21494e0ad1c38a41fea8d9e89","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/js/vendor/jquery-1.11.0.min.js","hash":"295153b52a34427bcaecb4a55c0aabcca825d544","modified":1481538221000},{"_id":"themes/yilia/source/TNote/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1483953821000},{"_id":"themes/yilia/source/TNote/.git/logs/refs/heads/master","hash":"d001389f11289aa6070aa355648f424a129dce6a","modified":1483953821000},{"_id":"themes/yilia/source/picture/welove/js/plugins.js","hash":"20eb55deefe4ebfcc62ce2f7f4d7dbc80766c16d","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/images/slide7.jpg","hash":"63d81ece1b77379ca14e5ee34792cfd65a8fc794","modified":1481538221000},{"_id":"themes/yilia/source/TNote/.git/logs/refs/remotes/origin/HEAD","hash":"d001389f11289aa6070aa355648f424a129dce6a","modified":1483953821000},{"_id":"themes/yilia/source/picture/welove/images/slide5.jpg","hash":"6d9d49cae1efd3a37f11071181d48aea4690ad79","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/images/slide3.jpg","hash":"5844f48f6f957ce129debbb5c505e6b1e00e1aab","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/images/slide2.jpg","hash":"5fb1cc634a572006157f02a02dd6db84cab8077b","modified":1481538221000},{"_id":"themes/yilia/source/picture/welove/images/slide6.jpg","hash":"d7d130befe037f637934f872554dd2b64d0588f5","modified":1481538221000},{"_id":"source/_posts/study-notes/ionic初学者填坑.docx","hash":"afdfd55cab8e76dab28f22060ad050bedddadb60","modified":1483593829000},{"_id":"themes/yilia/source/TNote/.git/objects/pack/pack-388d3ac7d3cdc234afd57d047962c6aa42ef8f83.pack","hash":"45c2dacdc9243283fdc65ac46d4490dbd0cb3ba0","modified":1483953821000},{"_id":"public/about/index.html","hash":"f413d7519c6a4ead33887d1ddfbf9a7ce2baa5ab","modified":1557039006242},{"_id":"public/2016/12/13/wps-can-not-input-chinese/index.html","hash":"ac53044559bbe61f890decd3076dabea8e47925c","modified":1557039006242},{"_id":"public/2016/11/19/ubuntu-amd/index.html","hash":"1bec370c907e145125254d0eea48499023c82d2b","modified":1557039006243},{"_id":"public/2016/11/14/spring-boot-log/index.html","hash":"85c51e6d592336e9912c214f9e93489568543970","modified":1557039006242},{"_id":"public/2016/11/14/maven-wrapper/index.html","hash":"2a4e65e8e5a1295161f9cfb6fbf0e4cbec2fe242","modified":1557039006243},{"_id":"public/2016/11/14/nginx-restart/index.html","hash":"b08d5d12289b2c98ed9a5adddd510184e9b8858b","modified":1557039006243},{"_id":"public/2016/09/14/linux-command/index.html","hash":"7da1f48aaffe6a4cdf6be63f7728a2df79f4fdad","modified":1557039006243},{"_id":"public/2015/05/09/node-about/index.html","hash":"a9c36a115aba6898bba19142eb0d598b665929e8","modified":1557039006243},{"_id":"public/2015/01/26/windows10-1/index.html","hash":"aed9752a3aa7245639cc8cd82ad5da8b81c81488","modified":1557039006243},{"_id":"public/2015/01/14/markdown/index.html","hash":"452fe609cfff349cae2a45520672f0a8dd1f90f4","modified":1557039006243},{"_id":"public/2014/12/26/hexo-note/index.html","hash":"4a45b127d55bd7e111f43e9127caaa17fed556be","modified":1557039006243},{"_id":"public/2014/12/22/hexo-guide/index.html","hash":"6f001b03cf783f673ee0dcedb5df89040efaf7d9","modified":1557039006243},{"_id":"public/2013/12/14/word-of-the-day/index.html","hash":"643ca52fc84ca36211475b2b1331c4869d66c539","modified":1557039006243},{"_id":"public/archives/2013/index.html","hash":"b65e180ebfb7cf8cd86cfe2dc0df167ac8900c0e","modified":1557039006245},{"_id":"public/archives/2013/12/index.html","hash":"9817cc96a82fa1be1e26080e7b5d2d5769c44377","modified":1557039006245},{"_id":"public/archives/2014/index.html","hash":"cd50c8c5fb89c38e170f8cf4503b318165a49c29","modified":1557039006246},{"_id":"public/archives/2014/12/index.html","hash":"2fd86a6533343a5b08171cdbc54a3d69e2059526","modified":1557039006246},{"_id":"public/archives/2015/index.html","hash":"960dbace557ab98d36667ca0a867c00bc4261623","modified":1557039006246},{"_id":"public/archives/2015/01/index.html","hash":"82e1dc2ccc42c38989617512611abe04573b30fa","modified":1557039006246},{"_id":"public/archives/2015/02/index.html","hash":"4516154547c0339a7bc42ac0338a02e3d51320ef","modified":1557039006246},{"_id":"public/archives/2015/05/index.html","hash":"ca6cd2427a7824800f9d76c993aee93d891f7c3b","modified":1557039006246},{"_id":"public/archives/2016/08/index.html","hash":"574f6a689762953364eae87a111dca5c58cebc81","modified":1557039006246},{"_id":"public/archives/2016/09/index.html","hash":"2c5d88fdd7134853db03aa5bd7c545373b3fcd18","modified":1557039006246},{"_id":"public/archives/2016/11/index.html","hash":"ef761f28ee3b31514602522a0a464a6963e42eb8","modified":1557039006246},{"_id":"public/archives/2016/12/index.html","hash":"af737c487b69d5a6ecf33c93562627dc8a7bc8b4","modified":1557039006246},{"_id":"public/archives/2017/index.html","hash":"d40a9c509113bba408f9c385a604a6f01a2ddffe","modified":1557039006248},{"_id":"public/archives/2017/01/index.html","hash":"9a17b7e378826ba28f48bbd8e41bb44aedd11b2b","modified":1557039006248},{"_id":"public/page/8/index.html","hash":"0d8d89a5d11d7f32c87a7419250a7d18bf35d391","modified":1557039006245},{"_id":"public/categories/技术/index.html","hash":"acbc45338b82a12e9e62964ff74d13f0eaef1e55","modified":1557039006245},{"_id":"public/categories/技术/page/2/index.html","hash":"52cb40bc869129cefe3cfeddea92441b38712135","modified":1557039006245},{"_id":"public/categories/技术/page/3/index.html","hash":"22f9dc9044aeab63f6c80d6b94d43846bf7bffea","modified":1557039006245},{"_id":"public/categories/技术/page/4/index.html","hash":"a438f13da9f5cb4951766157393da5e9135650a6","modified":1557039006245},{"_id":"public/categories/docker/index.html","hash":"6c4be7b61756931548118b253670fb70e86cb1d3","modified":1557039006245},{"_id":"public/categories/日志/index.html","hash":"3112bca87edc6fa0dcaa64b79a07fece2029d8fb","modified":1557039006245},{"_id":"public/categories/Python/index.html","hash":"26aa579f09042982bd0ab141d80780b75aac3e14","modified":1557039006245},{"_id":"public/categories/随感/index.html","hash":"c750ddcc10fdd111c511347a5ae41a5923ea8611","modified":1557039006245},{"_id":"public/tags/dpkg/index.html","hash":"dd18484ed838f201a4ac738f5a103b771ac46808","modified":1557039006243},{"_id":"public/tags/apt/index.html","hash":"306e8481ab9dfede577db8f605b4ec67c4ff3da6","modified":1557039006243},{"_id":"public/tags/linux/index.html","hash":"ef365208da181b0c6c29c9de9aeab90c35a67963","modified":1557039006244},{"_id":"public/tags/docker/index.html","hash":"c159245e13d7720addaf942223450070b06387e2","modified":1557039006243},{"_id":"public/tags/shell/index.html","hash":"1b827b22d8a84aba87be931842169e85bc050d0c","modified":1557039006243},{"_id":"public/tags/dubbo/index.html","hash":"7dbd6066d190f52bb220786b7b24bf09a7f6047a","modified":1557039006243},{"_id":"public/tags/java/index.html","hash":"d5d867c826604a062cf7c6132aa8203fa4a09a5c","modified":1557039006243},{"_id":"public/tags/spring/index.html","hash":"7d2ef5f517292e0ef4ad458834515ec16f280164","modified":1557039006244},{"_id":"public/tags/Hexo/index.html","hash":"d59e4fd7305d7d3b6652a60771466b6807e95134","modified":1557039006244},{"_id":"public/tags/随感/index.html","hash":"3462b8c1316921967c3124359a719ebe6ba5f989","modified":1557039006243},{"_id":"public/tags/markdown/index.html","hash":"c49ca0a4bc22ad44754e1b18be5d2c82cd2f7cc2","modified":1557039006245},{"_id":"public/tags/hexo/index.html","hash":"ae8e0e2a70799a6a8f1b68ea1f54a85b0ef8e735","modified":1557039006244},{"_id":"public/tags/lsof/index.html","hash":"1f7e73ec9c0e177dd8d652dd62354ae79bca95c6","modified":1557039006244},{"_id":"public/tags/maven/index.html","hash":"ced0fa024aefc0080811f4e4d75cf5ec4e3c9b43","modified":1557039006244},{"_id":"public/tags/nodejs/index.html","hash":"d97a4735e5f7f36c5da8ad949732a59bd82dc0fa","modified":1557039006244},{"_id":"public/tags/nginx/index.html","hash":"7958c3af073a5e6ffd1a1ac25b987a4fd5365ee9","modified":1557039006244},{"_id":"public/tags/python/index.html","hash":"76ffdfa91f0043b3d2a69cad39bc9488b88070ed","modified":1557039006244},{"_id":"public/tags/chat/index.html","hash":"d8db92cb30878b4b54a47f652805125c66953041","modified":1557039006245},{"_id":"public/tags/perl/index.html","hash":"0e4d2958df18ae2799ef87858daa0865f1516d88","modified":1557039006244},{"_id":"public/tags/springboot/index.html","hash":"2324dbdea4ae8186a1ce801abd36fbf5b5bbc568","modified":1557039006244},{"_id":"public/tags/logs/index.html","hash":"ab7af64ccd7bd97dfe3fdda67f5e6fb5b7666c28","modified":1557039006244},{"_id":"public/tags/ssh/index.html","hash":"7150af64c6225475e36b4716fccdcf8dda7b3ccd","modified":1557039006244},{"_id":"public/tags/ubuntu/index.html","hash":"ebbdaca47f74efe0eb7f810d716710d5826c71fc","modified":1557039006245},{"_id":"public/tags/windown10/index.html","hash":"d1a09653476254709d4609e1fd4f42a85ef0680d","modified":1557039006245},{"_id":"public/tags/days/index.html","hash":"42118b4efc7c7919fec1ed6d33c76380b4176b29","modified":1557039006245},{"_id":"public/tags/wps/index.html","hash":"db0aaf00a67c10fbc3fa03ba43aea07b52f7f2e5","modified":1557039006245},{"_id":"public/2017/01/05/study-notes/windowName跨域详解/index.html","hash":"f8a89b8717eec37b8d22360435ee97e0a0ef821d","modified":1557039006247},{"_id":"public/2017/01/05/study-notes/事件绑定、事件监听、事件委托/index.html","hash":"f7c94e9072b6ef6745a0b710afe26f72904376e6","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/html5 API postMessage跨域详解/index.html","hash":"e6d572f0dd86dc403db2f8200defbb813796a691","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/JavaScript闭包(closure)/index.html","hash":"48c105466bab59f79cd4f24c1f1bdc8e966369ce","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/JS的原型和原型链/index.html","hash":"991b9aeb54739f34881e6762e4709f50ba2d21c1","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/JS中的call、apply、bind方法详解/index.html","hash":"8fa3cf5875f17c381fff5a42700571618e544eb0","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/Arguments对象作用深度研究/index.html","hash":"d0940d81c13b64cb47ec6864fad3582f0628efd6","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/AJAX工作原理/index.html","hash":"e279070e1bebe06f85b014f9082317eeb7911c18","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/深入了解JavaScript，从作用域链开始（1）/index.html","hash":"d48430723721acb2b032159302b997f8d13f96c8","modified":1557039006247},{"_id":"public/2017/01/05/study-notes/React学习资源汇总/index.html","hash":"5da184381394953d10e8f3464dc94646795483a0","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/JavaScript中this指向/index.html","hash":"a36d27742bca80d15774def6634eaac88a2d0dfa","modified":1557039006246},{"_id":"public/2017/01/05/study-notes/折腾：coding.net IDE node环境的安装/index.html","hash":"db7a0cafe10cb1591141d5d563d21404d911556f","modified":1557039006247},{"_id":"public/2017/01/05/study-notes/各阶段前端工程师都应该具备什么能力（JS篇）/index.html","hash":"2322753b333352ff5df3d0f3d7f55aa2c337f3ea","modified":1557039006247},{"_id":"public/2017/01/05/study-notes/模仿知乎界面的一个简单React demo/index.html","hash":"fe6744cf4faa2e88278c60a10846f27a0ef2daf5","modified":1557039006247},{"_id":"public/2017/01/05/study-notes/深入了解JavaScript，优化作用域链（2）/index.html","hash":"66cecfc735d5e8ad13344f69ac75b98652545774","modified":1557039006247},{"_id":"public/2017/01/05/install-docker-to-raspberry/index.html","hash":"6cc2f8acc29f5c7200a0d1d976173bc951cf0081","modified":1557039006247},{"_id":"public/2017/01/04/hexo-install-config/index.html","hash":"02df8e581ffb30b5905df80a715c276e241b2e1b","modified":1557039006247},{"_id":"public/2016/12/21/apt-get/index.html","hash":"3555b239346ca7f683b06683188b6d3a8fdf9db0","modified":1557039006247},{"_id":"public/2016/12/21/docker/index.html","hash":"ca07ca40980eeb663684c39013d2270077628b02","modified":1557039006247},{"_id":"public/2016/12/16/python-socket/index.html","hash":"0dd6f4150bee7e1ad251e368251c4f4f5ff14fac","modified":1557039006247},{"_id":"public/2016/12/14/dubbo-jar-start-error/index.html","hash":"2ac42033072844121af5d3c213a336ca320bd8f7","modified":1557039006247},{"_id":"public/2016/09/14/dubbo-jar-start/index.html","hash":"a4109f514787b571b80e3c9a54fc366e02bd52e7","modified":1557039006247},{"_id":"public/2016/08/14/linux-baidu-pan/index.html","hash":"799fd69661accc01da8ea1e414773ad25ee6ac26","modified":1557039006247},{"_id":"public/2015/02/06/ssh-c/index.html","hash":"f63a5a24c9e2e66e5235dfaa19df733261bafa37","modified":1557039006247},{"_id":"public/2015/01/15/ssh-linux-windows/index.html","hash":"9257fabafbf8f3c1d2b306f6e2d807d780207fd9","modified":1557039006247},{"_id":"public/2015/01/14/graduation-you-must-strive/index.html","hash":"5cf4ea2b08f76295c50175e96892c3f56ce291d3","modified":1557039006247},{"_id":"public/2014/12/25/perl-lan/index.html","hash":"8b6286b93483ce17a558cf76897b7a99c2d09c09","modified":1557039006247},{"_id":"public/archives/index.html","hash":"9bcb6c2405666774284a71e952385466a432606b","modified":1557039006248},{"_id":"public/archives/2016/index.html","hash":"5bda5b0919899ea5b62c0a375b88e9f45b35d838","modified":1557039006248},{"_id":"public/index.html","hash":"4a5fb32f744d4c2bc17e8c54318e51efc5ad5784","modified":1557039006248},{"_id":"public/page/2/index.html","hash":"050a59cfa5e556b0e0916c1ab89bc36907eba9b8","modified":1557039006248},{"_id":"public/page/3/index.html","hash":"f2fc4659e5a18d3d1f6d1c2c7fef90274f93442d","modified":1557039006248},{"_id":"public/page/4/index.html","hash":"d1cc92f9799ef05a938e2006b0feb75c8b94f853","modified":1557039006248},{"_id":"public/page/5/index.html","hash":"45b034c8cbeb82f398528d4300074e4085a38f7f","modified":1557039006248},{"_id":"public/page/6/index.html","hash":"c9c623bc42f2bcddb7bf3d0f72482bcceaab7781","modified":1557039006248},{"_id":"public/page/7/index.html","hash":"651f7cbba06952189167db49c915d2448b06afbe","modified":1557039006248},{"_id":"public/install_docker.sh","hash":"a07686e5407e3248b946ae0f8670557129c1b3b1","modified":1557036153403},{"_id":"public/shellStatus.php","hash":"069581e0c55cb3e7b06721ad5c71ca369896327f","modified":1557036153403},{"_id":"public/Web-Notepad/LICENSE","hash":"292eab882db06fcb00f70e1868e8d1d369a283c9","modified":1557036153403},{"_id":"public/docker/Create_Graph.jpg","hash":"02a848be5546e6356083674f2df26757f2c6c2ad","modified":1557036153403},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1557036153403},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1557036153403},{"_id":"public/docker/InfluxDB_login.png","hash":"8718a33bcb30a92b31bbf2b466fb300cc457793e","modified":1557036153403},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1557036153403},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1557036153403},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1557036153403},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1557036153403},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1557036153403},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1557036153403},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1557036153403},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1557036153404},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1557036153404},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1557036153404},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1557036153404},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1557036153404},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1557036153404},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1557036153404},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1557036153404},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1557036153404},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1557036153404},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1557036153404},{"_id":"public/mplayer/LICENSE","hash":"c58ac31ad86c126d42f627183257281d6c5745b6","modified":1557036153404},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1557036153404},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1557036153404},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1557036153404},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1557036153404},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1557036153404},{"_id":"public/img/docker/raspberrypi.gif","hash":"04a57fba7ab22aeaf64739f5cedfff598a175333","modified":1557036153404},{"_id":"public/img/docker/1.jpg","hash":"da25e9e0844271b1dd26721d2699a207beebea91","modified":1557036153404},{"_id":"public/img/maven/2.png","hash":"2edc6c932bbabe2a32a00188443a4b4e5b36a83e","modified":1557036153404},{"_id":"public/img/maven/1.png","hash":"ffedd7ce3c4eb83d9f81ba8e9fd3195e08156f6f","modified":1557036153405},{"_id":"public/img/maven/3.png","hash":"b2ef61b7ca458f216f0761f80059921bc146df17","modified":1557036153405},{"_id":"public/mplayer/css/mplayer.css.map","hash":"2e0bb28f7e2417b2f9fa9a2da7ef5098ff289346","modified":1557036153405},{"_id":"public/mplayer/css/mplayer.less","hash":"c2f52345724df55bb3704afd8030e09b6ccbd776","modified":1557036153405},{"_id":"public/mplayer/img/mplayer_bg.png","hash":"582d8562b315dfb3bfffec48051f0ed22c63ccea","modified":1557036153405},{"_id":"public/mplayer/img/mplayer_error.png","hash":"e9445f933bf3fac622c23f0b9af1e413d0ca48d8","modified":1557036153405},{"_id":"public/picture/images/04F8VWU7GR80.jpg","hash":"b3ed4ab171a4e19fba84d6aef307cbcabc7d6896","modified":1557036153405},{"_id":"public/picture/images/0YONP2W4M4N8.jpg","hash":"2b73da1d56dc76a7df63ae960f32f7bde0e2d56c","modified":1557036153405},{"_id":"public/picture/images/0e85d4fe6d.jpg","hash":"81454be6ecd33c082dd039ba68a976cdfe1a88bb","modified":1557036153405},{"_id":"public/picture/images/16BI56S8G191.jpg","hash":"783475c78fd2709fc82605ea57883b4141afbe96","modified":1557036153405},{"_id":"public/picture/images/15QC210I592Y.jpg","hash":"a6add59bea95a99ac98f5b58f1d88a2ae8e3c704","modified":1557036153405},{"_id":"public/picture/images/26AWCN2F2NK3.jpg","hash":"e8e2373ca065105d0d3eb1c66286e93984291ae2","modified":1557036153405},{"_id":"public/picture/images/1B138N144Q1L.jpg","hash":"51eb95ff30195dae7e565ae76526eac88cba1e38","modified":1557036153405},{"_id":"public/picture/images/228d8f57870a.jpg","hash":"1823364915fb22978b6843ff5540472072b0df69","modified":1557036153405},{"_id":"public/picture/images/26e9357e8919.jpg","hash":"f323aa31ffcde189ce6e756bee4b3508d14aff8f","modified":1557036153405},{"_id":"public/picture/images/2891F8UL99JN.jpg","hash":"b0717524dd5708cecb624c6a764d180372c53050","modified":1557036153405},{"_id":"public/picture/images/3288H86PKXYD.jpg","hash":"5ec6cbb2022dd31aaff245c982b392dd3638d6e6","modified":1557036153405},{"_id":"public/picture/images/3E3I28924Y1H.jpg","hash":"08e6f081b0192e087f3ec8f899d78fa83cb65bc6","modified":1557036153405},{"_id":"public/picture/images/3YRZV3UUIJ8J.jpg","hash":"ef813a866fa459edf88ad20d498eb0376ad88bb9","modified":1557036153405},{"_id":"public/picture/images/5a32993d65kd.jpg","hash":"a7a718adf8a70b283111b24135534c971194a2c0","modified":1557036153406},{"_id":"public/picture/images/4K1VOC35V83U.jpg","hash":"21047f3d57380f0dc05f56ecb38a7a12556dd7e7","modified":1557036153405},{"_id":"public/picture/images/46eae50db6.jpg","hash":"857f809fa050d211382855b7baab969a1932c749","modified":1557036153406},{"_id":"public/picture/images/6a884d6ef2.jpg","hash":"31639da575e7fc863fdfcb19a4a6833399fa454f","modified":1557036153406},{"_id":"public/picture/images/7087QERO2GD1.jpg","hash":"2b527068b33bc290a0c1fb3a3bbae5d7b8de3f46","modified":1557036153406},{"_id":"public/picture/images/661a66329a.jpg","hash":"11a538f3b17cba818032fd125378454ae878f43a","modified":1557036153406},{"_id":"public/picture/images/774573728f.jpg","hash":"733edf86dc98fee7c220b16e109931563e53f405","modified":1557036153406},{"_id":"public/picture/images/7H008442213G.jpg","hash":"328ceb0dc41b44a8232057a266dc7c3fa919733e","modified":1557036153406},{"_id":"public/picture/images/8I6F653TF901.jpg","hash":"d6e1ce5c6a8ab741ec9da9e3e62785999a079704","modified":1557036153406},{"_id":"public/picture/images/943N6616H80M.jpg","hash":"b0f70565cbce7484769ef16c32f64e0977b64857","modified":1557036153406},{"_id":"public/picture/images/9A0A1WM8X9PN.jpg","hash":"bf1ad2da66e82ed991683854a1fc4215c19dbc54","modified":1557036153406},{"_id":"public/picture/images/8fe86226ff.jpg","hash":"177e8267a1ba17ede0a9cd1be446fdb0342eaebb","modified":1557036153406},{"_id":"public/picture/images/94da4fb185.jpg","hash":"32c1ad710625bd97fdbe5dbbc865cac854df2cec","modified":1557036153406},{"_id":"public/picture/images/A6677X5WKQ7Q.jpg","hash":"8e438a318eeeddb7ab542e5d21e0ceba370bf854","modified":1557036153406},{"_id":"public/picture/images/FUIF5Y7034D8.jpg","hash":"b2d419a20f480503778abb4b4da36269136f4d4d","modified":1557036153406},{"_id":"public/picture/images/B64L7138TZN2.jpg","hash":"f380ac49d98fe617396bc709d9c7cc1c3b53a17f","modified":1557036153406},{"_id":"public/picture/images/B7Y8D1ZSS631.jpg","hash":"a44b8a2d3574c41ea4a93bfc11f5919a8f10762b","modified":1557036153407},{"_id":"public/picture/images/FUIF5Y7034F8.jpg","hash":"193e247c2dc07a829447918be4623eef2fa0acd8","modified":1557036153406},{"_id":"public/picture/images/I70POCIS22HL.jpg","hash":"38af34c2975237396de67f352e2ccac0b242d092","modified":1557036153406},{"_id":"public/picture/images/J26R5CJ60EF3.jpg","hash":"70a951363f1343bb4705e6a238af4f328274f875","modified":1557036153406},{"_id":"public/picture/images/G5S68I07EQ4Y.jpg","hash":"a15ec21ccc2a4fb4718ad61d5188e16d69203f2c","modified":1557036153407},{"_id":"public/picture/images/KNRS78Y66861.jpg","hash":"7f400c0714d57d3110eca0de18144e5dcfd42cca","modified":1557036153406},{"_id":"public/picture/images/M153679UB60O.jpg","hash":"83f25fe2c7e5c3b3e1d6e3a5b0b24dfc8ddb1f6b","modified":1557036153407},{"_id":"public/picture/images/R40770M17353.jpg","hash":"e368d476c7db993e380c45bc4c187186ea38fede","modified":1557036153407},{"_id":"public/picture/images/PWW4KTT4U4P6.jpg","hash":"af2e26affd64603aa1ae7c793617d9d0e1ad7640","modified":1557036153407},{"_id":"public/picture/images/RZ49I171U0S9.jpg","hash":"e8623bc5e8632eebbd49ba396ea21273246e531e","modified":1557036153407},{"_id":"public/picture/images/V9G45V6WN66F.jpg","hash":"478f3960db17e6d782d88c72448194eec263a6ff","modified":1557036153407},{"_id":"public/picture/images/V945A82ZRN68.jpg","hash":"9044c21776ef0f64ef992d4fe1fb7e98136dbc07","modified":1557036153407},{"_id":"public/picture/images/Z1FH3FC92JS8.jpg","hash":"b391bca95e027a186afbdc88ee45b2ced6405cb6","modified":1557036153407},{"_id":"public/picture/images/XC7I095R1BL8.jpg","hash":"ffbaffcd493529257f735402cfb94f13aef88627","modified":1557036153407},{"_id":"public/picture/images/Z8806BVO1ZH7.jpg","hash":"24cd1b4d85de707e2c2e1b190b479cc01c40dbf1","modified":1557036153407},{"_id":"public/picture/images/ZS0V7969IOVT.jpg","hash":"ce97c315ca9064d8bfa26ab2823aeca00b9cac29","modified":1557036153407},{"_id":"public/picture/images/a8008ae7f7.jpg","hash":"10a84cb38e5c89c515b3935aec3259dfa0e44d95","modified":1557036153407},{"_id":"public/picture/images/b2a96f2762d0.jpg","hash":"1cb7da15676341464d4912cf746d6e5eed14c23c","modified":1557036153407},{"_id":"public/picture/images/cb16bdfe091c.jpg","hash":"c925fc986adf9828bf05a67a01729b7283b8c640","modified":1557036153407},{"_id":"public/picture/images/c136720da3.jpg","hash":"e26eb5c8d642228980b9b0870b62e5833a70abda","modified":1557036153407},{"_id":"public/picture/images/d04505fe96.jpg","hash":"931bde3ff1fa4fcd223360ad14254102bbba07f1","modified":1557036153407},{"_id":"public/picture/images/dab9f9326e93.jpg","hash":"c436d8d331a0ce108b2e1a0a47288df8a60ce3a6","modified":1557036153408},{"_id":"public/picture/images/d57dc05c81.jpg","hash":"62a39bf3cf7b97dddd261f9795a6a498e616993c","modified":1557036153408},{"_id":"public/picture/images/f9de619a168d.jpg","hash":"3d343c1a0169258e9371b240c7cba45347417632","modified":1557036153408},{"_id":"public/picture/images/r.gif","hash":"b655697e6d787e1150f77db893754cf844588c71","modified":1557036153408},{"_id":"public/picture/images/f130a592bbef.jpg","hash":"b5ead9562489c09785f77021bde06f7ee9a5d47e","modified":1557036153407},{"_id":"public/picture/images/f22e53da3a.jpg","hash":"e08748b2745736bcab483ff924f9879a0f2814cd","modified":1557036153408},{"_id":"public/picture/images/fe00425d0a.jpg","hash":"a4e27f03e9c995130b6275cbdad233a22a0ac502","modified":1557036153408},{"_id":"public/picture/images/f9de619a16sd.jpg","hash":"bad9e40d9b6fba31e6b302029ce01b17564555d4","modified":1557036153408},{"_id":"public/picture/welove/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1557036153408},{"_id":"public/picture/welove/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1557036153408},{"_id":"public/picture/welove/fonts/linecons.eot","hash":"3aa7c7528b015c6779d8572a40efbef7cb376f81","modified":1557036153408},{"_id":"public/picture/welove/fonts/linecons.ttf","hash":"5422fa07604392b9869e7583b548eb6f81ec9136","modified":1557036153408},{"_id":"public/picture/welove/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1557036153408},{"_id":"public/picture/welove/fonts/linecons.woff","hash":"f1a9fd07996f24302f1410ec38faaaa741a53e10","modified":1557036153409},{"_id":"public/picture/welove/style/show_ads.js.bak","hash":"ce7f34492501585b76244c06369d8334ff634646","modified":1557036153409},{"_id":"public/favicon.ico","hash":"265ca54050df3427b7f0735a4b685201fd539be7","modified":1557036153748},{"_id":"public/docker/CreateDB.png","hash":"a628be1f314db06961571ce9f0fa836e5f232c60","modified":1557036153760},{"_id":"public/docker/war_games_movie.jpg","hash":"19f4e66ba8eb954cfb197ae22badff28cf4bfdbf","modified":1557036153762},{"_id":"public/img/ice.ico","hash":"265ca54050df3427b7f0735a4b685201fd539be7","modified":1557036153762},{"_id":"public/docker/New_Dashboard.png","hash":"1ae7d2e503b8d707728a324f9b9ef669373586d0","modified":1557036153762},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"23a6f5b2ff76de9cb3cf1e886194c67647fd868a","modified":1557036153762},{"_id":"public/img/docker/2.png","hash":"58f242dca7ec55314870489d0ba11d75ff168154","modified":1557036153762},{"_id":"public/picture/images/5b0b0c8119.jpg","hash":"750f74947a96ad8fb5cfce18071b8693e8ad8df7","modified":1557036153763},{"_id":"public/picture/images/1ef7ea6559.jpg","hash":"ba025f13965c87ce6425ef9cbb18efaac4b0d141","modified":1557036153763},{"_id":"public/picture/images/65f8787807.jpg","hash":"747267ebdf95af31503074142b084ff992a18a93","modified":1557036153763},{"_id":"public/picture/images/200ff06c0e.jpg","hash":"902162f507e23b7af7ff742f09bb1a5cccea59a6","modified":1557036153763},{"_id":"public/picture/images/73d310387e.jpg","hash":"dd8d11115bee0adefbcadd1fca31b51e719ca802","modified":1557036153763},{"_id":"public/picture/images/7b4cc906b3.jpg","hash":"8dc16a4630e01edd7c041a6aa2e17bdade6cea9b","modified":1557036153763},{"_id":"public/picture/images/b05b0c6962.jpg","hash":"e5f37f48e65d5cc7164663544beaa08071c743a2","modified":1557036153763},{"_id":"public/picture/images/b05c9edc7f.jpg","hash":"863b26a1178db241c7acecfbb67b5cc48d008f9b","modified":1557036153763},{"_id":"public/picture/images/69833ed09a.jpg","hash":"3f64106fd42b36d5b33e413b49422880865470c1","modified":1557036153763},{"_id":"public/picture/images/ed37a0925e.jpg","hash":"e1e02aad711c15bb4117da6074f90fc3df60e9ee","modified":1557036153763},{"_id":"public/picture/images/ed57bce8c4.jpg","hash":"1027ac37cf931b23b1079266e8cb0f6d4d4e5734","modified":1557036153763},{"_id":"public/picture/welove/fonts/linecons.svg","hash":"18d5e599643f06bf7a45a6c62c295d0e838a99ad","modified":1557036153763},{"_id":"public/picture/welove/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1557036153764},{"_id":"public/picture/welove/images/slide1.jpg","hash":"9d1020ee05cda068bdec4724ff12e429848fa700","modified":1557036153764},{"_id":"public/TNote/README.html","hash":"77f60b8c36c0142e36852dac87797346697fc254","modified":1489733564362},{"_id":"public/Web-Notepad/README.html","hash":"7621e18b70d94f4385047598f958148d766bf6c9","modified":1557036153774},{"_id":"public/Web-Notepad/Web-Notepad.html","hash":"7a18c3b66085a62758af373480c546f281cc54bb","modified":1557036153774},{"_id":"public/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1557036153773},{"_id":"public/js/instagram.js","hash":"9c3fa2f07724b20f6f2b05bc4f2d01ea0633001d","modified":1557036153773},{"_id":"public/js/3d_images.js","hash":"a971bf0c01054c1e5f59633b904ef927a7fee022","modified":1557036153773},{"_id":"public/js/jq.snow.js","hash":"448f9a13cc628b34b9f9db9d70c56b860f9a64e4","modified":1557036153773},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1557036153773},{"_id":"public/js/main.js","hash":"d2a24e6374ffa3bd9fc4a512275691763ee2cb3d","modified":1557036153774},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1557036153774},{"_id":"public/mplayer/README.html","hash":"27e5998a7d1e52679f639cb40e2523af742c3de2","modified":1557036153774},{"_id":"public/mplayer/index.html","hash":"a67b02adbdbaed6166190d6386a9d5b39c22789d","modified":1557036153774},{"_id":"public/picture/index.html","hash":"5a9a9230b48318abf8438f2155f027aa60f55dcc","modified":1557036153774},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1557036153774},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1557036153774},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1557036153774},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1557036153774},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1557036153774},{"_id":"public/mplayer/css/mplayer.css","hash":"b7fdf2faaef3ded2acac7b3f1866906e9f2d2386","modified":1557036153780},{"_id":"public/mplayer/css/mplayer.min.css","hash":"6ea4a1570ce1f9716f0c60ce4b6afea5d55b5589","modified":1557036153774},{"_id":"public/mplayer/js/mplayer-functions.js","hash":"662ace3d4e685e4159d7562161b0d1b39ec33c9a","modified":1557036153774},{"_id":"public/picture/welove/as.html","hash":"5c9c5c8d03745e4b753c74356739531dfedb7d0b","modified":1557036153774},{"_id":"public/picture/welove/index.html","hash":"6b3895333251df23a27d3dfd0cde86ef882a78f9","modified":1557036153774},{"_id":"public/mplayer/js/mplayer.min.js","hash":"b6ae97e2d4993026c2067a41214d9c64376fb771","modified":1557036153780},{"_id":"public/TNote/src/front/index.html","hash":"994eb6522ad19fff2ac6dcdd89741d91177665f9","modified":1489733564363},{"_id":"public/picture/welove/css/templatemo-misc.css","hash":"889e0ad12799c1e0f4f66a2c71beca3dd06cb0e1","modified":1557036153780},{"_id":"public/picture/welove/css/bootstrap.css","hash":"613a889373b730bca49d0be1f0fbcb2719bcf7cc","modified":1557036153780},{"_id":"public/picture/welove/style/default.css","hash":"25c997ecb8c02768d3b1b5f143c9b109c3740494","modified":1557036153774},{"_id":"public/picture/welove/style/functions.js","hash":"a6584a5b16118ac78cd93cd0ba329f897dd8eb76","modified":1557036153774},{"_id":"public/picture/welove/style/garden.js","hash":"91ca4982f590cefb28b4a9d17a26ee4d0580c830","modified":1557036153774},{"_id":"public/picture/welove/style/show_ads.js","hash":"9b3bb937573c25ffb9b0e1d6fe046c62f8ee5aab","modified":1557036153774},{"_id":"public/picture/welove/js/main.js","hash":"c1bc8e5eb608621e87548292992fd822e68c9c23","modified":1557036153774},{"_id":"public/picture/welove/js/main.min.js","hash":"2ff68bd265ddb07c9d7d44f22c42374b1d48a593","modified":1557036153774},{"_id":"public/TNote/src/front/css/style.css","hash":"c53d686fdb55bdf920b4172b0398de99f42e838b","modified":1489733564363},{"_id":"public/TNote/src/front/js/jx.array.js","hash":"fe05e504adc5d41e4d7bebd258b5251efdd0d14b","modified":1489733564363},{"_id":"public/TNote/src/front/js/jx.browser.js","hash":"f9024c63dc80ac5adc23bfb6695819122b51cae2","modified":1489733564363},{"_id":"public/TNote/src/front/js/jx.cookie.js","hash":"3b04e462e7035f4f859092b800512660b728880e","modified":1489733564363},{"_id":"public/TNote/src/front/js/jx.core.js","hash":"5360f1bf45ce442124c022747ea0c8b5a9fc6fca","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.i18n.js","hash":"5aeedadb71910fec25217b1c068ebb30c07f9d0f","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.main.js","hash":"18b7081c5c10388f54a1cb3d57d8d8cfd398b8ed","modified":1489733564364},{"_id":"public/TNote/src/front/js/jx.format.js","hash":"7b2792773e8ad4929f468753f0d37c5bd11a99de","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.net.js","hash":"210b82d09a59c4e1773ffad2f60daf325dd5889d","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.config.js","hash":"7b67dfd6a7890f4f6df0766531e43745a5efaa88","modified":1489733564364},{"_id":"public/TNote/src/front/js/jx.http.js","hash":"bca1644ab1828c631e90e4bc2f6ca65a98498e18","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.model.js","hash":"e1cdc81ee9ddde613fadbbe07b3e197b80b472f2","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.notelist.js","hash":"f8f6521a40c460832bd7ff4a6cdda81deeae0850","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.start.js","hash":"68a7ed5801b11e1dc65a73825b04d4ced2a92fb4","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.ui.js","hash":"fa26b0d6b23134783a37062d454ada365b5c1988","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.storage.js","hash":"30e2c20cdfddb78075fcbde95fed0a262d69909d","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.template.js","hash":"e9df901ceb0ed81cc6a6c9afe65aeee69dd9b1bd","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.view.editor.js","hash":"f125aaea19b976ded3fb1cac3c07af860d8aad5c","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.util.js","hash":"35c91b31e0d9936822e990351c60932ae5fcfaf8","modified":1489733564364},{"_id":"public/TNote/src/front/js/tn.view.js","hash":"faa9f60b91aacc4161ff30a92fc30ae30b764c7d","modified":1489733564364},{"_id":"public/css/style.css","hash":"ff5f1be36ddb73916dcfb478da51c4cf42e2828d","modified":1557036153774},{"_id":"public/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1557036153812},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1557036153782},{"_id":"public/js/jquery.main.js","hash":"4622b788d0e21abd05e91de5390a8bef557b6a85","modified":1557036153847},{"_id":"public/mplayer/js/mplayer-list.js","hash":"9780f6489286f0550b72b5a3a5da8eba5d086ada","modified":1557036153812},{"_id":"public/mplayer/js/mplayer.js","hash":"8791165618c778361e55aff9010db5f4e0f2ef3d","modified":1557036153782},{"_id":"public/mplayer/js/jquery.nstSlider.js","hash":"76e28449355fe85ae17f5ff64b80a3192babcd0b","modified":1557036153828},{"_id":"public/picture/welove/css/templatemo-style.css","hash":"037862ba7c798c904c6102dab362072b94f7ba73","modified":1557036153782},{"_id":"public/picture/welove/css/animate.css","hash":"45c6e24dfc6a738423f57b359fcd7933bbb923f4","modified":1557036153828},{"_id":"public/TNote/src/front/js/jx.base.js","hash":"7cbcda8836ee1488a2aa8c23c876350243a3ec45","modified":1489733564365},{"_id":"public/picture/welove/style/jquery.js","hash":"0141fae60ba252ec0127181a3b51379e94f0dec2","modified":1557036153839},{"_id":"public/picture/welove/js/plugins.min.js","hash":"51a27890297ac8587e9cf21fdf52065d37e5069f","modified":1557036153853},{"_id":"public/TNote/src/front/js/jx.event.js","hash":"42e640a2bd1a1f9a740d9e4fcaa838e1ba8a3727","modified":1489733564365},{"_id":"public/TNote/src/front/js/jx.dom.js","hash":"32faddb7418a6103beb7c124b5cd1cfee4a54873","modified":1489733564365},{"_id":"public/TNote/src/front/js/jx.string.js","hash":"9717955336e6feaacf6fa3eda4e8a906ac98c11e","modified":1489733564365},{"_id":"public/picture/welove/css/bootstrap/bootstrap.css","hash":"158b49b337374ec0bef6fa41dbaa9e777b83d9aa","modified":1557036153812},{"_id":"public/picture/welove/js/vendor/jquery.gmap3.min.js","hash":"d801c4f49cad8c1d7ea81c7d5ced340c3a965939","modified":1557036153782},{"_id":"public/mplayer/js/jquery.js","hash":"b29f9f95d633f42d3bcf71fe219864b5ed169adf","modified":1557036153862},{"_id":"public/picture/welove/css/font-awesome.css","hash":"ea3923856f74947917989114266092212b734b0e","modified":1557036153856},{"_id":"public/picture/welove/js/vendor/modernizr-2.6.1-respond-1.1.0.min.js","hash":"8509e5f80680d0aa4794fe99386695fa9e9d8b57","modified":1557036153782},{"_id":"public/picture/welove/js/plugins.js","hash":"f4982a6aada85f3f42e75438b314989de6ecb57d","modified":1557036153862},{"_id":"public/picture/welove/js/vendor/jquery-1.11.0.min.js","hash":"4566b5815f47f976c7c3d3083c600ad5561b6fc0","modified":1557036153851},{"_id":"public/Web-Notepad/screenshot.png","hash":"9cb2bdeddc683810f59f0b43b2fd51f116a4a05f","modified":1557036153780},{"_id":"public/docker/Grafana_Config.png","hash":"aa8fc7935a71d7d393f6a2975ea92794282f77c5","modified":1557036153774},{"_id":"public/docker/cAdvisor_Dashboard.png","hash":"76ad96b79d64102ad07b7c5e1c01ee18653a2451","modified":1557036153780},{"_id":"public/docker/filesystem_graph.png","hash":"2c0a6135982e9dcdd1f5dd85515f00ea3d7802c2","modified":1557036153775},{"_id":"public/picture/welove/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1557036153780},{"_id":"public/picture/welove/images/slide4.jpg","hash":"09f193fd56ead4f21494e0ad1c38a41fea8d9e89","modified":1557036153788},{"_id":"public/TNote/resource/%C8%D5־%C1б%ED.png","hash":"edc3d297d620bd67de44f458283c8929d7ceaa11","modified":1489733564383},{"_id":"public/TNote/resource/%C8%D5־%C1б%ED-hover%B1߽%E7.png","hash":"4b66f4d4ef32a5e2ed6d3d591f5ddb9ba0f0e60d","modified":1489733564383},{"_id":"public/TNote/resource/%C8%D5־%B2鿴%B1༭.png","hash":"0fa82c0b5dd4b119a7c8c850c24ba29d574043a9","modified":1489733564383},{"_id":"public/docker/Docker_Monitoring.png","hash":"c2dc00bb53d780e8637377674e174ac51070aaf3","modified":1557036153812},{"_id":"public/picture/welove/images/slide7.jpg","hash":"63d81ece1b77379ca14e5ee34792cfd65a8fc794","modified":1557036153821},{"_id":"public/picture/welove/images/slide5.jpg","hash":"6d9d49cae1efd3a37f11071181d48aea4690ad79","modified":1557036153848},{"_id":"public/picture/welove/images/slide3.jpg","hash":"5844f48f6f957ce129debbb5c505e6b1e00e1aab","modified":1557036153829},{"_id":"public/picture/welove/images/slide2.jpg","hash":"5fb1cc634a572006157f02a02dd6db84cab8077b","modified":1557036153847},{"_id":"public/picture/welove/images/slide6.jpg","hash":"d7d130befe037f637934f872554dd2b64d0588f5","modified":1557036153854}],"Category":[{"name":"技术","_id":"cj0dgwc2a00032u6b2ky8lyql"},{"name":"docker","_id":"cj0dgwc2n00082u6bwom5grrh"},{"name":"日志","_id":"cj0dgwc32000j2u6bgry7cw25"},{"name":"Python","_id":"cj0dgwc3m00182u6bp8vsf0tb"},{"name":"随感","_id":"cj0dgwc44001v2u6bmkbdee9f"}],"Data":[],"Page":[{"title":"about","date":"2014-12-24T06:30:48.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2014-12-24 14:30:48\n---\n","updated":"2016-12-12T10:23:41.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0dgwc2300012u6bjts5doyp","content":"","excerpt":"","more":""}],"Post":[{"title":"dpkg: warning: files list file for package","date":"2016-12-21T08:53:29.000Z","_content":"dpkg: warning: files list file for package `*****' missing, assuming package has no files currently installed解决办法\n<!-- more -->\n\n```code\n#!/bin/bash\nset -e\n\n# Clean out /var/cache/apt/archives\napt-get clean\n# Fill it with all the .debs we need\napt-get --reinstall -dy install $(dpkg --get-selections | grep '[[:space:]]install' | cut -f1)\n\nDIR=$(mktemp -d -t info-XXXXXX)\nfor deb in /var/cache/apt/archives/*.deb\ndo\n    # Move to working directory\n    cd \"$DIR\"\n    # Create DEBIAN directory\n    mkdir -p DEBIAN\n    # Extract control files\n    dpkg-deb -e \"$deb\"\n    # Extract file list, fixing up the leading ./ and turning / into /.\n    dpkg-deb -c \"$deb\" | awk '{print $NF}' | cut -c2- | sed -e 's/^\\/$/\\/./' > DEBIAN/list\n    # Figure out binary package name\n    DEB=$(basename \"$deb\" | cut -d_ -f1)\n    # Copy each control file into place\n    cd DEBIAN\n    for file in *\n    do\n        cp -a \"$file\" /var/lib/dpkg/info/\"$DEB\".\"$file\"\n    done\n    # Clean up\n    cd ..\n    rm -rf DEBIAN\ndone\nrmdir \"$DIR\"\n```\n在 Ubuntu 执行 sudo apt-get upgrade 时，出现了如下的报错：\n```code\nSetting up bluez (4.101-0ubuntu13.1) ...\nreload: Job is not running: dbus\ninvoke-rc.d: initscript dbus, action \"force-reload\" failed.\nstart: Job failed to start\ninvoke-rc.d: initscript bluetooth, action \"start\" failed.\ndpkg: error processing package bluez (--configure):\n subprocess installed post-installation script returned error exit status 1\ndpkg: dependency problems prevent configuration of bluez-alsa:i386:\n bluez-alsa:i386 depends on bluez; however:\n  Package bluez is not configured yet.\n\ndpkg: error processing package bluez-alsa:i386 (--configure):\n dependency problems - leaving unconfigured\nNo apport report written because the error message indicates its a followup error from a previous failure.\n                          Errors were encountered while processing:\n bluez\n bluez-alsa:i386\nE: Sub-process /usr/bin/dpkg returned an error code (1)\n```\n通过执行下面的命令可以解决该问题：\n\n```code\n$ sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_old/\n$ sudo mkdir /var/lib/dpkg/info/\n$ sudo apt-get update\n...\n$ sudo apt-get -f install\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n7 not fully installed or removed.\nAfter this operation, 0 B of additional disk space will be used.\nSetting up bluez (4.101-0ubuntu13.1) ...\nSetting up blueman (1.23-git201403102151-1ubuntu1) ...\nSetting up bluetooth (4.101-0ubuntu13.1) ...\nSetting up bluez-alsa:amd64 (4.101-0ubuntu13.1) ...\nSetting up bluez-alsa:i386 (4.101-0ubuntu13.1) ...\nSetting up bluez-gstreamer (4.101-0ubuntu13.1) ...\nSetting up bluez-utils (4.101-0ubuntu13.1) ...\n$ sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old/\n$ sudo rm -rf /var/lib/dpkg/info\n$ sudo mv /var/lib/dpkg/info_old/ /var/lib/dpkg/info/\n```\n输入上述命令之后，在执行 sudo apt-get update 和 sudo apt-get upgrade 就不会有问题了。\n","source":"_posts/apt-get.md","raw":"title: 'dpkg: warning: files list file for package'\ndate: 2016-12-21 16:53:29\ncategories: 技术\ntags: [dpkg,apt,linux]\n---\ndpkg: warning: files list file for package `*****' missing, assuming package has no files currently installed解决办法\n<!-- more -->\n\n```code\n#!/bin/bash\nset -e\n\n# Clean out /var/cache/apt/archives\napt-get clean\n# Fill it with all the .debs we need\napt-get --reinstall -dy install $(dpkg --get-selections | grep '[[:space:]]install' | cut -f1)\n\nDIR=$(mktemp -d -t info-XXXXXX)\nfor deb in /var/cache/apt/archives/*.deb\ndo\n    # Move to working directory\n    cd \"$DIR\"\n    # Create DEBIAN directory\n    mkdir -p DEBIAN\n    # Extract control files\n    dpkg-deb -e \"$deb\"\n    # Extract file list, fixing up the leading ./ and turning / into /.\n    dpkg-deb -c \"$deb\" | awk '{print $NF}' | cut -c2- | sed -e 's/^\\/$/\\/./' > DEBIAN/list\n    # Figure out binary package name\n    DEB=$(basename \"$deb\" | cut -d_ -f1)\n    # Copy each control file into place\n    cd DEBIAN\n    for file in *\n    do\n        cp -a \"$file\" /var/lib/dpkg/info/\"$DEB\".\"$file\"\n    done\n    # Clean up\n    cd ..\n    rm -rf DEBIAN\ndone\nrmdir \"$DIR\"\n```\n在 Ubuntu 执行 sudo apt-get upgrade 时，出现了如下的报错：\n```code\nSetting up bluez (4.101-0ubuntu13.1) ...\nreload: Job is not running: dbus\ninvoke-rc.d: initscript dbus, action \"force-reload\" failed.\nstart: Job failed to start\ninvoke-rc.d: initscript bluetooth, action \"start\" failed.\ndpkg: error processing package bluez (--configure):\n subprocess installed post-installation script returned error exit status 1\ndpkg: dependency problems prevent configuration of bluez-alsa:i386:\n bluez-alsa:i386 depends on bluez; however:\n  Package bluez is not configured yet.\n\ndpkg: error processing package bluez-alsa:i386 (--configure):\n dependency problems - leaving unconfigured\nNo apport report written because the error message indicates its a followup error from a previous failure.\n                          Errors were encountered while processing:\n bluez\n bluez-alsa:i386\nE: Sub-process /usr/bin/dpkg returned an error code (1)\n```\n通过执行下面的命令可以解决该问题：\n\n```code\n$ sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_old/\n$ sudo mkdir /var/lib/dpkg/info/\n$ sudo apt-get update\n...\n$ sudo apt-get -f install\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n7 not fully installed or removed.\nAfter this operation, 0 B of additional disk space will be used.\nSetting up bluez (4.101-0ubuntu13.1) ...\nSetting up blueman (1.23-git201403102151-1ubuntu1) ...\nSetting up bluetooth (4.101-0ubuntu13.1) ...\nSetting up bluez-alsa:amd64 (4.101-0ubuntu13.1) ...\nSetting up bluez-alsa:i386 (4.101-0ubuntu13.1) ...\nSetting up bluez-gstreamer (4.101-0ubuntu13.1) ...\nSetting up bluez-utils (4.101-0ubuntu13.1) ...\n$ sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old/\n$ sudo rm -rf /var/lib/dpkg/info\n$ sudo mv /var/lib/dpkg/info_old/ /var/lib/dpkg/info/\n```\n输入上述命令之后，在执行 sudo apt-get update 和 sudo apt-get upgrade 就不会有问题了。\n","slug":"apt-get","published":1,"updated":"2019-05-05T05:47:33.969Z","_id":"cj0dgwc1v00002u6bakfhwz59","comments":1,"layout":"post","photos":[],"link":"","content":"<p>dpkg: warning: files list file for package `<strong>*</strong>‘ missing, assuming package has no files currently installed解决办法<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">set -e</span><br><span class=\"line\"></span><br><span class=\"line\"># Clean out /var/cache/apt/archives</span><br><span class=\"line\">apt-get clean</span><br><span class=\"line\"># Fill it with all the .debs we need</span><br><span class=\"line\">apt-get --reinstall -dy install $(dpkg --get-selections | grep &apos;[[:space:]]install&apos; | cut -f1)</span><br><span class=\"line\"></span><br><span class=\"line\">DIR=$(mktemp -d -t info-XXXXXX)</span><br><span class=\"line\">for deb in /var/cache/apt/archives/*.deb</span><br><span class=\"line\">do</span><br><span class=\"line\">    # Move to working directory</span><br><span class=\"line\">    cd &quot;$DIR&quot;</span><br><span class=\"line\">    # Create DEBIAN directory</span><br><span class=\"line\">    mkdir -p DEBIAN</span><br><span class=\"line\">    # Extract control files</span><br><span class=\"line\">    dpkg-deb -e &quot;$deb&quot;</span><br><span class=\"line\">    # Extract file list, fixing up the leading ./ and turning / into /.</span><br><span class=\"line\">    dpkg-deb -c &quot;$deb&quot; | awk &apos;&#123;print $NF&#125;&apos; | cut -c2- | sed -e &apos;s/^\\/$/\\/./&apos; &gt; DEBIAN/list</span><br><span class=\"line\">    # Figure out binary package name</span><br><span class=\"line\">    DEB=$(basename &quot;$deb&quot; | cut -d_ -f1)</span><br><span class=\"line\">    # Copy each control file into place</span><br><span class=\"line\">    cd DEBIAN</span><br><span class=\"line\">    for file in *</span><br><span class=\"line\">    do</span><br><span class=\"line\">        cp -a &quot;$file&quot; /var/lib/dpkg/info/&quot;$DEB&quot;.&quot;$file&quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\">    # Clean up</span><br><span class=\"line\">    cd ..</span><br><span class=\"line\">    rm -rf DEBIAN</span><br><span class=\"line\">done</span><br><span class=\"line\">rmdir &quot;$DIR&quot;</span><br></pre></td></tr></table></figure>\n<p>在 Ubuntu 执行 sudo apt-get upgrade 时，出现了如下的报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Setting up bluez (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">reload: Job is not running: dbus</span><br><span class=\"line\">invoke-rc.d: initscript dbus, action &quot;force-reload&quot; failed.</span><br><span class=\"line\">start: Job failed to start</span><br><span class=\"line\">invoke-rc.d: initscript bluetooth, action &quot;start&quot; failed.</span><br><span class=\"line\">dpkg: error processing package bluez (--configure):</span><br><span class=\"line\"> subprocess installed post-installation script returned error exit status 1</span><br><span class=\"line\">dpkg: dependency problems prevent configuration of bluez-alsa:i386:</span><br><span class=\"line\"> bluez-alsa:i386 depends on bluez; however:</span><br><span class=\"line\">  Package bluez is not configured yet.</span><br><span class=\"line\"></span><br><span class=\"line\">dpkg: error processing package bluez-alsa:i386 (--configure):</span><br><span class=\"line\"> dependency problems - leaving unconfigured</span><br><span class=\"line\">No apport report written because the error message indicates its a followup error from a previous failure.</span><br><span class=\"line\">                          Errors were encountered while processing:</span><br><span class=\"line\"> bluez</span><br><span class=\"line\"> bluez-alsa:i386</span><br><span class=\"line\">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure></p>\n<p>通过执行下面的命令可以解决该问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_old/</span><br><span class=\"line\">$ sudo mkdir /var/lib/dpkg/info/</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">...</span><br><span class=\"line\">$ sudo apt-get -f install</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class=\"line\">7 not fully installed or removed.</span><br><span class=\"line\">After this operation, 0 B of additional disk space will be used.</span><br><span class=\"line\">Setting up bluez (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up blueman (1.23-git201403102151-1ubuntu1) ...</span><br><span class=\"line\">Setting up bluetooth (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up bluez-alsa:amd64 (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up bluez-alsa:i386 (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up bluez-gstreamer (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up bluez-utils (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">$ sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old/</span><br><span class=\"line\">$ sudo rm -rf /var/lib/dpkg/info</span><br><span class=\"line\">$ sudo mv /var/lib/dpkg/info_old/ /var/lib/dpkg/info/</span><br></pre></td></tr></table></figure>\n<p>输入上述命令之后，在执行 sudo apt-get update 和 sudo apt-get upgrade 就不会有问题了。</p>\n","site":{"data":{}},"excerpt":"<p>dpkg: warning: files list file for package `<strong>*</strong>‘ missing, assuming package has no files currently installed解决办法<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">set -e</span><br><span class=\"line\"></span><br><span class=\"line\"># Clean out /var/cache/apt/archives</span><br><span class=\"line\">apt-get clean</span><br><span class=\"line\"># Fill it with all the .debs we need</span><br><span class=\"line\">apt-get --reinstall -dy install $(dpkg --get-selections | grep &apos;[[:space:]]install&apos; | cut -f1)</span><br><span class=\"line\"></span><br><span class=\"line\">DIR=$(mktemp -d -t info-XXXXXX)</span><br><span class=\"line\">for deb in /var/cache/apt/archives/*.deb</span><br><span class=\"line\">do</span><br><span class=\"line\">    # Move to working directory</span><br><span class=\"line\">    cd &quot;$DIR&quot;</span><br><span class=\"line\">    # Create DEBIAN directory</span><br><span class=\"line\">    mkdir -p DEBIAN</span><br><span class=\"line\">    # Extract control files</span><br><span class=\"line\">    dpkg-deb -e &quot;$deb&quot;</span><br><span class=\"line\">    # Extract file list, fixing up the leading ./ and turning / into /.</span><br><span class=\"line\">    dpkg-deb -c &quot;$deb&quot; | awk &apos;&#123;print $NF&#125;&apos; | cut -c2- | sed -e &apos;s/^\\/$/\\/./&apos; &gt; DEBIAN/list</span><br><span class=\"line\">    # Figure out binary package name</span><br><span class=\"line\">    DEB=$(basename &quot;$deb&quot; | cut -d_ -f1)</span><br><span class=\"line\">    # Copy each control file into place</span><br><span class=\"line\">    cd DEBIAN</span><br><span class=\"line\">    for file in *</span><br><span class=\"line\">    do</span><br><span class=\"line\">        cp -a &quot;$file&quot; /var/lib/dpkg/info/&quot;$DEB&quot;.&quot;$file&quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\">    # Clean up</span><br><span class=\"line\">    cd ..</span><br><span class=\"line\">    rm -rf DEBIAN</span><br><span class=\"line\">done</span><br><span class=\"line\">rmdir &quot;$DIR&quot;</span><br></pre></td></tr></table></figure>\n<p>在 Ubuntu 执行 sudo apt-get upgrade 时，出现了如下的报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Setting up bluez (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">reload: Job is not running: dbus</span><br><span class=\"line\">invoke-rc.d: initscript dbus, action &quot;force-reload&quot; failed.</span><br><span class=\"line\">start: Job failed to start</span><br><span class=\"line\">invoke-rc.d: initscript bluetooth, action &quot;start&quot; failed.</span><br><span class=\"line\">dpkg: error processing package bluez (--configure):</span><br><span class=\"line\"> subprocess installed post-installation script returned error exit status 1</span><br><span class=\"line\">dpkg: dependency problems prevent configuration of bluez-alsa:i386:</span><br><span class=\"line\"> bluez-alsa:i386 depends on bluez; however:</span><br><span class=\"line\">  Package bluez is not configured yet.</span><br><span class=\"line\"></span><br><span class=\"line\">dpkg: error processing package bluez-alsa:i386 (--configure):</span><br><span class=\"line\"> dependency problems - leaving unconfigured</span><br><span class=\"line\">No apport report written because the error message indicates its a followup error from a previous failure.</span><br><span class=\"line\">                          Errors were encountered while processing:</span><br><span class=\"line\"> bluez</span><br><span class=\"line\"> bluez-alsa:i386</span><br><span class=\"line\">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure></p>\n<p>通过执行下面的命令可以解决该问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_old/</span><br><span class=\"line\">$ sudo mkdir /var/lib/dpkg/info/</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">...</span><br><span class=\"line\">$ sudo apt-get -f install</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class=\"line\">7 not fully installed or removed.</span><br><span class=\"line\">After this operation, 0 B of additional disk space will be used.</span><br><span class=\"line\">Setting up bluez (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up blueman (1.23-git201403102151-1ubuntu1) ...</span><br><span class=\"line\">Setting up bluetooth (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up bluez-alsa:amd64 (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up bluez-alsa:i386 (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up bluez-gstreamer (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">Setting up bluez-utils (4.101-0ubuntu13.1) ...</span><br><span class=\"line\">$ sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old/</span><br><span class=\"line\">$ sudo rm -rf /var/lib/dpkg/info</span><br><span class=\"line\">$ sudo mv /var/lib/dpkg/info_old/ /var/lib/dpkg/info/</span><br></pre></td></tr></table></figure>\n<p>输入上述命令之后，在执行 sudo apt-get update 和 sudo apt-get upgrade 就不会有问题了。</p>"},{"title":"How to setup Docker Monitoring","date":"2016-12-21T01:53:29.000Z","_content":"Docker monitoring of servers and containers is becoming necessary the more Docker hosts and containers we provision. This tutorial will walk you through how to glue together several different components in order to achieve Docker monitoring.\n\n### Components for Docker Monitoring\n\nFirst things first. We assume that Docker is installed, configured, and running on your host before we begin. Please ensure you can connect to your Docker host with a Web Browser either locally or over a Public IP. The rest of the Tutorial we will refer to this as the DockerIP The below components will be used to create our Docker Monitoring solution.\n\n[cAdvisor](https://registry.hub.docker.com/u/google/cadvisor/) - Google has been using containers for quite sometime and created cAdvisor to help monitor their infrastructure. This single tool alone is an amazing monitoring tool. It not only monitors your Docker containers but the Docker host as well without any configuratio by just running the cAdvisor container on your Docker host. Be sure to check out the [cAdvisor GitHub](https://github.com/google/cadvisor) for more documentation on the API and different configuration options.\n<!-- more -->\n[InfluxDB](https://registry.hub.docker.com/u/tutum/influxdb/) - InfluxDB is a distributed time series database. cAdvisor only displays realtime information and doesn't store the metrics. We need to store the monitoring information which cAdvisor provides in order to display a time range other than realtime.\n\n[Grafana Metrics Dashboard](https://registry.hub.docker.com/u/grafana/grafana/) - The Grafana Dashboard allows us to pull all the pieces together visually. This powerful Dashboard allows us to run queries against the InfluxDB and chart them accordingly in a very nice layout.\n\n## Installation of Docker Monitoring\n\nNow that we have an overview of the different components involved in our Docker Monitoring setup let's get started pulling it all together.\n\nWe will start with the InfluxDB first and work our way towards connecting the cAdvisor.\n\n1) Install the InfluxDb. We use the default settings below and name the container influxsrv which we will use later on for linking. \n```shell\nsudo docker run -d\n-p 8083:8083\n-p 8086:8086\n--expose 8090\n--expose 8099\n--name influxsrv\ntutum/influxdb\n```\nLet's test quickly that our InfluxDB installed correctly. Navigate to your http://DockerIP:8083 Use the credentials below to login to InfluxDB. \nUsername - root \nPassword - root \n![InfluxDB Login Screen](/docker/InfluxDB_login.png)\n2) Create the cadvisor Database \nAfter logging into InfluxDB click on the Databases link at the top of the screen. Type the name cadvisor for the Database name and click Create Database \n![Create Database](/docker/CreateDB.png)\n\n3) Install the cAdvisor container and link it to the InfluxDB container.\n```shell\nsudo docker run\n--volume=/:/rootfs:ro\n--volume=/var/run:/var/run:rw\n--volume=/sys:/sys:ro\n--volume=/var/lib/docker/:/var/lib/docker:ro\n--publish=8080:8080\n--detach=true\n--link influxsrv:influxsrv\n--name=cadvisor\ngoogle/cadvisor:latest\n-storage_driver_db=influxdb\n-storage_driver_host=influxsrv:8086\n```\nOnce the cAdvisor container has been installed and running you can now navigate to the http://DockerIP:8080 For example, http://192.168.10.1:8080 You should now see the cAdvisor gathering statistics on your Docker host and containers. \n![cAdvisor Dashboard](/docker/cAdvisor_Dashboard.png)\n\n4) Install the Grafana Dashboard and link it to the InfluxDB container: \n```shell\nsudo docker run -d\n-p 3000:3000\n-e INFLUXDB_HOST=localhost\n-e INFLUXDB_PORT=8086\n-e INFLUXDB_NAME=cadvisor\n-e INFLUXDB_USER=root\n-e INFLUXDB_PASS=root\n--link influxsrv:influxsrv\n--name grafana\ngrafana/grafana\n```\n\n5) Login to Grafana and configure the Data Sources. \nNavigate to http://DockerIP:3000 \nUsername - admin \nPassword - admin\n\n6) Connect the InfluxDB to the Grafana Dashboard: \nOnce logged in click on the Grafana icon(Fireball) in the upper left hand corner of the GUI. This should pop out a sidebar menu. Click on Data Sources.\n\nNext, click on Add New Data Source at the top of the screen. \nFill in the following information in the Data Source screen:\n\nData Source Settings\n\nName: influxdb \nType: InfluxDB 0.8.x \nBe sure to check default box.\n\nHttp settings \nUrl: http://influxsrv:8086 (This is the name we specified when createing the link on the Grafana container) \nAccess: proxy \nBasic Auth: Enabled \nUser: admin \nPassword: admin\n\nInfluxDB Details \nDatabase: cadvisor (Or the name you specified when creating the database in step 2) \nUser: root \nPassword: root\n\nYou should now have an established connection to the InfluxDB which we will test in the next section. \n![Grafana Data Source Configuration](/docker/Grafana_Config.png)\n\n### Configuring Grafana for Docker Monitoring\n\nNow comes the fun part. Let's setup our first Dashboard with Grafana and visualize the data coming from the cAdvisor.\n\n1) Click on the Grafana icon once again (The Fireball icon upper left corner)\n\n2) Open the Dashboard menu --> Expand the Home Menu drop Down --> Click +New\n\n3) We've now created a new Dashboard inside of Grafana. Let's create our first graph inside this Dashboard. Click the green vertical line as seen below in the screenshot circled in Red. This expands the row options for the Dashboard.\n\n4) Click Add Panel --> Graph\n\n![Create New Grafana Dashboard](/docker/New_Dashboard.png)\n\n5) Click the Title area of the new Graph you created where it says \"no title (click here)\" and click Edit \n![Create Grafana Graph](/docker/Create_Graph.jpg)\n\n6) It's time to write our first query for our graph. We will create a graph displaying the Filesystem storage limit and usage. \nQuery 1 - Fill in the following information inside the Graph screen: series: stats \nClick on \"value\" which will present you a drop down list of available series available inside of the InfluxDB. \nselect: mean(fs_limit) \nAlias: Limit\n\nQuery 2 - At the Bottom of Graph screen is an +Add Query button which allows us to add another metric to our graph. series: stats \nselect: mean(fs_usage) \nAlias: Usage\n\n![Docker Filesystem Graph](/docker/filesystem_graph.png)\n\n7) Click on the General Menu and Change the Title of your Graph\n\n8) Click on the Axis & Grid Menu \nLeft Y Unit: Bytes \nYour Chart should now display with the correct units.\n\n9) Once finished like any other project be sure to save your work. Hit the Save icon a the top of the screen.\n\nThe queries seen in the sample screenshot can be found here - Docker Monitoring Queries\n\n### Docker Monitoring Conclusion\n\nWe have now built a single Grafana Dashboard with a Graph containing our Filesystem statistics. As you can see it's extremely simple to create multiple graphs to monitor our Docker Host and Containers.\n\nBe sure to check out the Grafana Docs to dive deeper with the queries and functionality of Grafana. Take a look below at the screenshot which shows the possibilities for creating some really interesting graphs (Bandwidth, CPU Usage per Container, Memory Usage, and Filesystem Limit/Usage).\n\n![Docker Monitoring with cAdvisor, InfluxDB, and Grafana](/docker/Docker_Monitoring.png)\n\nLeave a comment below if you have any issues or questions.\n\nGood Luck!\n\nTroubleshooting\n\nIn the event you have troubles this is for you. It took me quite sometime to figure out all the settings and where the problems were with the connection from Grafana to InfluxDB. In the event you have issues with your Graphs I highly recommend a Development Console in your Browser of choice.\n\nWith the development console it is really easy to see problems with your queries or connections to the InfluxDB container. For Example: Chrome Development Tools -> More Tools -> Javascript Console\n\nAnother workaround is using the IP address of the containers to resolve connection issues. However, if you restart the container the IP address changes so this is only a temp fix.\n```shell\ndocker inspect <container name>\n```\n\nSearch the output for the IP address which is under the Network Settings section as seen below: \n```shell\n\"NetworkSettings\": {\n\"Bridge\": \"docker0\",\n\"Gateway\": \"172.17.42.1\",\n\"GlobalIPv6Address\": \"\",\n\"GlobalIPv6PrefixLen\": 0,\n\"IPAddress\": \"172.17.0.54\",\n```\nYou can then replace the name that we used in Data Source settings we used above as a workaround. This worked for me until I fixed the links between containers.\n\nUpdate\n\nThanks to everyone for the overwhelming response to this article. Since this article was published Dale Kate-Murray and Ross Jimenez created a [Docker Monitoring Compose file](http://bit.ly/1LFek7L) to help everyone get started.\n\nAnother question that came up in the comments is how to build the different dashboards. So here is the JSON file from the Dashboard - [https://github.com/vegasbrianc/docker-monitoring](https://github.com/vegasbrianc/docker-monitoring)\n","source":"_posts/docker.md","raw":"title: How to setup Docker Monitoring\ndate: 2016-12-21 09:53:29\ncategories: docker\ntags: [docker,linux,shell]\n---\nDocker monitoring of servers and containers is becoming necessary the more Docker hosts and containers we provision. This tutorial will walk you through how to glue together several different components in order to achieve Docker monitoring.\n\n### Components for Docker Monitoring\n\nFirst things first. We assume that Docker is installed, configured, and running on your host before we begin. Please ensure you can connect to your Docker host with a Web Browser either locally or over a Public IP. The rest of the Tutorial we will refer to this as the DockerIP The below components will be used to create our Docker Monitoring solution.\n\n[cAdvisor](https://registry.hub.docker.com/u/google/cadvisor/) - Google has been using containers for quite sometime and created cAdvisor to help monitor their infrastructure. This single tool alone is an amazing monitoring tool. It not only monitors your Docker containers but the Docker host as well without any configuratio by just running the cAdvisor container on your Docker host. Be sure to check out the [cAdvisor GitHub](https://github.com/google/cadvisor) for more documentation on the API and different configuration options.\n<!-- more -->\n[InfluxDB](https://registry.hub.docker.com/u/tutum/influxdb/) - InfluxDB is a distributed time series database. cAdvisor only displays realtime information and doesn't store the metrics. We need to store the monitoring information which cAdvisor provides in order to display a time range other than realtime.\n\n[Grafana Metrics Dashboard](https://registry.hub.docker.com/u/grafana/grafana/) - The Grafana Dashboard allows us to pull all the pieces together visually. This powerful Dashboard allows us to run queries against the InfluxDB and chart them accordingly in a very nice layout.\n\n## Installation of Docker Monitoring\n\nNow that we have an overview of the different components involved in our Docker Monitoring setup let's get started pulling it all together.\n\nWe will start with the InfluxDB first and work our way towards connecting the cAdvisor.\n\n1) Install the InfluxDb. We use the default settings below and name the container influxsrv which we will use later on for linking. \n```shell\nsudo docker run -d\n-p 8083:8083\n-p 8086:8086\n--expose 8090\n--expose 8099\n--name influxsrv\ntutum/influxdb\n```\nLet's test quickly that our InfluxDB installed correctly. Navigate to your http://DockerIP:8083 Use the credentials below to login to InfluxDB. \nUsername - root \nPassword - root \n![InfluxDB Login Screen](/docker/InfluxDB_login.png)\n2) Create the cadvisor Database \nAfter logging into InfluxDB click on the Databases link at the top of the screen. Type the name cadvisor for the Database name and click Create Database \n![Create Database](/docker/CreateDB.png)\n\n3) Install the cAdvisor container and link it to the InfluxDB container.\n```shell\nsudo docker run\n--volume=/:/rootfs:ro\n--volume=/var/run:/var/run:rw\n--volume=/sys:/sys:ro\n--volume=/var/lib/docker/:/var/lib/docker:ro\n--publish=8080:8080\n--detach=true\n--link influxsrv:influxsrv\n--name=cadvisor\ngoogle/cadvisor:latest\n-storage_driver_db=influxdb\n-storage_driver_host=influxsrv:8086\n```\nOnce the cAdvisor container has been installed and running you can now navigate to the http://DockerIP:8080 For example, http://192.168.10.1:8080 You should now see the cAdvisor gathering statistics on your Docker host and containers. \n![cAdvisor Dashboard](/docker/cAdvisor_Dashboard.png)\n\n4) Install the Grafana Dashboard and link it to the InfluxDB container: \n```shell\nsudo docker run -d\n-p 3000:3000\n-e INFLUXDB_HOST=localhost\n-e INFLUXDB_PORT=8086\n-e INFLUXDB_NAME=cadvisor\n-e INFLUXDB_USER=root\n-e INFLUXDB_PASS=root\n--link influxsrv:influxsrv\n--name grafana\ngrafana/grafana\n```\n\n5) Login to Grafana and configure the Data Sources. \nNavigate to http://DockerIP:3000 \nUsername - admin \nPassword - admin\n\n6) Connect the InfluxDB to the Grafana Dashboard: \nOnce logged in click on the Grafana icon(Fireball) in the upper left hand corner of the GUI. This should pop out a sidebar menu. Click on Data Sources.\n\nNext, click on Add New Data Source at the top of the screen. \nFill in the following information in the Data Source screen:\n\nData Source Settings\n\nName: influxdb \nType: InfluxDB 0.8.x \nBe sure to check default box.\n\nHttp settings \nUrl: http://influxsrv:8086 (This is the name we specified when createing the link on the Grafana container) \nAccess: proxy \nBasic Auth: Enabled \nUser: admin \nPassword: admin\n\nInfluxDB Details \nDatabase: cadvisor (Or the name you specified when creating the database in step 2) \nUser: root \nPassword: root\n\nYou should now have an established connection to the InfluxDB which we will test in the next section. \n![Grafana Data Source Configuration](/docker/Grafana_Config.png)\n\n### Configuring Grafana for Docker Monitoring\n\nNow comes the fun part. Let's setup our first Dashboard with Grafana and visualize the data coming from the cAdvisor.\n\n1) Click on the Grafana icon once again (The Fireball icon upper left corner)\n\n2) Open the Dashboard menu --> Expand the Home Menu drop Down --> Click +New\n\n3) We've now created a new Dashboard inside of Grafana. Let's create our first graph inside this Dashboard. Click the green vertical line as seen below in the screenshot circled in Red. This expands the row options for the Dashboard.\n\n4) Click Add Panel --> Graph\n\n![Create New Grafana Dashboard](/docker/New_Dashboard.png)\n\n5) Click the Title area of the new Graph you created where it says \"no title (click here)\" and click Edit \n![Create Grafana Graph](/docker/Create_Graph.jpg)\n\n6) It's time to write our first query for our graph. We will create a graph displaying the Filesystem storage limit and usage. \nQuery 1 - Fill in the following information inside the Graph screen: series: stats \nClick on \"value\" which will present you a drop down list of available series available inside of the InfluxDB. \nselect: mean(fs_limit) \nAlias: Limit\n\nQuery 2 - At the Bottom of Graph screen is an +Add Query button which allows us to add another metric to our graph. series: stats \nselect: mean(fs_usage) \nAlias: Usage\n\n![Docker Filesystem Graph](/docker/filesystem_graph.png)\n\n7) Click on the General Menu and Change the Title of your Graph\n\n8) Click on the Axis & Grid Menu \nLeft Y Unit: Bytes \nYour Chart should now display with the correct units.\n\n9) Once finished like any other project be sure to save your work. Hit the Save icon a the top of the screen.\n\nThe queries seen in the sample screenshot can be found here - Docker Monitoring Queries\n\n### Docker Monitoring Conclusion\n\nWe have now built a single Grafana Dashboard with a Graph containing our Filesystem statistics. As you can see it's extremely simple to create multiple graphs to monitor our Docker Host and Containers.\n\nBe sure to check out the Grafana Docs to dive deeper with the queries and functionality of Grafana. Take a look below at the screenshot which shows the possibilities for creating some really interesting graphs (Bandwidth, CPU Usage per Container, Memory Usage, and Filesystem Limit/Usage).\n\n![Docker Monitoring with cAdvisor, InfluxDB, and Grafana](/docker/Docker_Monitoring.png)\n\nLeave a comment below if you have any issues or questions.\n\nGood Luck!\n\nTroubleshooting\n\nIn the event you have troubles this is for you. It took me quite sometime to figure out all the settings and where the problems were with the connection from Grafana to InfluxDB. In the event you have issues with your Graphs I highly recommend a Development Console in your Browser of choice.\n\nWith the development console it is really easy to see problems with your queries or connections to the InfluxDB container. For Example: Chrome Development Tools -> More Tools -> Javascript Console\n\nAnother workaround is using the IP address of the containers to resolve connection issues. However, if you restart the container the IP address changes so this is only a temp fix.\n```shell\ndocker inspect <container name>\n```\n\nSearch the output for the IP address which is under the Network Settings section as seen below: \n```shell\n\"NetworkSettings\": {\n\"Bridge\": \"docker0\",\n\"Gateway\": \"172.17.42.1\",\n\"GlobalIPv6Address\": \"\",\n\"GlobalIPv6PrefixLen\": 0,\n\"IPAddress\": \"172.17.0.54\",\n```\nYou can then replace the name that we used in Data Source settings we used above as a workaround. This worked for me until I fixed the links between containers.\n\nUpdate\n\nThanks to everyone for the overwhelming response to this article. Since this article was published Dale Kate-Murray and Ross Jimenez created a [Docker Monitoring Compose file](http://bit.ly/1LFek7L) to help everyone get started.\n\nAnother question that came up in the comments is how to build the different dashboards. So here is the JSON file from the Dashboard - [https://github.com/vegasbrianc/docker-monitoring](https://github.com/vegasbrianc/docker-monitoring)\n","slug":"docker","published":1,"updated":"2016-12-21T06:03:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc2600022u6bq9r6hos6","content":"<p>Docker monitoring of servers and containers is becoming necessary the more Docker hosts and containers we provision. This tutorial will walk you through how to glue together several different components in order to achieve Docker monitoring.</p>\n<h3 id=\"Components-for-Docker-Monitoring\"><a href=\"#Components-for-Docker-Monitoring\" class=\"headerlink\" title=\"Components for Docker Monitoring\"></a>Components for Docker Monitoring</h3><p>First things first. We assume that Docker is installed, configured, and running on your host before we begin. Please ensure you can connect to your Docker host with a Web Browser either locally or over a Public IP. The rest of the Tutorial we will refer to this as the DockerIP The below components will be used to create our Docker Monitoring solution.</p>\n<p><a href=\"https://registry.hub.docker.com/u/google/cadvisor/\" target=\"_blank\" rel=\"external\">cAdvisor</a> - Google has been using containers for quite sometime and created cAdvisor to help monitor their infrastructure. This single tool alone is an amazing monitoring tool. It not only monitors your Docker containers but the Docker host as well without any configuratio by just running the cAdvisor container on your Docker host. Be sure to check out the <a href=\"https://github.com/google/cadvisor\" target=\"_blank\" rel=\"external\">cAdvisor GitHub</a> for more documentation on the API and different configuration options.<br><a id=\"more\"></a><br><a href=\"https://registry.hub.docker.com/u/tutum/influxdb/\" target=\"_blank\" rel=\"external\">InfluxDB</a> - InfluxDB is a distributed time series database. cAdvisor only displays realtime information and doesn’t store the metrics. We need to store the monitoring information which cAdvisor provides in order to display a time range other than realtime.</p>\n<p><a href=\"https://registry.hub.docker.com/u/grafana/grafana/\" target=\"_blank\" rel=\"external\">Grafana Metrics Dashboard</a> - The Grafana Dashboard allows us to pull all the pieces together visually. This powerful Dashboard allows us to run queries against the InfluxDB and chart them accordingly in a very nice layout.</p>\n<h2 id=\"Installation-of-Docker-Monitoring\"><a href=\"#Installation-of-Docker-Monitoring\" class=\"headerlink\" title=\"Installation of Docker Monitoring\"></a>Installation of Docker Monitoring</h2><p>Now that we have an overview of the different components involved in our Docker Monitoring setup let’s get started pulling it all together.</p>\n<p>We will start with the InfluxDB first and work our way towards connecting the cAdvisor.</p>\n<p>1) Install the InfluxDb. We use the default settings below and name the container influxsrv which we will use later on for linking.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo docker run -d</div><div class=\"line\">-p 8083:8083</div><div class=\"line\">-p 8086:8086</div><div class=\"line\">--expose 8090</div><div class=\"line\">--expose 8099</div><div class=\"line\">--name influxsrv</div><div class=\"line\">tutum/influxdb</div></pre></td></tr></table></figure></p>\n<p>Let’s test quickly that our InfluxDB installed correctly. Navigate to your <a href=\"http://DockerIP:8083\" target=\"_blank\" rel=\"external\">http://DockerIP:8083</a> Use the credentials below to login to InfluxDB.<br>Username - root<br>Password - root<br><img src=\"/docker/InfluxDB_login.png\" alt=\"InfluxDB Login Screen\"><br>2) Create the cadvisor Database<br>After logging into InfluxDB click on the Databases link at the top of the screen. Type the name cadvisor for the Database name and click Create Database<br><img src=\"/docker/CreateDB.png\" alt=\"Create Database\"></p>\n<p>3) Install the cAdvisor container and link it to the InfluxDB container.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo docker run</div><div class=\"line\">--volume=/:/rootfs:ro</div><div class=\"line\">--volume=/var/run:/var/run:rw</div><div class=\"line\">--volume=/sys:/sys:ro</div><div class=\"line\">--volume=/var/lib/docker/:/var/lib/docker:ro</div><div class=\"line\">--publish=8080:8080</div><div class=\"line\">--detach=true</div><div class=\"line\">--link influxsrv:influxsrv</div><div class=\"line\">--name=cadvisor</div><div class=\"line\">google/cadvisor:latest</div><div class=\"line\">-storage_driver_db=influxdb</div><div class=\"line\">-storage_driver_host=influxsrv:8086</div></pre></td></tr></table></figure></p>\n<p>Once the cAdvisor container has been installed and running you can now navigate to the <a href=\"http://DockerIP:8080\" target=\"_blank\" rel=\"external\">http://DockerIP:8080</a> For example, <a href=\"http://192.168.10.1:8080\" target=\"_blank\" rel=\"external\">http://192.168.10.1:8080</a> You should now see the cAdvisor gathering statistics on your Docker host and containers.<br><img src=\"/docker/cAdvisor_Dashboard.png\" alt=\"cAdvisor Dashboard\"></p>\n<p>4) Install the Grafana Dashboard and link it to the InfluxDB container:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo docker run -d</div><div class=\"line\">-p 3000:3000</div><div class=\"line\">-e INFLUXDB_HOST=localhost</div><div class=\"line\">-e INFLUXDB_PORT=8086</div><div class=\"line\">-e INFLUXDB_NAME=cadvisor</div><div class=\"line\">-e INFLUXDB_USER=root</div><div class=\"line\">-e INFLUXDB_PASS=root</div><div class=\"line\">--link influxsrv:influxsrv</div><div class=\"line\">--name grafana</div><div class=\"line\">grafana/grafana</div></pre></td></tr></table></figure></p>\n<p>5) Login to Grafana and configure the Data Sources.<br>Navigate to <a href=\"http://DockerIP:3000\" target=\"_blank\" rel=\"external\">http://DockerIP:3000</a><br>Username - admin<br>Password - admin</p>\n<p>6) Connect the InfluxDB to the Grafana Dashboard:<br>Once logged in click on the Grafana icon(Fireball) in the upper left hand corner of the GUI. This should pop out a sidebar menu. Click on Data Sources.</p>\n<p>Next, click on Add New Data Source at the top of the screen.<br>Fill in the following information in the Data Source screen:</p>\n<p>Data Source Settings</p>\n<p>Name: influxdb<br>Type: InfluxDB 0.8.x<br>Be sure to check default box.</p>\n<p>Http settings<br>Url: <a href=\"http://influxsrv:8086\" target=\"_blank\" rel=\"external\">http://influxsrv:8086</a> (This is the name we specified when createing the link on the Grafana container)<br>Access: proxy<br>Basic Auth: Enabled<br>User: admin<br>Password: admin</p>\n<p>InfluxDB Details<br>Database: cadvisor (Or the name you specified when creating the database in step 2)<br>User: root<br>Password: root</p>\n<p>You should now have an established connection to the InfluxDB which we will test in the next section.<br><img src=\"/docker/Grafana_Config.png\" alt=\"Grafana Data Source Configuration\"></p>\n<h3 id=\"Configuring-Grafana-for-Docker-Monitoring\"><a href=\"#Configuring-Grafana-for-Docker-Monitoring\" class=\"headerlink\" title=\"Configuring Grafana for Docker Monitoring\"></a>Configuring Grafana for Docker Monitoring</h3><p>Now comes the fun part. Let’s setup our first Dashboard with Grafana and visualize the data coming from the cAdvisor.</p>\n<p>1) Click on the Grafana icon once again (The Fireball icon upper left corner)</p>\n<p>2) Open the Dashboard menu –&gt; Expand the Home Menu drop Down –&gt; Click +New</p>\n<p>3) We’ve now created a new Dashboard inside of Grafana. Let’s create our first graph inside this Dashboard. Click the green vertical line as seen below in the screenshot circled in Red. This expands the row options for the Dashboard.</p>\n<p>4) Click Add Panel –&gt; Graph</p>\n<p><img src=\"/docker/New_Dashboard.png\" alt=\"Create New Grafana Dashboard\"></p>\n<p>5) Click the Title area of the new Graph you created where it says “no title (click here)” and click Edit<br><img src=\"/docker/Create_Graph.jpg\" alt=\"Create Grafana Graph\"></p>\n<p>6) It’s time to write our first query for our graph. We will create a graph displaying the Filesystem storage limit and usage.<br>Query 1 - Fill in the following information inside the Graph screen: series: stats<br>Click on “value” which will present you a drop down list of available series available inside of the InfluxDB.<br>select: mean(fs_limit)<br>Alias: Limit</p>\n<p>Query 2 - At the Bottom of Graph screen is an +Add Query button which allows us to add another metric to our graph. series: stats<br>select: mean(fs_usage)<br>Alias: Usage</p>\n<p><img src=\"/docker/filesystem_graph.png\" alt=\"Docker Filesystem Graph\"></p>\n<p>7) Click on the General Menu and Change the Title of your Graph</p>\n<p>8) Click on the Axis &amp; Grid Menu<br>Left Y Unit: Bytes<br>Your Chart should now display with the correct units.</p>\n<p>9) Once finished like any other project be sure to save your work. Hit the Save icon a the top of the screen.</p>\n<p>The queries seen in the sample screenshot can be found here - Docker Monitoring Queries</p>\n<h3 id=\"Docker-Monitoring-Conclusion\"><a href=\"#Docker-Monitoring-Conclusion\" class=\"headerlink\" title=\"Docker Monitoring Conclusion\"></a>Docker Monitoring Conclusion</h3><p>We have now built a single Grafana Dashboard with a Graph containing our Filesystem statistics. As you can see it’s extremely simple to create multiple graphs to monitor our Docker Host and Containers.</p>\n<p>Be sure to check out the Grafana Docs to dive deeper with the queries and functionality of Grafana. Take a look below at the screenshot which shows the possibilities for creating some really interesting graphs (Bandwidth, CPU Usage per Container, Memory Usage, and Filesystem Limit/Usage).</p>\n<p><img src=\"/docker/Docker_Monitoring.png\" alt=\"Docker Monitoring with cAdvisor, InfluxDB, and Grafana\"></p>\n<p>Leave a comment below if you have any issues or questions.</p>\n<p>Good Luck!</p>\n<p>Troubleshooting</p>\n<p>In the event you have troubles this is for you. It took me quite sometime to figure out all the settings and where the problems were with the connection from Grafana to InfluxDB. In the event you have issues with your Graphs I highly recommend a Development Console in your Browser of choice.</p>\n<p>With the development console it is really easy to see problems with your queries or connections to the InfluxDB container. For Example: Chrome Development Tools -&gt; More Tools -&gt; Javascript Console</p>\n<p>Another workaround is using the IP address of the containers to resolve connection issues. However, if you restart the container the IP address changes so this is only a temp fix.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect &lt;container name&gt;</div></pre></td></tr></table></figure></p>\n<p>Search the output for the IP address which is under the Network Settings section as seen below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;NetworkSettings&quot;: &#123;</div><div class=\"line\">&quot;Bridge&quot;: &quot;docker0&quot;,</div><div class=\"line\">&quot;Gateway&quot;: &quot;172.17.42.1&quot;,</div><div class=\"line\">&quot;GlobalIPv6Address&quot;: &quot;&quot;,</div><div class=\"line\">&quot;GlobalIPv6PrefixLen&quot;: 0,</div><div class=\"line\">&quot;IPAddress&quot;: &quot;172.17.0.54&quot;,</div></pre></td></tr></table></figure></p>\n<p>You can then replace the name that we used in Data Source settings we used above as a workaround. This worked for me until I fixed the links between containers.</p>\n<p>Update</p>\n<p>Thanks to everyone for the overwhelming response to this article. Since this article was published Dale Kate-Murray and Ross Jimenez created a <a href=\"http://bit.ly/1LFek7L\" target=\"_blank\" rel=\"external\">Docker Monitoring Compose file</a> to help everyone get started.</p>\n<p>Another question that came up in the comments is how to build the different dashboards. So here is the JSON file from the Dashboard - <a href=\"https://github.com/vegasbrianc/docker-monitoring\" target=\"_blank\" rel=\"external\">https://github.com/vegasbrianc/docker-monitoring</a></p>\n","excerpt":"<p>Docker monitoring of servers and containers is becoming necessary the more Docker hosts and containers we provision. This tutorial will walk you through how to glue together several different components in order to achieve Docker monitoring.</p>\n<h3 id=\"Components-for-Docker-Monitoring\"><a href=\"#Components-for-Docker-Monitoring\" class=\"headerlink\" title=\"Components for Docker Monitoring\"></a>Components for Docker Monitoring</h3><p>First things first. We assume that Docker is installed, configured, and running on your host before we begin. Please ensure you can connect to your Docker host with a Web Browser either locally or over a Public IP. The rest of the Tutorial we will refer to this as the DockerIP The below components will be used to create our Docker Monitoring solution.</p>\n<p><a href=\"https://registry.hub.docker.com/u/google/cadvisor/\">cAdvisor</a> - Google has been using containers for quite sometime and created cAdvisor to help monitor their infrastructure. This single tool alone is an amazing monitoring tool. It not only monitors your Docker containers but the Docker host as well without any configuratio by just running the cAdvisor container on your Docker host. Be sure to check out the <a href=\"https://github.com/google/cadvisor\">cAdvisor GitHub</a> for more documentation on the API and different configuration options.<br>","more":"<br><a href=\"https://registry.hub.docker.com/u/tutum/influxdb/\">InfluxDB</a> - InfluxDB is a distributed time series database. cAdvisor only displays realtime information and doesn’t store the metrics. We need to store the monitoring information which cAdvisor provides in order to display a time range other than realtime.</p>\n<p><a href=\"https://registry.hub.docker.com/u/grafana/grafana/\">Grafana Metrics Dashboard</a> - The Grafana Dashboard allows us to pull all the pieces together visually. This powerful Dashboard allows us to run queries against the InfluxDB and chart them accordingly in a very nice layout.</p>\n<h2 id=\"Installation-of-Docker-Monitoring\"><a href=\"#Installation-of-Docker-Monitoring\" class=\"headerlink\" title=\"Installation of Docker Monitoring\"></a>Installation of Docker Monitoring</h2><p>Now that we have an overview of the different components involved in our Docker Monitoring setup let’s get started pulling it all together.</p>\n<p>We will start with the InfluxDB first and work our way towards connecting the cAdvisor.</p>\n<p>1) Install the InfluxDb. We use the default settings below and name the container influxsrv which we will use later on for linking.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo docker run -d</div><div class=\"line\">-p 8083:8083</div><div class=\"line\">-p 8086:8086</div><div class=\"line\">--expose 8090</div><div class=\"line\">--expose 8099</div><div class=\"line\">--name influxsrv</div><div class=\"line\">tutum/influxdb</div></pre></td></tr></table></figure></p>\n<p>Let’s test quickly that our InfluxDB installed correctly. Navigate to your <a href=\"http://DockerIP:8083\">http://DockerIP:8083</a> Use the credentials below to login to InfluxDB.<br>Username - root<br>Password - root<br><img src=\"/docker/InfluxDB_login.png\" alt=\"InfluxDB Login Screen\"><br>2) Create the cadvisor Database<br>After logging into InfluxDB click on the Databases link at the top of the screen. Type the name cadvisor for the Database name and click Create Database<br><img src=\"/docker/CreateDB.png\" alt=\"Create Database\"></p>\n<p>3) Install the cAdvisor container and link it to the InfluxDB container.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo docker run</div><div class=\"line\">--volume=/:/rootfs:ro</div><div class=\"line\">--volume=/var/run:/var/run:rw</div><div class=\"line\">--volume=/sys:/sys:ro</div><div class=\"line\">--volume=/var/lib/docker/:/var/lib/docker:ro</div><div class=\"line\">--publish=8080:8080</div><div class=\"line\">--detach=true</div><div class=\"line\">--link influxsrv:influxsrv</div><div class=\"line\">--name=cadvisor</div><div class=\"line\">google/cadvisor:latest</div><div class=\"line\">-storage_driver_db=influxdb</div><div class=\"line\">-storage_driver_host=influxsrv:8086</div></pre></td></tr></table></figure></p>\n<p>Once the cAdvisor container has been installed and running you can now navigate to the <a href=\"http://DockerIP:8080\">http://DockerIP:8080</a> For example, <a href=\"http://192.168.10.1:8080\">http://192.168.10.1:8080</a> You should now see the cAdvisor gathering statistics on your Docker host and containers.<br><img src=\"/docker/cAdvisor_Dashboard.png\" alt=\"cAdvisor Dashboard\"></p>\n<p>4) Install the Grafana Dashboard and link it to the InfluxDB container:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo docker run -d</div><div class=\"line\">-p 3000:3000</div><div class=\"line\">-e INFLUXDB_HOST=localhost</div><div class=\"line\">-e INFLUXDB_PORT=8086</div><div class=\"line\">-e INFLUXDB_NAME=cadvisor</div><div class=\"line\">-e INFLUXDB_USER=root</div><div class=\"line\">-e INFLUXDB_PASS=root</div><div class=\"line\">--link influxsrv:influxsrv</div><div class=\"line\">--name grafana</div><div class=\"line\">grafana/grafana</div></pre></td></tr></table></figure></p>\n<p>5) Login to Grafana and configure the Data Sources.<br>Navigate to <a href=\"http://DockerIP:3000\">http://DockerIP:3000</a><br>Username - admin<br>Password - admin</p>\n<p>6) Connect the InfluxDB to the Grafana Dashboard:<br>Once logged in click on the Grafana icon(Fireball) in the upper left hand corner of the GUI. This should pop out a sidebar menu. Click on Data Sources.</p>\n<p>Next, click on Add New Data Source at the top of the screen.<br>Fill in the following information in the Data Source screen:</p>\n<p>Data Source Settings</p>\n<p>Name: influxdb<br>Type: InfluxDB 0.8.x<br>Be sure to check default box.</p>\n<p>Http settings<br>Url: <a href=\"http://influxsrv:8086\">http://influxsrv:8086</a> (This is the name we specified when createing the link on the Grafana container)<br>Access: proxy<br>Basic Auth: Enabled<br>User: admin<br>Password: admin</p>\n<p>InfluxDB Details<br>Database: cadvisor (Or the name you specified when creating the database in step 2)<br>User: root<br>Password: root</p>\n<p>You should now have an established connection to the InfluxDB which we will test in the next section.<br><img src=\"/docker/Grafana_Config.png\" alt=\"Grafana Data Source Configuration\"></p>\n<h3 id=\"Configuring-Grafana-for-Docker-Monitoring\"><a href=\"#Configuring-Grafana-for-Docker-Monitoring\" class=\"headerlink\" title=\"Configuring Grafana for Docker Monitoring\"></a>Configuring Grafana for Docker Monitoring</h3><p>Now comes the fun part. Let’s setup our first Dashboard with Grafana and visualize the data coming from the cAdvisor.</p>\n<p>1) Click on the Grafana icon once again (The Fireball icon upper left corner)</p>\n<p>2) Open the Dashboard menu –&gt; Expand the Home Menu drop Down –&gt; Click +New</p>\n<p>3) We’ve now created a new Dashboard inside of Grafana. Let’s create our first graph inside this Dashboard. Click the green vertical line as seen below in the screenshot circled in Red. This expands the row options for the Dashboard.</p>\n<p>4) Click Add Panel –&gt; Graph</p>\n<p><img src=\"/docker/New_Dashboard.png\" alt=\"Create New Grafana Dashboard\"></p>\n<p>5) Click the Title area of the new Graph you created where it says “no title (click here)” and click Edit<br><img src=\"/docker/Create_Graph.jpg\" alt=\"Create Grafana Graph\"></p>\n<p>6) It’s time to write our first query for our graph. We will create a graph displaying the Filesystem storage limit and usage.<br>Query 1 - Fill in the following information inside the Graph screen: series: stats<br>Click on “value” which will present you a drop down list of available series available inside of the InfluxDB.<br>select: mean(fs_limit)<br>Alias: Limit</p>\n<p>Query 2 - At the Bottom of Graph screen is an +Add Query button which allows us to add another metric to our graph. series: stats<br>select: mean(fs_usage)<br>Alias: Usage</p>\n<p><img src=\"/docker/filesystem_graph.png\" alt=\"Docker Filesystem Graph\"></p>\n<p>7) Click on the General Menu and Change the Title of your Graph</p>\n<p>8) Click on the Axis &amp; Grid Menu<br>Left Y Unit: Bytes<br>Your Chart should now display with the correct units.</p>\n<p>9) Once finished like any other project be sure to save your work. Hit the Save icon a the top of the screen.</p>\n<p>The queries seen in the sample screenshot can be found here - Docker Monitoring Queries</p>\n<h3 id=\"Docker-Monitoring-Conclusion\"><a href=\"#Docker-Monitoring-Conclusion\" class=\"headerlink\" title=\"Docker Monitoring Conclusion\"></a>Docker Monitoring Conclusion</h3><p>We have now built a single Grafana Dashboard with a Graph containing our Filesystem statistics. As you can see it’s extremely simple to create multiple graphs to monitor our Docker Host and Containers.</p>\n<p>Be sure to check out the Grafana Docs to dive deeper with the queries and functionality of Grafana. Take a look below at the screenshot which shows the possibilities for creating some really interesting graphs (Bandwidth, CPU Usage per Container, Memory Usage, and Filesystem Limit/Usage).</p>\n<p><img src=\"/docker/Docker_Monitoring.png\" alt=\"Docker Monitoring with cAdvisor, InfluxDB, and Grafana\"></p>\n<p>Leave a comment below if you have any issues or questions.</p>\n<p>Good Luck!</p>\n<p>Troubleshooting</p>\n<p>In the event you have troubles this is for you. It took me quite sometime to figure out all the settings and where the problems were with the connection from Grafana to InfluxDB. In the event you have issues with your Graphs I highly recommend a Development Console in your Browser of choice.</p>\n<p>With the development console it is really easy to see problems with your queries or connections to the InfluxDB container. For Example: Chrome Development Tools -&gt; More Tools -&gt; Javascript Console</p>\n<p>Another workaround is using the IP address of the containers to resolve connection issues. However, if you restart the container the IP address changes so this is only a temp fix.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect &lt;container name&gt;</div></pre></td></tr></table></figure></p>\n<p>Search the output for the IP address which is under the Network Settings section as seen below:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;NetworkSettings&quot;: &#123;</div><div class=\"line\">&quot;Bridge&quot;: &quot;docker0&quot;,</div><div class=\"line\">&quot;Gateway&quot;: &quot;172.17.42.1&quot;,</div><div class=\"line\">&quot;GlobalIPv6Address&quot;: &quot;&quot;,</div><div class=\"line\">&quot;GlobalIPv6PrefixLen&quot;: 0,</div><div class=\"line\">&quot;IPAddress&quot;: &quot;172.17.0.54&quot;,</div></pre></td></tr></table></figure></p>\n<p>You can then replace the name that we used in Data Source settings we used above as a workaround. This worked for me until I fixed the links between containers.</p>\n<p>Update</p>\n<p>Thanks to everyone for the overwhelming response to this article. Since this article was published Dale Kate-Murray and Ross Jimenez created a <a href=\"http://bit.ly/1LFek7L\">Docker Monitoring Compose file</a> to help everyone get started.</p>\n<p>Another question that came up in the comments is how to build the different dashboards. So here is the JSON file from the Dashboard - <a href=\"https://github.com/vegasbrianc/docker-monitoring\">https://github.com/vegasbrianc/docker-monitoring</a></p>"},{"title":"dubbo java 调用服务出错","date":"2016-12-14T01:53:29.000Z","_content":"问题：\n```js\norg.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/beans/spring-beans.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.\n[2016-12-13T13:47:54,071][ERROR][c.h.p.l.RunLogspoutJobs  ] Line 8 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; cvc-elt.1: Cannot find the declaration of element 'beans'.\norg.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 8 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; cvc-elt.1: Cannot find the declaration of element 'beans'.\n```\n<!-- more -->\n解决方式：\n\tpom.xml 加入配置，因为是jar读取不到配置，所以添加一个lib。\n```js\n<plugins>\n            <!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <configuration>\n                    <classesDirectory>target/classes/</classesDirectory>\n                    <archive>\n                        <manifest>\n                            <mainClass>com.haier.paas.lbip.RunLogspoutJobs</mainClass>\n                            <!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 -->\n                            <useUniqueVersions>false</useUniqueVersions>\n                            <addClasspath>true</addClasspath>\n                            <classpathPrefix>lib/</classpathPrefix>\n                        </manifest>\n                        <manifestEntries>\n                            <Class-Path>.</Class-Path>\n                        </manifestEntries>\n                    </archive>\n                </configuration>\n            </plugin>\n\n            <!-- 把依赖的jar包,打成一个lib文件夹 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>copy-dependencies</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>copy-dependencies</goal>\n                        </goals>\n                        <configuration>\n                            <type>jar</type>\n                            <includeTypes>jar</includeTypes>\n                            <outputDirectory>\n                                ${project.build.directory}/lib\n                            </outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n\n```\n","source":"_posts/dubbo-jar-start-error.md","raw":"title: dubbo java 调用服务出错 \ndate: 2016-12-14 09:53:29\ncategories: 技术\ntags: [dubbo,java]\n---\n问题：\n```js\norg.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/beans/spring-beans.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.\n[2016-12-13T13:47:54,071][ERROR][c.h.p.l.RunLogspoutJobs  ] Line 8 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; cvc-elt.1: Cannot find the declaration of element 'beans'.\norg.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 8 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; cvc-elt.1: Cannot find the declaration of element 'beans'.\n```\n<!-- more -->\n解决方式：\n\tpom.xml 加入配置，因为是jar读取不到配置，所以添加一个lib。\n```js\n<plugins>\n            <!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <configuration>\n                    <classesDirectory>target/classes/</classesDirectory>\n                    <archive>\n                        <manifest>\n                            <mainClass>com.haier.paas.lbip.RunLogspoutJobs</mainClass>\n                            <!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 -->\n                            <useUniqueVersions>false</useUniqueVersions>\n                            <addClasspath>true</addClasspath>\n                            <classpathPrefix>lib/</classpathPrefix>\n                        </manifest>\n                        <manifestEntries>\n                            <Class-Path>.</Class-Path>\n                        </manifestEntries>\n                    </archive>\n                </configuration>\n            </plugin>\n\n            <!-- 把依赖的jar包,打成一个lib文件夹 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>copy-dependencies</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>copy-dependencies</goal>\n                        </goals>\n                        <configuration>\n                            <type>jar</type>\n                            <includeTypes>jar</includeTypes>\n                            <outputDirectory>\n                                ${project.build.directory}/lib\n                            </outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n\n```\n","slug":"dubbo-jar-start-error","published":1,"updated":"2016-12-14T04:03:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc2f00052u6bfs5mk60j","content":"<p>问题：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/beans/spring-beans.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &lt;xsd:schema&gt;.</div><div class=\"line\">[2016-12-13T13:47:54,071][ERROR][c.h.p.l.RunLogspoutJobs  ] Line 8 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; cvc-elt.1: Cannot find the declaration of element 'beans'.</div><div class=\"line\">org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 8 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; cvc-elt.1: Cannot find the declaration of element 'beans'.</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>解决方式：<br>    pom.xml 加入配置，因为是jar读取不到配置，所以添加一个lib。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;plugins&gt;</div><div class=\"line\">            &lt;!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 --&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;classesDirectory&gt;target/classes/&lt;/classesDirectory&gt;</div><div class=\"line\">                    &lt;archive&gt;</div><div class=\"line\">                        &lt;manifest&gt;</div><div class=\"line\">                            &lt;mainClass&gt;com.haier.paas.lbip.RunLogspoutJobs&lt;/mainClass&gt;</div><div class=\"line\">                            &lt;!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 --&gt;</div><div class=\"line\">                            &lt;useUniqueVersions&gt;false&lt;/useUniqueVersions&gt;</div><div class=\"line\">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</div><div class=\"line\">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</div><div class=\"line\">                        &lt;/manifest&gt;</div><div class=\"line\">                        &lt;manifestEntries&gt;</div><div class=\"line\">                            &lt;Class-Path&gt;.&lt;/Class-Path&gt;</div><div class=\"line\">                        &lt;/manifestEntries&gt;</div><div class=\"line\">                    &lt;/archive&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;!-- 把依赖的jar包,打成一个lib文件夹 --&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;executions&gt;</div><div class=\"line\">                    &lt;execution&gt;</div><div class=\"line\">                        &lt;id&gt;copy-dependencies&lt;/id&gt;</div><div class=\"line\">                        &lt;phase&gt;package&lt;/phase&gt;</div><div class=\"line\">                        &lt;goals&gt;</div><div class=\"line\">                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;</div><div class=\"line\">                        &lt;/goals&gt;</div><div class=\"line\">                        &lt;configuration&gt;</div><div class=\"line\">                            &lt;type&gt;jar&lt;/type&gt;</div><div class=\"line\">                            &lt;includeTypes&gt;jar&lt;/includeTypes&gt;</div><div class=\"line\">                            &lt;outputDirectory&gt;</div><div class=\"line\">                                $&#123;project.build.directory&#125;/lib</div><div class=\"line\">                            &lt;/outputDirectory&gt;</div><div class=\"line\">                        &lt;/configuration&gt;</div><div class=\"line\">                    &lt;/execution&gt;</div><div class=\"line\">                &lt;/executions&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>问题：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/beans/spring-beans.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &lt;xsd:schema&gt;.</div><div class=\"line\">[2016-12-13T13:47:54,071][ERROR][c.h.p.l.RunLogspoutJobs  ] Line 8 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; cvc-elt.1: Cannot find the declaration of element 'beans'.</div><div class=\"line\">org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 8 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 12; cvc-elt.1: Cannot find the declaration of element 'beans'.</div></pre></td></tr></table></figure></p>","more":"<p>解决方式：<br>    pom.xml 加入配置，因为是jar读取不到配置，所以添加一个lib。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;plugins&gt;</div><div class=\"line\">            &lt;!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 --&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;classesDirectory&gt;target/classes/&lt;/classesDirectory&gt;</div><div class=\"line\">                    &lt;archive&gt;</div><div class=\"line\">                        &lt;manifest&gt;</div><div class=\"line\">                            &lt;mainClass&gt;com.haier.paas.lbip.RunLogspoutJobs&lt;/mainClass&gt;</div><div class=\"line\">                            &lt;!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 --&gt;</div><div class=\"line\">                            &lt;useUniqueVersions&gt;false&lt;/useUniqueVersions&gt;</div><div class=\"line\">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</div><div class=\"line\">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</div><div class=\"line\">                        &lt;/manifest&gt;</div><div class=\"line\">                        &lt;manifestEntries&gt;</div><div class=\"line\">                            &lt;Class-Path&gt;.&lt;/Class-Path&gt;</div><div class=\"line\">                        &lt;/manifestEntries&gt;</div><div class=\"line\">                    &lt;/archive&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;!-- 把依赖的jar包,打成一个lib文件夹 --&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;executions&gt;</div><div class=\"line\">                    &lt;execution&gt;</div><div class=\"line\">                        &lt;id&gt;copy-dependencies&lt;/id&gt;</div><div class=\"line\">                        &lt;phase&gt;package&lt;/phase&gt;</div><div class=\"line\">                        &lt;goals&gt;</div><div class=\"line\">                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;</div><div class=\"line\">                        &lt;/goals&gt;</div><div class=\"line\">                        &lt;configuration&gt;</div><div class=\"line\">                            &lt;type&gt;jar&lt;/type&gt;</div><div class=\"line\">                            &lt;includeTypes&gt;jar&lt;/includeTypes&gt;</div><div class=\"line\">                            &lt;outputDirectory&gt;</div><div class=\"line\">                                $&#123;project.build.directory&#125;/lib</div><div class=\"line\">                            &lt;/outputDirectory&gt;</div><div class=\"line\">                        &lt;/configuration&gt;</div><div class=\"line\">                    &lt;/execution&gt;</div><div class=\"line\">                &lt;/executions&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div></pre></td></tr></table></figure></p>"},{"title":"Dubbo基础篇_04_使用Maven构建Dubbo服务可执行jar包","date":"2016-09-14T01:53:29.000Z","_content":"* 服务器:192.168.1.121(edu-provider-01)\n\n## 一、Dubbo服务的运行方式：\n\n### 1、使用Servlet容器运行（Tomcat、Jetty等）----不可取 缺点：增加复杂性（端口、管理）\ntomcat/jetty等占用端口,dubbo服务也需要端口\n浪费资源（内存）:单独启动tomcat,jetty占用内存大\n\n### 2、自建Main方法类来运行（Spring容器） ----不建议（本地调试可用） \n缺点： Dobbo本身提供的高级特性没用上\n自已编写启动类可能会有缺陷\n\n### 3、使用Dubbo框架提供的Main方法类来运行（Spring容器）----建议使用 优点：框架本身提供（com.alibaba.dubbo.container.Main）\n<!-- more -->\n可实现优雅关机（ShutdownHook）\n注意点\nspring-context.xml \n<import resource=\"classpath:spring/xxx.xml\" />\n官方：服务容器的加载内容可以扩展，内置了spring, jetty, log4j等加载，可通过Container扩展点进行扩展\nDubbo是通过JDK的ShutdownHook来完成优雅停机的，所以如果用户使用\"kill -9 PID\"等强制关闭指令，是不会执行优雅停机的，只有通过\"kill PID\"时，才会执行。\n原理：\n服务提供方停止时，先标记为不接收新请求，新请求过来时直接报错，让客户端重试其它机器。 然后，检测线程池中的线程是否正在运行，如果有，等待所有线程执行完成，除非超时，则强制关闭。\n服务消费方停止时，不再发起新的调用请求，所有新的调用在客户端即报错。然后，检测有没有请求的响应还没有返回，等待响应返回，除非超时，则强制关闭。\n## 二、Maven构建Dubbo服务可执行Jar包的配置\n[html] view plain copy 在CODE上查看代码片派生到我的代码片\n```js\n<!--MAVEN打包duboo可执行jar begin -->  \n    <build>  \n        <finalName>edu-service-user</finalName>  \n  \n        <resources>  \n            <resource>  \n                <targetPath>${project.build.directory}/classes</targetPath>  \n                <directory>src/main/resources</directory>  \n                <filtering>true</filtering>  \n                <includes>  \n                    <include>**/*.xml</include>  \n                    <include>**/*.properties</include>  \n                </includes>  \n            </resource>  \n            <!-- 结合com.alibaba.dubbo.container.Main -->  \n            <resource>  \n                <targetPath>${project.build.directory}/classes/META-INF/spring</targetPath>  \n                <directory>src/main/resources/spring</directory>  \n                <filtering>true</filtering>  \n                <includes>  \n                    <include>spring-context.xml</include>  \n                </includes>  \n            </resource>  \n        </resources>  \n          \n        <pluginManagement>  \n            <plugins>  \n                <!-- 解决Maven插件在Eclipse内执行了一系列的生命周期引起冲突 -->  \n                <plugin>  \n                    <groupId>org.eclipse.m2e</groupId>  \n                    <artifactId>lifecycle-mapping</artifactId>  \n                    <version>1.0.0</version>  \n                    <configuration>  \n                        <lifecycleMappingMetadata>  \n                            <pluginExecutions>  \n                                <pluginExecution>  \n                                    <pluginExecutionFilter>  \n                                        <groupId>org.apache.maven.plugins</groupId>  \n                                        <artifactId>maven-dependency-plugin</artifactId>  \n                                          \n                                        <goals>  \n                                            <goal>copy-dependencies</goal>  \n                                        </goals>  \n                                    </pluginExecutionFilter>  \n                                    <action>  \n                                        <ignore />  \n                                    </action>  \n                                </pluginExecution>  \n                            </pluginExecutions>  \n                        </lifecycleMappingMetadata>  \n                    </configuration>  \n                </plugin>  \n            </plugins>  \n        </pluginManagement>  \n        <plugins>  \n            <!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 -->  \n            <plugin>  \n                <groupId>org.apache.maven.plugins</groupId>  \n                <artifactId>maven-jar-plugin</artifactId>  \n                <configuration>  \n                    <classesDirectory>target/classes/</classesDirectory>  \n                    <archive>  \n                        <manifest>  \n                            <mainClass>com.alibaba.dubbo.container.Main</mainClass>  \n                            <!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 -->  \n                            <useUniqueVersions>false</useUniqueVersions>  \n                            <addClasspath>true</addClasspath>  \n                            <classpathPrefix>lib/</classpathPrefix>  \n                        </manifest>  \n                        <manifestEntries>  \n                            <Class-Path>.</Class-Path>  \n                        </manifestEntries>  \n                    </archive>  \n                </configuration>  \n            </plugin>  \n            <plugin>  \n                <groupId>org.apache.maven.plugins</groupId>  \n                <artifactId>maven-dependency-plugin</artifactId>  \n                <executions>  \n                    <execution>  \n                        <id>copy-dependencies</id>  \n                        <phase>package</phase>  \n                        <goals>  \n                            <goal>copy-dependencies</goal>  \n                        </goals>  \n                        <configuration>  \n                            <type>jar</type>  \n                            <includeTypes>jar</includeTypes>  \n                            <useUniqueVersions>false</useUniqueVersions>  \n                            <outputDirectory>  \n                                ${project.build.directory}/lib  \n                            </outputDirectory>  \n                        </configuration>  \n                    </execution>  \n                </executions>  \n            </plugin>  \n        </plugins>  \n  \n</build>  \n<!--MAVEN打包duboo可执行jar end -->\n``` \n## 三、可执行Dubbo服务Jar在linux上的操作\n### 1.获取数据库密码密文，使用druid\n上传druid-0.2.23.jar包到provider-01服务器192.168.1.121上，使用 Java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools root获取加密的密码\n[root@provider-01 ~]# java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools root\nbNVOqb7WKLX5Bjnw+LMv92taj25KOxDimXxILPQjw42wgv+1lHzOH8kr97xDwWdhpY67\nQuYCS7sWN4W46YbkFA==\n[root@provider-01 ~]# \n![jdbc](http://img.blog.csdn.net/20160501225203938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### 2.打包provider提供者服务jar\n![](http://img.blog.csdn.net/20160417172347973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20160417172012577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### 3.把edu-service-user.jar与其lib上传到provider-01服务器上\n[root@provider-01 home]# mkdir /home/yxq/edu/service\n[root@provider-01 home]# mkdir /home/yxq/edu/service/user\n![](http://img.blog.csdn.net/20160417172742853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n### 4.手动执行jar\n启动zookeeper注册中心192.168.1.121\n[root@provider-01 user]# ls\nedu-service-user.jar  lib\n[root@provider-01 user]# java -jar edu-service-user.jar \n![](http://img.blog.csdn.net/20160417173038720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\ndubbo管理控制台\n![](http://img.blog.csdn.net/20160417173204408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n[root@provider-01 user]# ps -ef | grep edu-service\nroot      12391  11678  1 06:46 pts/0    00:00:08 java -jar edu-service-user.jar\nroot      12423  11678  0 06:59 pts/0    00:00:00 grep edu-service\n[root@provider-01 user]# kill 12391\n手工维护Dubbo服务 \njava -jar edu-service-xxx.jar & \nkill PID \nkill -9 PID\n\n","source":"_posts/dubbo-jar-start.md","raw":"title:  Dubbo基础篇_04_使用Maven构建Dubbo服务可执行jar包 \ndate: 2016-09-14 09:53:29\ncategories: 技术\ntags: [java,dubbo,spring]\n---\n* 服务器:192.168.1.121(edu-provider-01)\n\n## 一、Dubbo服务的运行方式：\n\n### 1、使用Servlet容器运行（Tomcat、Jetty等）----不可取 缺点：增加复杂性（端口、管理）\ntomcat/jetty等占用端口,dubbo服务也需要端口\n浪费资源（内存）:单独启动tomcat,jetty占用内存大\n\n### 2、自建Main方法类来运行（Spring容器） ----不建议（本地调试可用） \n缺点： Dobbo本身提供的高级特性没用上\n自已编写启动类可能会有缺陷\n\n### 3、使用Dubbo框架提供的Main方法类来运行（Spring容器）----建议使用 优点：框架本身提供（com.alibaba.dubbo.container.Main）\n<!-- more -->\n可实现优雅关机（ShutdownHook）\n注意点\nspring-context.xml \n<import resource=\"classpath:spring/xxx.xml\" />\n官方：服务容器的加载内容可以扩展，内置了spring, jetty, log4j等加载，可通过Container扩展点进行扩展\nDubbo是通过JDK的ShutdownHook来完成优雅停机的，所以如果用户使用\"kill -9 PID\"等强制关闭指令，是不会执行优雅停机的，只有通过\"kill PID\"时，才会执行。\n原理：\n服务提供方停止时，先标记为不接收新请求，新请求过来时直接报错，让客户端重试其它机器。 然后，检测线程池中的线程是否正在运行，如果有，等待所有线程执行完成，除非超时，则强制关闭。\n服务消费方停止时，不再发起新的调用请求，所有新的调用在客户端即报错。然后，检测有没有请求的响应还没有返回，等待响应返回，除非超时，则强制关闭。\n## 二、Maven构建Dubbo服务可执行Jar包的配置\n[html] view plain copy 在CODE上查看代码片派生到我的代码片\n```js\n<!--MAVEN打包duboo可执行jar begin -->  \n    <build>  \n        <finalName>edu-service-user</finalName>  \n  \n        <resources>  \n            <resource>  \n                <targetPath>${project.build.directory}/classes</targetPath>  \n                <directory>src/main/resources</directory>  \n                <filtering>true</filtering>  \n                <includes>  \n                    <include>**/*.xml</include>  \n                    <include>**/*.properties</include>  \n                </includes>  \n            </resource>  \n            <!-- 结合com.alibaba.dubbo.container.Main -->  \n            <resource>  \n                <targetPath>${project.build.directory}/classes/META-INF/spring</targetPath>  \n                <directory>src/main/resources/spring</directory>  \n                <filtering>true</filtering>  \n                <includes>  \n                    <include>spring-context.xml</include>  \n                </includes>  \n            </resource>  \n        </resources>  \n          \n        <pluginManagement>  \n            <plugins>  \n                <!-- 解决Maven插件在Eclipse内执行了一系列的生命周期引起冲突 -->  \n                <plugin>  \n                    <groupId>org.eclipse.m2e</groupId>  \n                    <artifactId>lifecycle-mapping</artifactId>  \n                    <version>1.0.0</version>  \n                    <configuration>  \n                        <lifecycleMappingMetadata>  \n                            <pluginExecutions>  \n                                <pluginExecution>  \n                                    <pluginExecutionFilter>  \n                                        <groupId>org.apache.maven.plugins</groupId>  \n                                        <artifactId>maven-dependency-plugin</artifactId>  \n                                          \n                                        <goals>  \n                                            <goal>copy-dependencies</goal>  \n                                        </goals>  \n                                    </pluginExecutionFilter>  \n                                    <action>  \n                                        <ignore />  \n                                    </action>  \n                                </pluginExecution>  \n                            </pluginExecutions>  \n                        </lifecycleMappingMetadata>  \n                    </configuration>  \n                </plugin>  \n            </plugins>  \n        </pluginManagement>  \n        <plugins>  \n            <!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 -->  \n            <plugin>  \n                <groupId>org.apache.maven.plugins</groupId>  \n                <artifactId>maven-jar-plugin</artifactId>  \n                <configuration>  \n                    <classesDirectory>target/classes/</classesDirectory>  \n                    <archive>  \n                        <manifest>  \n                            <mainClass>com.alibaba.dubbo.container.Main</mainClass>  \n                            <!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 -->  \n                            <useUniqueVersions>false</useUniqueVersions>  \n                            <addClasspath>true</addClasspath>  \n                            <classpathPrefix>lib/</classpathPrefix>  \n                        </manifest>  \n                        <manifestEntries>  \n                            <Class-Path>.</Class-Path>  \n                        </manifestEntries>  \n                    </archive>  \n                </configuration>  \n            </plugin>  \n            <plugin>  \n                <groupId>org.apache.maven.plugins</groupId>  \n                <artifactId>maven-dependency-plugin</artifactId>  \n                <executions>  \n                    <execution>  \n                        <id>copy-dependencies</id>  \n                        <phase>package</phase>  \n                        <goals>  \n                            <goal>copy-dependencies</goal>  \n                        </goals>  \n                        <configuration>  \n                            <type>jar</type>  \n                            <includeTypes>jar</includeTypes>  \n                            <useUniqueVersions>false</useUniqueVersions>  \n                            <outputDirectory>  \n                                ${project.build.directory}/lib  \n                            </outputDirectory>  \n                        </configuration>  \n                    </execution>  \n                </executions>  \n            </plugin>  \n        </plugins>  \n  \n</build>  \n<!--MAVEN打包duboo可执行jar end -->\n``` \n## 三、可执行Dubbo服务Jar在linux上的操作\n### 1.获取数据库密码密文，使用druid\n上传druid-0.2.23.jar包到provider-01服务器192.168.1.121上，使用 Java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools root获取加密的密码\n[root@provider-01 ~]# java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools root\nbNVOqb7WKLX5Bjnw+LMv92taj25KOxDimXxILPQjw42wgv+1lHzOH8kr97xDwWdhpY67\nQuYCS7sWN4W46YbkFA==\n[root@provider-01 ~]# \n![jdbc](http://img.blog.csdn.net/20160501225203938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### 2.打包provider提供者服务jar\n![](http://img.blog.csdn.net/20160417172347973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20160417172012577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### 3.把edu-service-user.jar与其lib上传到provider-01服务器上\n[root@provider-01 home]# mkdir /home/yxq/edu/service\n[root@provider-01 home]# mkdir /home/yxq/edu/service/user\n![](http://img.blog.csdn.net/20160417172742853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n### 4.手动执行jar\n启动zookeeper注册中心192.168.1.121\n[root@provider-01 user]# ls\nedu-service-user.jar  lib\n[root@provider-01 user]# java -jar edu-service-user.jar \n![](http://img.blog.csdn.net/20160417173038720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\ndubbo管理控制台\n![](http://img.blog.csdn.net/20160417173204408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n[root@provider-01 user]# ps -ef | grep edu-service\nroot      12391  11678  1 06:46 pts/0    00:00:08 java -jar edu-service-user.jar\nroot      12423  11678  0 06:59 pts/0    00:00:00 grep edu-service\n[root@provider-01 user]# kill 12391\n手工维护Dubbo服务 \njava -jar edu-service-xxx.jar & \nkill PID \nkill -9 PID\n\n","slug":"dubbo-jar-start","published":1,"updated":"2016-12-14T02:06:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc2j00062u6bz37p5tqj","content":"<ul>\n<li>服务器:192.168.1.121(edu-provider-01)</li>\n</ul>\n<h2 id=\"一、Dubbo服务的运行方式：\"><a href=\"#一、Dubbo服务的运行方式：\" class=\"headerlink\" title=\"一、Dubbo服务的运行方式：\"></a>一、Dubbo服务的运行方式：</h2><h3 id=\"1、使用Servlet容器运行（Tomcat、Jetty等）—-不可取-缺点：增加复杂性（端口、管理）\"><a href=\"#1、使用Servlet容器运行（Tomcat、Jetty等）—-不可取-缺点：增加复杂性（端口、管理）\" class=\"headerlink\" title=\"1、使用Servlet容器运行（Tomcat、Jetty等）—-不可取 缺点：增加复杂性（端口、管理）\"></a>1、使用Servlet容器运行（Tomcat、Jetty等）—-不可取 缺点：增加复杂性（端口、管理）</h3><p>tomcat/jetty等占用端口,dubbo服务也需要端口<br>浪费资源（内存）:单独启动tomcat,jetty占用内存大</p>\n<h3 id=\"2、自建Main方法类来运行（Spring容器）-—-不建议（本地调试可用）\"><a href=\"#2、自建Main方法类来运行（Spring容器）-—-不建议（本地调试可用）\" class=\"headerlink\" title=\"2、自建Main方法类来运行（Spring容器） —-不建议（本地调试可用）\"></a>2、自建Main方法类来运行（Spring容器） —-不建议（本地调试可用）</h3><p>缺点： Dobbo本身提供的高级特性没用上<br>自已编写启动类可能会有缺陷</p>\n<h3 id=\"3、使用Dubbo框架提供的Main方法类来运行（Spring容器）—-建议使用-优点：框架本身提供（com-alibaba-dubbo-container-Main）\"><a href=\"#3、使用Dubbo框架提供的Main方法类来运行（Spring容器）—-建议使用-优点：框架本身提供（com-alibaba-dubbo-container-Main）\" class=\"headerlink\" title=\"3、使用Dubbo框架提供的Main方法类来运行（Spring容器）—-建议使用 优点：框架本身提供（com.alibaba.dubbo.container.Main）\"></a>3、使用Dubbo框架提供的Main方法类来运行（Spring容器）—-建议使用 优点：框架本身提供（com.alibaba.dubbo.container.Main）</h3><a id=\"more\"></a>\n<p>可实现优雅关机（ShutdownHook）<br>注意点<br>spring-context.xml </p>\n<p><import resource=\"classpath:spring/xxx.xml\"><br>官方：服务容器的加载内容可以扩展，内置了spring, jetty, log4j等加载，可通过Container扩展点进行扩展<br>Dubbo是通过JDK的ShutdownHook来完成优雅停机的，所以如果用户使用”kill -9 PID”等强制关闭指令，是不会执行优雅停机的，只有通过”kill PID”时，才会执行。<br>原理：<br>服务提供方停止时，先标记为不接收新请求，新请求过来时直接报错，让客户端重试其它机器。 然后，检测线程池中的线程是否正在运行，如果有，等待所有线程执行完成，除非超时，则强制关闭。<br>服务消费方停止时，不再发起新的调用请求，所有新的调用在客户端即报错。然后，检测有没有请求的响应还没有返回，等待响应返回，除非超时，则强制关闭。</import></p>\n<h2 id=\"二、Maven构建Dubbo服务可执行Jar包的配置\"><a href=\"#二、Maven构建Dubbo服务可执行Jar包的配置\" class=\"headerlink\" title=\"二、Maven构建Dubbo服务可执行Jar包的配置\"></a>二、Maven构建Dubbo服务可执行Jar包的配置</h2><p>[html] view plain copy 在CODE上查看代码片派生到我的代码片</p>\n<pre><code class=\"js\">&lt;!--MAVEN打包duboo可执行jar begin --&gt;  \n    &lt;build&gt;  \n        &lt;finalName&gt;edu-service-user&lt;/finalName&gt;  \n\n        &lt;resources&gt;  \n            &lt;resource&gt;  \n                &lt;targetPath&gt;${project.build.directory}/classes&lt;/targetPath&gt;  \n                &lt;directory&gt;src/main/resources&lt;/directory&gt;  \n                &lt;filtering&gt;true&lt;/filtering&gt;  \n                &lt;includes&gt;  \n                    &lt;include&gt;**/*.xml&lt;/include&gt;  \n                    &lt;include&gt;**/*.properties&lt;/include&gt;  \n                &lt;/includes&gt;  \n            &lt;/resource&gt;  \n            &lt;!-- 结合com.alibaba.dubbo.container.Main --&gt;  \n            &lt;resource&gt;  \n                &lt;targetPath&gt;${project.build.directory}/classes/META-INF/spring&lt;/targetPath&gt;  \n                &lt;directory&gt;src/main/resources/spring&lt;/directory&gt;  \n                &lt;filtering&gt;true&lt;/filtering&gt;  \n                &lt;includes&gt;  \n                    &lt;include&gt;spring-context.xml&lt;/include&gt;  \n                &lt;/includes&gt;  \n            &lt;/resource&gt;  \n        &lt;/resources&gt;  \n\n        &lt;pluginManagement&gt;  \n            &lt;plugins&gt;  \n                &lt;!-- 解决Maven插件在Eclipse内执行了一系列的生命周期引起冲突 --&gt;  \n                &lt;plugin&gt;  \n                    &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt;  \n                    &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt;  \n                    &lt;version&gt;1.0.0&lt;/version&gt;  \n                    &lt;configuration&gt;  \n                        &lt;lifecycleMappingMetadata&gt;  \n                            &lt;pluginExecutions&gt;  \n                                &lt;pluginExecution&gt;  \n                                    &lt;pluginExecutionFilter&gt;  \n                                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  \n                                        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  \n\n                                        &lt;goals&gt;  \n                                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;  \n                                        &lt;/goals&gt;  \n                                    &lt;/pluginExecutionFilter&gt;  \n                                    &lt;action&gt;  \n                                        &lt;ignore /&gt;  \n                                    &lt;/action&gt;  \n                                &lt;/pluginExecution&gt;  \n                            &lt;/pluginExecutions&gt;  \n                        &lt;/lifecycleMappingMetadata&gt;  \n                    &lt;/configuration&gt;  \n                &lt;/plugin&gt;  \n            &lt;/plugins&gt;  \n        &lt;/pluginManagement&gt;  \n        &lt;plugins&gt;  \n            &lt;!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 --&gt;  \n            &lt;plugin&gt;  \n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  \n                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;  \n                &lt;configuration&gt;  \n                    &lt;classesDirectory&gt;target/classes/&lt;/classesDirectory&gt;  \n                    &lt;archive&gt;  \n                        &lt;manifest&gt;  \n                            &lt;mainClass&gt;com.alibaba.dubbo.container.Main&lt;/mainClass&gt;  \n                            &lt;!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 --&gt;  \n                            &lt;useUniqueVersions&gt;false&lt;/useUniqueVersions&gt;  \n                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;  \n                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;  \n                        &lt;/manifest&gt;  \n                        &lt;manifestEntries&gt;  \n                            &lt;Class-Path&gt;.&lt;/Class-Path&gt;  \n                        &lt;/manifestEntries&gt;  \n                    &lt;/archive&gt;  \n                &lt;/configuration&gt;  \n            &lt;/plugin&gt;  \n            &lt;plugin&gt;  \n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  \n                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  \n                &lt;executions&gt;  \n                    &lt;execution&gt;  \n                        &lt;id&gt;copy-dependencies&lt;/id&gt;  \n                        &lt;phase&gt;package&lt;/phase&gt;  \n                        &lt;goals&gt;  \n                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;  \n                        &lt;/goals&gt;  \n                        &lt;configuration&gt;  \n                            &lt;type&gt;jar&lt;/type&gt;  \n                            &lt;includeTypes&gt;jar&lt;/includeTypes&gt;  \n                            &lt;useUniqueVersions&gt;false&lt;/useUniqueVersions&gt;  \n                            &lt;outputDirectory&gt;  \n                                ${project.build.directory}/lib  \n                            &lt;/outputDirectory&gt;  \n                        &lt;/configuration&gt;  \n                    &lt;/execution&gt;  \n                &lt;/executions&gt;  \n            &lt;/plugin&gt;  \n        &lt;/plugins&gt;  \n\n&lt;/build&gt;  \n&lt;!--MAVEN打包duboo可执行jar end --&gt;\n</code></pre>\n<h2 id=\"三、可执行Dubbo服务Jar在linux上的操作\"><a href=\"#三、可执行Dubbo服务Jar在linux上的操作\" class=\"headerlink\" title=\"三、可执行Dubbo服务Jar在linux上的操作\"></a>三、可执行Dubbo服务Jar在linux上的操作</h2><h3 id=\"1-获取数据库密码密文，使用druid\"><a href=\"#1-获取数据库密码密文，使用druid\" class=\"headerlink\" title=\"1.获取数据库密码密文，使用druid\"></a>1.获取数据库密码密文，使用druid</h3><p>上传druid-0.2.23.jar包到provider-01服务器192.168.1.121上，使用 Java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools root获取加密的密码<br>[root@provider-01 ~]# java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools root<br>bNVOqb7WKLX5Bjnw+LMv92taj25KOxDimXxILPQjw42wgv+1lHzOH8kr97xDwWdhpY67<br>QuYCS7sWN4W46YbkFA==<br>[root@provider-01 ~]#<br><img src=\"http://img.blog.csdn.net/20160501225203938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"jdbc\"></p>\n<h3 id=\"2-打包provider提供者服务jar\"><a href=\"#2-打包provider提供者服务jar\" class=\"headerlink\" title=\"2.打包provider提供者服务jar\"></a>2.打包provider提供者服务jar</h3><p><img src=\"http://img.blog.csdn.net/20160417172347973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20160417172012577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"3-把edu-service-user-jar与其lib上传到provider-01服务器上\"><a href=\"#3-把edu-service-user-jar与其lib上传到provider-01服务器上\" class=\"headerlink\" title=\"3.把edu-service-user.jar与其lib上传到provider-01服务器上\"></a>3.把edu-service-user.jar与其lib上传到provider-01服务器上</h3><p>[root@provider-01 home]# mkdir /home/yxq/edu/service<br>[root@provider-01 home]# mkdir /home/yxq/edu/service/user<br><img src=\"http://img.blog.csdn.net/20160417172742853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"4-手动执行jar\"><a href=\"#4-手动执行jar\" class=\"headerlink\" title=\"4.手动执行jar\"></a>4.手动执行jar</h3><p>启动zookeeper注册中心192.168.1.121<br>[root@provider-01 user]# ls<br>edu-service-user.jar  lib<br>[root@provider-01 user]# java -jar edu-service-user.jar<br><img src=\"http://img.blog.csdn.net/20160417173038720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>dubbo管理控制台<br><img src=\"http://img.blog.csdn.net/20160417173204408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>[root@provider-01 user]# ps -ef | grep edu-service<br>root      12391  11678  1 06:46 pts/0    00:00:08 java -jar edu-service-user.jar<br>root      12423  11678  0 06:59 pts/0    00:00:00 grep edu-service<br>[root@provider-01 user]# kill 12391<br>手工维护Dubbo服务<br>java -jar edu-service-xxx.jar &amp;<br>kill PID<br>kill -9 PID</p>\n","excerpt":"<ul>\n<li>服务器:192.168.1.121(edu-provider-01)</li>\n</ul>\n<h2 id=\"一、Dubbo服务的运行方式：\"><a href=\"#一、Dubbo服务的运行方式：\" class=\"headerlink\" title=\"一、Dubbo服务的运行方式：\"></a>一、Dubbo服务的运行方式：</h2><h3 id=\"1、使用Servlet容器运行（Tomcat、Jetty等）—-不可取-缺点：增加复杂性（端口、管理）\"><a href=\"#1、使用Servlet容器运行（Tomcat、Jetty等）—-不可取-缺点：增加复杂性（端口、管理）\" class=\"headerlink\" title=\"1、使用Servlet容器运行（Tomcat、Jetty等）—-不可取 缺点：增加复杂性（端口、管理）\"></a>1、使用Servlet容器运行（Tomcat、Jetty等）—-不可取 缺点：增加复杂性（端口、管理）</h3><p>tomcat/jetty等占用端口,dubbo服务也需要端口<br>浪费资源（内存）:单独启动tomcat,jetty占用内存大</p>\n<h3 id=\"2、自建Main方法类来运行（Spring容器）-—-不建议（本地调试可用）\"><a href=\"#2、自建Main方法类来运行（Spring容器）-—-不建议（本地调试可用）\" class=\"headerlink\" title=\"2、自建Main方法类来运行（Spring容器） —-不建议（本地调试可用）\"></a>2、自建Main方法类来运行（Spring容器） —-不建议（本地调试可用）</h3><p>缺点： Dobbo本身提供的高级特性没用上<br>自已编写启动类可能会有缺陷</p>\n<h3 id=\"3、使用Dubbo框架提供的Main方法类来运行（Spring容器）—-建议使用-优点：框架本身提供（com-alibaba-dubbo-container-Main）\"><a href=\"#3、使用Dubbo框架提供的Main方法类来运行（Spring容器）—-建议使用-优点：框架本身提供（com-alibaba-dubbo-container-Main）\" class=\"headerlink\" title=\"3、使用Dubbo框架提供的Main方法类来运行（Spring容器）—-建议使用 优点：框架本身提供（com.alibaba.dubbo.container.Main）\"></a>3、使用Dubbo框架提供的Main方法类来运行（Spring容器）—-建议使用 优点：框架本身提供（com.alibaba.dubbo.container.Main）</h3>","more":"<p>可实现优雅关机（ShutdownHook）<br>注意点<br>spring-context.xml </p>\n<p><import resource=\"classpath:spring/xxx.xml\" /><br>官方：服务容器的加载内容可以扩展，内置了spring, jetty, log4j等加载，可通过Container扩展点进行扩展<br>Dubbo是通过JDK的ShutdownHook来完成优雅停机的，所以如果用户使用”kill -9 PID”等强制关闭指令，是不会执行优雅停机的，只有通过”kill PID”时，才会执行。<br>原理：<br>服务提供方停止时，先标记为不接收新请求，新请求过来时直接报错，让客户端重试其它机器。 然后，检测线程池中的线程是否正在运行，如果有，等待所有线程执行完成，除非超时，则强制关闭。<br>服务消费方停止时，不再发起新的调用请求，所有新的调用在客户端即报错。然后，检测有没有请求的响应还没有返回，等待响应返回，除非超时，则强制关闭。</p>\n<h2 id=\"二、Maven构建Dubbo服务可执行Jar包的配置\"><a href=\"#二、Maven构建Dubbo服务可执行Jar包的配置\" class=\"headerlink\" title=\"二、Maven构建Dubbo服务可执行Jar包的配置\"></a>二、Maven构建Dubbo服务可执行Jar包的配置</h2><p>[html] view plain copy 在CODE上查看代码片派生到我的代码片</p>\n<pre><code class=\"js\">&lt;!--MAVEN打包duboo可执行jar begin --&gt;  \n    &lt;build&gt;  \n        &lt;finalName&gt;edu-service-user&lt;/finalName&gt;  \n\n        &lt;resources&gt;  \n            &lt;resource&gt;  \n                &lt;targetPath&gt;${project.build.directory}/classes&lt;/targetPath&gt;  \n                &lt;directory&gt;src/main/resources&lt;/directory&gt;  \n                &lt;filtering&gt;true&lt;/filtering&gt;  \n                &lt;includes&gt;  \n                    &lt;include&gt;**/*.xml&lt;/include&gt;  \n                    &lt;include&gt;**/*.properties&lt;/include&gt;  \n                &lt;/includes&gt;  \n            &lt;/resource&gt;  \n            &lt;!-- 结合com.alibaba.dubbo.container.Main --&gt;  \n            &lt;resource&gt;  \n                &lt;targetPath&gt;${project.build.directory}/classes/META-INF/spring&lt;/targetPath&gt;  \n                &lt;directory&gt;src/main/resources/spring&lt;/directory&gt;  \n                &lt;filtering&gt;true&lt;/filtering&gt;  \n                &lt;includes&gt;  \n                    &lt;include&gt;spring-context.xml&lt;/include&gt;  \n                &lt;/includes&gt;  \n            &lt;/resource&gt;  \n        &lt;/resources&gt;  \n\n        &lt;pluginManagement&gt;  \n            &lt;plugins&gt;  \n                &lt;!-- 解决Maven插件在Eclipse内执行了一系列的生命周期引起冲突 --&gt;  \n                &lt;plugin&gt;  \n                    &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt;  \n                    &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt;  \n                    &lt;version&gt;1.0.0&lt;/version&gt;  \n                    &lt;configuration&gt;  \n                        &lt;lifecycleMappingMetadata&gt;  \n                            &lt;pluginExecutions&gt;  \n                                &lt;pluginExecution&gt;  \n                                    &lt;pluginExecutionFilter&gt;  \n                                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  \n                                        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  \n\n                                        &lt;goals&gt;  \n                                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;  \n                                        &lt;/goals&gt;  \n                                    &lt;/pluginExecutionFilter&gt;  \n                                    &lt;action&gt;  \n                                        &lt;ignore /&gt;  \n                                    &lt;/action&gt;  \n                                &lt;/pluginExecution&gt;  \n                            &lt;/pluginExecutions&gt;  \n                        &lt;/lifecycleMappingMetadata&gt;  \n                    &lt;/configuration&gt;  \n                &lt;/plugin&gt;  \n            &lt;/plugins&gt;  \n        &lt;/pluginManagement&gt;  \n        &lt;plugins&gt;  \n            &lt;!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 --&gt;  \n            &lt;plugin&gt;  \n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  \n                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;  \n                &lt;configuration&gt;  \n                    &lt;classesDirectory&gt;target/classes/&lt;/classesDirectory&gt;  \n                    &lt;archive&gt;  \n                        &lt;manifest&gt;  \n                            &lt;mainClass&gt;com.alibaba.dubbo.container.Main&lt;/mainClass&gt;  \n                            &lt;!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 --&gt;  \n                            &lt;useUniqueVersions&gt;false&lt;/useUniqueVersions&gt;  \n                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;  \n                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;  \n                        &lt;/manifest&gt;  \n                        &lt;manifestEntries&gt;  \n                            &lt;Class-Path&gt;.&lt;/Class-Path&gt;  \n                        &lt;/manifestEntries&gt;  \n                    &lt;/archive&gt;  \n                &lt;/configuration&gt;  \n            &lt;/plugin&gt;  \n            &lt;plugin&gt;  \n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  \n                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  \n                &lt;executions&gt;  \n                    &lt;execution&gt;  \n                        &lt;id&gt;copy-dependencies&lt;/id&gt;  \n                        &lt;phase&gt;package&lt;/phase&gt;  \n                        &lt;goals&gt;  \n                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;  \n                        &lt;/goals&gt;  \n                        &lt;configuration&gt;  \n                            &lt;type&gt;jar&lt;/type&gt;  \n                            &lt;includeTypes&gt;jar&lt;/includeTypes&gt;  \n                            &lt;useUniqueVersions&gt;false&lt;/useUniqueVersions&gt;  \n                            &lt;outputDirectory&gt;  \n                                ${project.build.directory}/lib  \n                            &lt;/outputDirectory&gt;  \n                        &lt;/configuration&gt;  \n                    &lt;/execution&gt;  \n                &lt;/executions&gt;  \n            &lt;/plugin&gt;  \n        &lt;/plugins&gt;  \n\n&lt;/build&gt;  \n&lt;!--MAVEN打包duboo可执行jar end --&gt;\n</code></pre>\n<h2 id=\"三、可执行Dubbo服务Jar在linux上的操作\"><a href=\"#三、可执行Dubbo服务Jar在linux上的操作\" class=\"headerlink\" title=\"三、可执行Dubbo服务Jar在linux上的操作\"></a>三、可执行Dubbo服务Jar在linux上的操作</h2><h3 id=\"1-获取数据库密码密文，使用druid\"><a href=\"#1-获取数据库密码密文，使用druid\" class=\"headerlink\" title=\"1.获取数据库密码密文，使用druid\"></a>1.获取数据库密码密文，使用druid</h3><p>上传druid-0.2.23.jar包到provider-01服务器192.168.1.121上，使用 Java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools root获取加密的密码<br>[root@provider-01 ~]# java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools root<br>bNVOqb7WKLX5Bjnw+LMv92taj25KOxDimXxILPQjw42wgv+1lHzOH8kr97xDwWdhpY67<br>QuYCS7sWN4W46YbkFA==<br>[root@provider-01 ~]#<br><img src=\"http://img.blog.csdn.net/20160501225203938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"jdbc\"></p>\n<h3 id=\"2-打包provider提供者服务jar\"><a href=\"#2-打包provider提供者服务jar\" class=\"headerlink\" title=\"2.打包provider提供者服务jar\"></a>2.打包provider提供者服务jar</h3><p><img src=\"http://img.blog.csdn.net/20160417172347973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20160417172012577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"3-把edu-service-user-jar与其lib上传到provider-01服务器上\"><a href=\"#3-把edu-service-user-jar与其lib上传到provider-01服务器上\" class=\"headerlink\" title=\"3.把edu-service-user.jar与其lib上传到provider-01服务器上\"></a>3.把edu-service-user.jar与其lib上传到provider-01服务器上</h3><p>[root@provider-01 home]# mkdir /home/yxq/edu/service<br>[root@provider-01 home]# mkdir /home/yxq/edu/service/user<br><img src=\"http://img.blog.csdn.net/20160417172742853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"4-手动执行jar\"><a href=\"#4-手动执行jar\" class=\"headerlink\" title=\"4.手动执行jar\"></a>4.手动执行jar</h3><p>启动zookeeper注册中心192.168.1.121<br>[root@provider-01 user]# ls<br>edu-service-user.jar  lib<br>[root@provider-01 user]# java -jar edu-service-user.jar<br><img src=\"http://img.blog.csdn.net/20160417173038720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>dubbo管理控制台<br><img src=\"http://img.blog.csdn.net/20160417173204408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br>[root@provider-01 user]# ps -ef | grep edu-service<br>root      12391  11678  1 06:46 pts/0    00:00:08 java -jar edu-service-user.jar<br>root      12423  11678  0 06:59 pts/0    00:00:00 grep edu-service<br>[root@provider-01 user]# kill 12391<br>手工维护Dubbo服务<br>java -jar edu-service-xxx.jar &amp;<br>kill PID<br>kill -9 PID</p>"},{"title":"Hexo Guide","date":"2014-12-22T02:40:32.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hexo-guide.md","raw":"title: Hexo Guide\ndate: 2014-12-22 10:40:32\ncategories: 技术\ntags: Hexo\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hexo-guide","published":1,"updated":"2016-12-12T10:23:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc2l00072u6bimfaj38b","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"大学毕业后拉开差距的原因","date":"2015-01-14T08:53:29.000Z","_content":"&ensp;&ensp;&ensp;&ensp;有人工作， 有人继续上学，大家千万不要错过这篇文章，能看到这篇文章也是一种幸运，真的受益匪浅，对我有很大启迪，这篇文章将会改变我的一生，真的太好了，希望与有 缘人分享，也希望对有缘人有所帮助！看完之后有种“相见恨晚”的感觉，特别激动，希望大家好好的珍 藏这篇文章，相信多年以后，再来看这篇文章，一定有不同的感觉。\n&ensp;&ensp;&ensp;&ensp;一位知名的成功人士曾说过：”我觉得有两种人不要跟别人争利益和价值回报。第一种人就是刚刚进入企业的人，头5年千万不要说你能不能多给我一点儿工资，最重要的是能在企业里学到什么，对发展是不是有利……”<!-- more -->\n&ensp;&ensp;&ensp;&ensp;人总是从平坦中获得的教益少，从磨难中获得的教益多；从平坦中获得的教益浅，从磨难中获得的教益深。一个人在年轻时经历磨难，如能正确视之，冲出黑暗，那就是一个值得敬慕的人。最要紧的是先练好内功，毕业后这5年就是练内功的最佳时期，练好内功，才有可能在未来攀得更高。\n&ensp;&ensp;&ensp;&ensp;出路在哪里？出路在于思路！\n&ensp;&ensp;&ensp;&ensp;其实，没有钱、没有经验、没有阅历、没有社会关系，这些都不可怕。没有钱，可以通过辛勤劳动去赚；没有经验，可以通过实践操作去总结；没有阅历，可以一步一步去积累；没有社会关系，可以一点一点去编织。但是，没有梦想、没有思路才是最可怕的，才让人感到恐惧，很想 逃避!\n&ensp;&ensp;&ensp;&ensp;人必须有一个正确的方向。无论你多么 意气风发，无论你是多么足智多谋，无论你花费了多大的心血，如果没有一个明确的方向，就会过得很茫然，渐渐就丧失了斗志，忘却了最初的梦想，就会走上弯路 甚至不归路，枉费了自己的聪明才智，误了自己的青春年华。\n&ensp;&ensp;&ensp;&ensp;荷马史诗《奥德赛》中有 一句至理名言：”没有比漫无目的地徘徊更令人无法忍受的了。”毕业后这5年 里的迷茫，会造成10年后的恐慌，20年后的挣扎，甚至一辈子的平庸。如果不能在毕业这5年 尽快冲出困惑、走出迷雾，我们实在是无颜面对10年后、20年后的自己。毕业这5年 里，我们既有很多的不确定，也有很多的可能性。\n&ensp;&ensp;&ensp;&ensp;毕业这5年里，我们既有很多的待定，也有很多的决定。\n&ensp;&ensp;&ensp;&ensp;迷茫与困惑谁都会经历，恐 惧与逃避谁都曾经有过，但不要把迷茫与困惑当作可以自我放弃、甘于平庸的借口，更不要成为自怨自艾、祭奠失意的苦酒。生命需要自己去承担，命运更需要自己 去把握。在毕业这5年里，越早找到方向，越早走出困惑，就越容易在人生道路上取得成就、创造精彩。无头苍蝇找不到方向，才会四 处碰壁；一个人找不到出路，才会迷茫、恐惧。\n&ensp;&ensp;&ensp;&ensp;生活中，面对困境，我们常常会有走投 无路的感觉。不要气馁，坚持下去，要相信年轻的人生没有绝路，困境在前方，希望在拐角。只要我们有了正确的思路，就一定能少走弯路，找到出路！\n&ensp;&ensp;&ensp;&ensp;成功的人不是赢在起点，而是赢在转折点。\n&ensp;&ensp;&ensp;&ensp;不少刚刚毕业的年轻人，总是奢望马上就能找到自己理想中的工作。然而，很多好工作是无法等来的，你必须选择一份工作 作为历练。职业旅程中的第一份工作，无疑是踏入社会这所大学的起点。也许你找了一份差强人意的工作，那么从这里出发，好好地沉淀自己，从这份工作中汲取到 有价值的营养，厚积薄发。千里之行，始于足下，只要出发，就有希望到达终点。\n&ensp;&ensp;&ensp;&ensp;起点 可以相同，但是选择了不同的拐点，终点就会大大不同！\n&ensp;&ensp;&ensp;&ensp;毕业这几年，我们的生活、感 情、职业等都存在很多不确定的因素，未来也充满了各种可能。这个时候，必须学会选择，懂得放弃，给自己一个明确的定位，使自己稳定下来。如果你不主动定 位，就会被别人和社会”定型”！\n&ensp;&ensp;&ensp;&ensp;可以这么说：一个人在毕业这5年培养起来的行为习惯，将决定他一生的高度。我们能否成功，在某种程度上取决于自己对自己的评 价，这就是定位。你给自己定位是什么，你就是什么。定位能决定人生，定位能改变命运。丑小鸭变成白天鹅，只要一双翅膀；灰姑娘变成美公主，只要一双水晶 鞋。\n&ensp;&ensp;&ensp;&ensp;人的命，三分天注定，七分靠打拼，有梦就”会红”， 爱拼才会赢。只要不把自己束缚在心灵的牢笼里，谁也束缚不了你去展翅高飞。\n&ensp;&ensp;&ensp;&ensp;现实情况远非他们所想的那样。于是，当优越感逐渐转为失落感甚至挫败感时，当由坚信自己是一块”金子”到怀疑自己是一粒”沙子”时，愤怒、迷茫、自卑就开始与日俱增。\n&ensp;&ensp;&ensp;&ensp;其实，应该仔细掂量一下自己，你是否真是金子？是真金，手中要有绝活，才能上要有过人之处才行。一句话：真金是要靠实力来证明的，只有先把自己的本领修炼好了，才有资格考虑伯乐的事情\n&ensp;&ensp;&ensp;&ensp;每颗珍珠原本都是一粒沙子，但并不是每一粒沙子都能成为一颗珍珠。\n&ensp;&ensp;&ensp;&ensp;想要卓尔不群，就要有鹤立鸡群的资本。忍受不了打击和挫折，承受不住忽视和平淡，就很难达到辉煌。年轻人要想让自己得到重用，取得成功，就必须把自己从一粒沙子变成一颗价值连城的珍珠。\n&ensp;&ensp;&ensp;&ensp;天有下雨与日出，人生高峰与低谷。\n&ensp;&ensp;&ensp;&ensp;莫为浮云遮望眼，风物长宜放眼量。\n&ensp;&ensp;&ensp;&ensp;只要拂去阴霾，就能亮出朗朗晴空。如果你在工作上有些不如意，要相信自己不会一直处于人生的低谷期，总有一天能冲破重重云层。告诉自己：我并没有失败，只是暂时没有成功！只要在内心点亮一盏希望之灯，一定能驱散黑暗中的阴霾，迎来光明。的确，论资历，他们是不折不扣的职场菜鸟，业务涉及不深，人脉一穷二白，在工作中经常碰壁。他们的压力并不一定都像千钧大石，而是像大雨来临前的天色，灰色低沉， 明明有空间，却被灰色填满每个缝隙，只能等待大雨倾盆之后的晴空。\n&ensp;&ensp;&ensp;&ensp;“起得比鸡早，睡得比狗晚，干得比驴多，吃得比猪差”这是很多刚刚毕业的人喜欢用来调侃自己生活状态的话。虽然有点儿夸张，但是，他们中的很多人的确一直都被灰色心情所笼罩—心里永远是多云转阴。记得有位哲人曾说：”我们的痛苦不是问题本身带来的，而是我们对这些问题的看法产生的”换个角度看人生，是一种突破、一种解脱、一种超越、一种高层次 的淡泊与宁静，从而获得自由自在的快乐。\n&ensp;&ensp;&ensp;&ensp;一位哲人说：”人 生就是一连串的抉择，每个人的前途与命运，完全把握在自己手中，只要努力，终会有成。”就业也好，择业也罢，创业亦如此，只要 奋发努力，都会成功。你是不是准备把生命的承诺全部都交给别人？\n&ensp;&ensp;&ensp;&ensp;毕业后这5年，是改变自己命运的黄金时期。在最能决定自己命运时，如果还不把握，那你还要等到什么时候呢？我的人生我做主，命运由 己不由人。\n&ensp;&ensp;&ensp;&ensp;不要活在别人的嘴里，不要活在别人的眼 里，而是把命运握在自己手里。\n&ensp;&ensp;&ensp;&ensp;别说你没有背景，自己就是最大的背景。美国作家杰 克·凯鲁亚克说过一句话：”我还年轻，我渴望上路。”在人生的旅途中， 我们永远都是年轻人，每天都应该满怀渴望。每个人的潜能都是无限的，关键是要发现自己的潜能和正确认识自己的才能，并找到一个能充分发挥潜能的舞台，而不 能只为舞台的不合适感到不快。要客观公正地看待自己的能力，结合自己的实际情况和爱好冷静选择，尽可能到最需要自己、最适合自己的地方。\n&ensp;&ensp;&ensp;&ensp;在人力资源管理界，特别流行一个说法，即”骑 马，牵牛，赶猪，打狗”理论：人品很好，能力又很强的，是千里马，我们要骑着他；人品很好但能力普通的，是老黄牛，我们要牵着 他；人品、能力皆普通的，就是”猪”，我们要赶走他；人品很差能力很强的，那是”狗”， 我们要打击他。\n&ensp;&ensp;&ensp;&ensp;我想，刚刚毕业几年的你，一样胸怀大志，一样想成为一匹被人赏识、 驰骋沙场的千里马吧？那么，就好好沉淀下来。低就一层不等于低人一等，今日的俯低是为了明天的高就。所谓生命的价值，就是我们的存在对别人有价值。能被人 利用是一件好事，无人问津才是真正的悲哀！能干工作、干好工作是职场生存的基本保障。\n&ensp;&ensp;&ensp;&ensp;任何人做工作的前提条件都是他的能力能够胜任这项工作。能干是合 格员工最基本的标准，肯干则是一种态度。一个职位有很多人都能胜任，都有干好这份工作的基本能力，然而，能否把工作做得更好一些，就要看是否具有踏实肯 干、苦于钻研的工作态度了。\n&ensp;&ensp;&ensp;&ensp;在能干的基础上踏实肯干。\n&ensp;&ensp;&ensp;&ensp;工作中，活干 得比别人多，你觉得吃亏；钱拿得比别人少，你觉得吃亏；经常加班加点，你觉得吃亏……其实，没必要这样计较，吃亏不是灾难，不 是失败，吃亏也是一种生活哲学。现在吃点儿小亏，为成功铺就道路，也许在未来的某个时刻，你的大福突然就来了。能吃亏是做人的一种境界，是处世的一 种睿智。\n&ensp;&ensp;&ensp;&ensp;在工作中并不是多做事或多帮别人干点儿活就是吃亏。如果领导让你 加加班、赶赶任务，别以为自己吃了大亏，反而应该感到庆幸，因为领导只叫了你，而没叫其他人，说明他信任你、赏识你。吃亏是一种贡献，你贡献得越多，得到 的回报也就越多。乐于加班，就是这样的一种吃亏。\n&ensp;&ensp;&ensp;&ensp;舍得舍得，有舍才有得；学会在适当时吃 些亏的人绝对不是弱智，而是大智。\n&ensp;&ensp;&ensp;&ensp;给别人留余地就是给自己留余地，予人方便就是予己方便，善待别人就是善待自己。\n&ensp;&ensp;&ensp;&ensp;傻人有傻福，因为傻人没有心计。和这样的人在一起，身心放松，没有太多警惕，就能相互靠近。傻在很多时候意味着执着和忠贞，也意味着宽厚和诚实，让人不知不觉站到他一边。傻人无意中得到的，比聪明人费尽心机得到的还多。毕业这几年，你的天空中只飘着几片雪花，这样你就满足了吗？成功需要坚持与积累，与其专注于搜集雪花，不如省下力气去滚雪球。巴菲特说：”人生就像滚雪球，最重要的是发现很湿的雪和很长的坡。”让自己沉淀下来，学着发现”很湿的雪”，努力寻找”很长的坡”。 记住：散落的雪花会很快融化，化为乌有，只有雪球才更实在，才能长久。\n&ensp;&ensp;&ensp;&ensp;在毕业这几年里，你要是能做到比别人多付出一分努力，就意味着比别人多积累一分资本，就比别人多一次成功的机会。\n&ensp;&ensp;&ensp;&ensp;什么是职业化呢？职业化就是工作状态的标准化、规范化、制度化，即在合适的时间、合适的地点用合适的方式说合适的话、做合适的事，使知识、技能、观念、思 维、态度、心理等符合职业规范和标准。”在每个行业里，都有很多出色的人才，他们之所以能存在，是因为比别人更努力、更智慧、 更成熟。但是，最重要的是，他们比一般人更加职业化！这就是为什么我现在能当你老板的原因。一个人仅仅专业化是不够的，只有职业化的人才能飞在别人前面， 让人难以超越！”不要以为我们现在已经生存得很安稳了。对于毕业5年的人来讲，一定要认清即将面临的五大挑战。\n&ensp;&ensp;&ensp;&ensp;一、赡养父母。\n&ensp;&ensp;&ensp;&ensp;二、结婚生子。\n&ensp;&ensp;&ensp;&ensp;三、 升职加薪。\n&ensp;&ensp;&ensp;&ensp;四、工作压力。\n&ensp;&ensp;&ensp;&ensp;五、生活质量。\n&ensp;&ensp;&ensp;&ensp;有的人为生存 而雀跃，目光总是停在身后，三天打鱼两天晒网，有始无终。\n&ensp;&ensp;&ensp;&ensp;有的人为发展而奋斗，目光总是盯在正前方，每天进步一点点，坚持不懈。\n&ensp;&ensp;&ensp;&ensp;毕业这几年，不能没有追求和探索，不能没有理想和目标。人生如逆水行舟，不进则退。甘于现状的生活就是不再前行的船，再也无法追上时代前进的步伐。一定要抓紧每一秒钟的时间来学习，要明白学习不是学生的专利。小聪明的人最得意的是：自己做过什么？大智慧的人最渴望的是：自己还要做什么？\n&ensp;&ensp;&ensp;&ensp;小聪明是战术，大智慧是战略；小聪明看到的是芝麻，大智慧看到的是西瓜。\n&ensp;&ensp;&ensp;&ensp;在这个世界上，既有大人物，也有小角色，大人物有大人物的活 法，小人物有小人物的潇洒，每个人都有自己的生活方式，谁也勉强不了谁。但是，小聪明只能有小成绩和小视野，大智慧才能有大成就和大境界。小企业看老板， 中企业看制度，大企业看文化。\n&ensp;&ensp;&ensp;&ensp;小公司与大企业都有生存之道，没有好坏之分，但对一 个人不同阶段的影响会不同。\n&ensp;&ensp;&ensp;&ensp;小公司肯定想要发展为大企业，这是一种目 标，年轻人也要给自己的职业生涯制定目标。毕业几年的你，是否经常会怯场或者是感到没有底气？居安思危绝对不是危言耸听！此刻打盹，你将做梦；此刻学习， 你将圆梦。在竞争激烈的人生战场上，打盹的都是输家！\n&ensp;&ensp;&ensp;&ensp;每个人在年轻的时候似乎都豪情 万丈，什么都不怕，可是随着年龄的增长，每天想着房子、工作、养家糊口这些俗事儿，再也没有年轻时那种敢于”上天探星、下海捞 月”的勇气了。是我们改变了生活，还是生活改变了我们？我们的思想越来越复杂，因为有了越来越多的舍不得、越来越多的顾虑，我们总是在徘徊、总是在犹豫。毕业开始一两年，生活的重担会压得我们喘不过气来，挫折和障碍堵住四面八方的通口，我们往往在压迫得自己发挥出潜能后，才能杀出重围，找到出路。可是两三年后，身上的重担开始减轻，工作开始一帆风顺，我们就松懈了下来，渐渐忘记了潜在的危险。直到有一天危机突然降临，我们在手足无措中被击败…毕业这几年，仍然处于危险期，一定要有居安思危的意识，好好打拼，这样才能有一个真正的安全人生！\n&ensp;&ensp;&ensp;&ensp;生于忧患，死于安乐。如果你想跨越自己目前的成就，就不能画地自限，而是要勇于接受挑 战。对畏畏缩缩的人来说，真正的危险正在于不敢冒险！\n&ensp;&ensp;&ensp;&ensp;年轻人在社会的重压下，适应 能力已变得越来越强，只是他们不自觉地习惯被环境推着走。他们不敢冒险，怕给自己带来终身的遗憾，于是告慰自己：”我对得起自 己、对得起家人，因为我已竭尽全力。”其实，人只有不断挑战和突破才能逐渐成长。长期固守于已有的安全感中，就会像温水里的青 蛙一样，最终失去跳跃的本能。\n&ensp;&ensp;&ensp;&ensp;经历了这几年社会生活，你应该明白：这个世界上有富也有贫，有阴也有亮， 有丑也有美，到底看到什么，取决于自己是积极还是消极。在年轻时学会勤勉地工作，用一种光明的思维对待生活，那么，只要张开手掌，你就会发现，里面有一片灿烂的人生。\n&ensp;&ensp;&ensp;&ensp;把感恩刻在石头上，深深地感谢别人帮助过你，永远铭记，这是人生应有的一种境界；把仇恨写在沙滩上，淡淡忘掉别人伤害过你，学会宽容，让所有的怨恨随着潮水一去不复 返，这也是一种人生境界。\n&ensp;&ensp;&ensp;&ensp;学会倒出水，才能装下更多的水。从毕业那天开始，学会把每天都当成一个新的起点，每一次工作都从零开始。如果你懂得把”归零”当成一种生活 的常态，当成一种优秀的延续，当成一种时刻要做的事情，那么，经过短短几年，你就可以完成自己职业生涯的正确规划与全面超越。\n&ensp;&ensp;&ensp;&ensp;在职业起步的短短道路上，想要得到更好、更快、更有益的成长，就必须以归零思维来面对这个世界。 不要以大学里的清高来标榜自己，不要觉得自己特别优秀，而是要把自己的姿态放下，把自己的身架放低，让自己沉淀下来，抱着学习的态度去适应环境、接受挑 战。放下”身段”才能提高身价，暂时的俯低终会促成未来的高就。\n&ensp;&ensp;&ensp;&ensp;年轻人从校园或者从一个环境进入一个新环境，就要勇于将原来环境里熟悉、习惯、喜欢的东西放下，然后从 零开始。我们想在职场上获得成功，首先就要培养适应力。从自然人转化为单位人是融入职场的基本条件。一个人起点低并不可怕，怕的是境界低。越计较自我，便越没有发展前景；相反，越是主动付出，那么他就越会快速发展。很多今天取得一定成就的人，在职业生涯的初期都是从零开始，把自己沉淀再沉淀、倒空再倒空、 归零再归零，正因为这样，他们的人生才一路高歌，一路飞扬。\n&ensp;&ensp;&ensp;&ensp;在毕业这 几年里，我们要让过去归零，才不会成为职场上那只背着重壳爬行的蜗牛，才能像天空中的鸟儿那样轻盈地飞翔。请好好品味一下杰克·韦 尔奇说过的一句话：”纠正自己的行为，认清自己，从零开始，你将重新走上职场坦途。”　吐故才能纳 新，心静才能身凉，有舍才能有得，杯空才能水满，放下才能超越。\n&ensp;&ensp;&ensp;&ensp;归零思维五大表现：心中无我，眼中无钱，念中无他，朝中无人，学无止境。\n&ensp;&ensp;&ensp;&ensp;年轻人难免 带着几分傲气，认为自己无所不能、所向披靡，其实不然，初入职场的新人还是个”婴儿”，正处在从爬 到走的成长阶段。在毕业这几年里，一定要让自己逐步培养起学徒思维、海绵思维、空杯思维，具有这样思维的人心灵总是敞开的，能随时接受启示和一切能激发灵 感的东西，他们时刻都能感受到成功女神的召唤。\n","source":"_posts/graduation-you-must-strive.md","raw":"title: 大学毕业后拉开差距的原因\ndate: 2015-01-14 16:53:29\ncategories: 日志\ntags: 随感\n---\n&ensp;&ensp;&ensp;&ensp;有人工作， 有人继续上学，大家千万不要错过这篇文章，能看到这篇文章也是一种幸运，真的受益匪浅，对我有很大启迪，这篇文章将会改变我的一生，真的太好了，希望与有 缘人分享，也希望对有缘人有所帮助！看完之后有种“相见恨晚”的感觉，特别激动，希望大家好好的珍 藏这篇文章，相信多年以后，再来看这篇文章，一定有不同的感觉。\n&ensp;&ensp;&ensp;&ensp;一位知名的成功人士曾说过：”我觉得有两种人不要跟别人争利益和价值回报。第一种人就是刚刚进入企业的人，头5年千万不要说你能不能多给我一点儿工资，最重要的是能在企业里学到什么，对发展是不是有利……”<!-- more -->\n&ensp;&ensp;&ensp;&ensp;人总是从平坦中获得的教益少，从磨难中获得的教益多；从平坦中获得的教益浅，从磨难中获得的教益深。一个人在年轻时经历磨难，如能正确视之，冲出黑暗，那就是一个值得敬慕的人。最要紧的是先练好内功，毕业后这5年就是练内功的最佳时期，练好内功，才有可能在未来攀得更高。\n&ensp;&ensp;&ensp;&ensp;出路在哪里？出路在于思路！\n&ensp;&ensp;&ensp;&ensp;其实，没有钱、没有经验、没有阅历、没有社会关系，这些都不可怕。没有钱，可以通过辛勤劳动去赚；没有经验，可以通过实践操作去总结；没有阅历，可以一步一步去积累；没有社会关系，可以一点一点去编织。但是，没有梦想、没有思路才是最可怕的，才让人感到恐惧，很想 逃避!\n&ensp;&ensp;&ensp;&ensp;人必须有一个正确的方向。无论你多么 意气风发，无论你是多么足智多谋，无论你花费了多大的心血，如果没有一个明确的方向，就会过得很茫然，渐渐就丧失了斗志，忘却了最初的梦想，就会走上弯路 甚至不归路，枉费了自己的聪明才智，误了自己的青春年华。\n&ensp;&ensp;&ensp;&ensp;荷马史诗《奥德赛》中有 一句至理名言：”没有比漫无目的地徘徊更令人无法忍受的了。”毕业后这5年 里的迷茫，会造成10年后的恐慌，20年后的挣扎，甚至一辈子的平庸。如果不能在毕业这5年 尽快冲出困惑、走出迷雾，我们实在是无颜面对10年后、20年后的自己。毕业这5年 里，我们既有很多的不确定，也有很多的可能性。\n&ensp;&ensp;&ensp;&ensp;毕业这5年里，我们既有很多的待定，也有很多的决定。\n&ensp;&ensp;&ensp;&ensp;迷茫与困惑谁都会经历，恐 惧与逃避谁都曾经有过，但不要把迷茫与困惑当作可以自我放弃、甘于平庸的借口，更不要成为自怨自艾、祭奠失意的苦酒。生命需要自己去承担，命运更需要自己 去把握。在毕业这5年里，越早找到方向，越早走出困惑，就越容易在人生道路上取得成就、创造精彩。无头苍蝇找不到方向，才会四 处碰壁；一个人找不到出路，才会迷茫、恐惧。\n&ensp;&ensp;&ensp;&ensp;生活中，面对困境，我们常常会有走投 无路的感觉。不要气馁，坚持下去，要相信年轻的人生没有绝路，困境在前方，希望在拐角。只要我们有了正确的思路，就一定能少走弯路，找到出路！\n&ensp;&ensp;&ensp;&ensp;成功的人不是赢在起点，而是赢在转折点。\n&ensp;&ensp;&ensp;&ensp;不少刚刚毕业的年轻人，总是奢望马上就能找到自己理想中的工作。然而，很多好工作是无法等来的，你必须选择一份工作 作为历练。职业旅程中的第一份工作，无疑是踏入社会这所大学的起点。也许你找了一份差强人意的工作，那么从这里出发，好好地沉淀自己，从这份工作中汲取到 有价值的营养，厚积薄发。千里之行，始于足下，只要出发，就有希望到达终点。\n&ensp;&ensp;&ensp;&ensp;起点 可以相同，但是选择了不同的拐点，终点就会大大不同！\n&ensp;&ensp;&ensp;&ensp;毕业这几年，我们的生活、感 情、职业等都存在很多不确定的因素，未来也充满了各种可能。这个时候，必须学会选择，懂得放弃，给自己一个明确的定位，使自己稳定下来。如果你不主动定 位，就会被别人和社会”定型”！\n&ensp;&ensp;&ensp;&ensp;可以这么说：一个人在毕业这5年培养起来的行为习惯，将决定他一生的高度。我们能否成功，在某种程度上取决于自己对自己的评 价，这就是定位。你给自己定位是什么，你就是什么。定位能决定人生，定位能改变命运。丑小鸭变成白天鹅，只要一双翅膀；灰姑娘变成美公主，只要一双水晶 鞋。\n&ensp;&ensp;&ensp;&ensp;人的命，三分天注定，七分靠打拼，有梦就”会红”， 爱拼才会赢。只要不把自己束缚在心灵的牢笼里，谁也束缚不了你去展翅高飞。\n&ensp;&ensp;&ensp;&ensp;现实情况远非他们所想的那样。于是，当优越感逐渐转为失落感甚至挫败感时，当由坚信自己是一块”金子”到怀疑自己是一粒”沙子”时，愤怒、迷茫、自卑就开始与日俱增。\n&ensp;&ensp;&ensp;&ensp;其实，应该仔细掂量一下自己，你是否真是金子？是真金，手中要有绝活，才能上要有过人之处才行。一句话：真金是要靠实力来证明的，只有先把自己的本领修炼好了，才有资格考虑伯乐的事情\n&ensp;&ensp;&ensp;&ensp;每颗珍珠原本都是一粒沙子，但并不是每一粒沙子都能成为一颗珍珠。\n&ensp;&ensp;&ensp;&ensp;想要卓尔不群，就要有鹤立鸡群的资本。忍受不了打击和挫折，承受不住忽视和平淡，就很难达到辉煌。年轻人要想让自己得到重用，取得成功，就必须把自己从一粒沙子变成一颗价值连城的珍珠。\n&ensp;&ensp;&ensp;&ensp;天有下雨与日出，人生高峰与低谷。\n&ensp;&ensp;&ensp;&ensp;莫为浮云遮望眼，风物长宜放眼量。\n&ensp;&ensp;&ensp;&ensp;只要拂去阴霾，就能亮出朗朗晴空。如果你在工作上有些不如意，要相信自己不会一直处于人生的低谷期，总有一天能冲破重重云层。告诉自己：我并没有失败，只是暂时没有成功！只要在内心点亮一盏希望之灯，一定能驱散黑暗中的阴霾，迎来光明。的确，论资历，他们是不折不扣的职场菜鸟，业务涉及不深，人脉一穷二白，在工作中经常碰壁。他们的压力并不一定都像千钧大石，而是像大雨来临前的天色，灰色低沉， 明明有空间，却被灰色填满每个缝隙，只能等待大雨倾盆之后的晴空。\n&ensp;&ensp;&ensp;&ensp;“起得比鸡早，睡得比狗晚，干得比驴多，吃得比猪差”这是很多刚刚毕业的人喜欢用来调侃自己生活状态的话。虽然有点儿夸张，但是，他们中的很多人的确一直都被灰色心情所笼罩—心里永远是多云转阴。记得有位哲人曾说：”我们的痛苦不是问题本身带来的，而是我们对这些问题的看法产生的”换个角度看人生，是一种突破、一种解脱、一种超越、一种高层次 的淡泊与宁静，从而获得自由自在的快乐。\n&ensp;&ensp;&ensp;&ensp;一位哲人说：”人 生就是一连串的抉择，每个人的前途与命运，完全把握在自己手中，只要努力，终会有成。”就业也好，择业也罢，创业亦如此，只要 奋发努力，都会成功。你是不是准备把生命的承诺全部都交给别人？\n&ensp;&ensp;&ensp;&ensp;毕业后这5年，是改变自己命运的黄金时期。在最能决定自己命运时，如果还不把握，那你还要等到什么时候呢？我的人生我做主，命运由 己不由人。\n&ensp;&ensp;&ensp;&ensp;不要活在别人的嘴里，不要活在别人的眼 里，而是把命运握在自己手里。\n&ensp;&ensp;&ensp;&ensp;别说你没有背景，自己就是最大的背景。美国作家杰 克·凯鲁亚克说过一句话：”我还年轻，我渴望上路。”在人生的旅途中， 我们永远都是年轻人，每天都应该满怀渴望。每个人的潜能都是无限的，关键是要发现自己的潜能和正确认识自己的才能，并找到一个能充分发挥潜能的舞台，而不 能只为舞台的不合适感到不快。要客观公正地看待自己的能力，结合自己的实际情况和爱好冷静选择，尽可能到最需要自己、最适合自己的地方。\n&ensp;&ensp;&ensp;&ensp;在人力资源管理界，特别流行一个说法，即”骑 马，牵牛，赶猪，打狗”理论：人品很好，能力又很强的，是千里马，我们要骑着他；人品很好但能力普通的，是老黄牛，我们要牵着 他；人品、能力皆普通的，就是”猪”，我们要赶走他；人品很差能力很强的，那是”狗”， 我们要打击他。\n&ensp;&ensp;&ensp;&ensp;我想，刚刚毕业几年的你，一样胸怀大志，一样想成为一匹被人赏识、 驰骋沙场的千里马吧？那么，就好好沉淀下来。低就一层不等于低人一等，今日的俯低是为了明天的高就。所谓生命的价值，就是我们的存在对别人有价值。能被人 利用是一件好事，无人问津才是真正的悲哀！能干工作、干好工作是职场生存的基本保障。\n&ensp;&ensp;&ensp;&ensp;任何人做工作的前提条件都是他的能力能够胜任这项工作。能干是合 格员工最基本的标准，肯干则是一种态度。一个职位有很多人都能胜任，都有干好这份工作的基本能力，然而，能否把工作做得更好一些，就要看是否具有踏实肯 干、苦于钻研的工作态度了。\n&ensp;&ensp;&ensp;&ensp;在能干的基础上踏实肯干。\n&ensp;&ensp;&ensp;&ensp;工作中，活干 得比别人多，你觉得吃亏；钱拿得比别人少，你觉得吃亏；经常加班加点，你觉得吃亏……其实，没必要这样计较，吃亏不是灾难，不 是失败，吃亏也是一种生活哲学。现在吃点儿小亏，为成功铺就道路，也许在未来的某个时刻，你的大福突然就来了。能吃亏是做人的一种境界，是处世的一 种睿智。\n&ensp;&ensp;&ensp;&ensp;在工作中并不是多做事或多帮别人干点儿活就是吃亏。如果领导让你 加加班、赶赶任务，别以为自己吃了大亏，反而应该感到庆幸，因为领导只叫了你，而没叫其他人，说明他信任你、赏识你。吃亏是一种贡献，你贡献得越多，得到 的回报也就越多。乐于加班，就是这样的一种吃亏。\n&ensp;&ensp;&ensp;&ensp;舍得舍得，有舍才有得；学会在适当时吃 些亏的人绝对不是弱智，而是大智。\n&ensp;&ensp;&ensp;&ensp;给别人留余地就是给自己留余地，予人方便就是予己方便，善待别人就是善待自己。\n&ensp;&ensp;&ensp;&ensp;傻人有傻福，因为傻人没有心计。和这样的人在一起，身心放松，没有太多警惕，就能相互靠近。傻在很多时候意味着执着和忠贞，也意味着宽厚和诚实，让人不知不觉站到他一边。傻人无意中得到的，比聪明人费尽心机得到的还多。毕业这几年，你的天空中只飘着几片雪花，这样你就满足了吗？成功需要坚持与积累，与其专注于搜集雪花，不如省下力气去滚雪球。巴菲特说：”人生就像滚雪球，最重要的是发现很湿的雪和很长的坡。”让自己沉淀下来，学着发现”很湿的雪”，努力寻找”很长的坡”。 记住：散落的雪花会很快融化，化为乌有，只有雪球才更实在，才能长久。\n&ensp;&ensp;&ensp;&ensp;在毕业这几年里，你要是能做到比别人多付出一分努力，就意味着比别人多积累一分资本，就比别人多一次成功的机会。\n&ensp;&ensp;&ensp;&ensp;什么是职业化呢？职业化就是工作状态的标准化、规范化、制度化，即在合适的时间、合适的地点用合适的方式说合适的话、做合适的事，使知识、技能、观念、思 维、态度、心理等符合职业规范和标准。”在每个行业里，都有很多出色的人才，他们之所以能存在，是因为比别人更努力、更智慧、 更成熟。但是，最重要的是，他们比一般人更加职业化！这就是为什么我现在能当你老板的原因。一个人仅仅专业化是不够的，只有职业化的人才能飞在别人前面， 让人难以超越！”不要以为我们现在已经生存得很安稳了。对于毕业5年的人来讲，一定要认清即将面临的五大挑战。\n&ensp;&ensp;&ensp;&ensp;一、赡养父母。\n&ensp;&ensp;&ensp;&ensp;二、结婚生子。\n&ensp;&ensp;&ensp;&ensp;三、 升职加薪。\n&ensp;&ensp;&ensp;&ensp;四、工作压力。\n&ensp;&ensp;&ensp;&ensp;五、生活质量。\n&ensp;&ensp;&ensp;&ensp;有的人为生存 而雀跃，目光总是停在身后，三天打鱼两天晒网，有始无终。\n&ensp;&ensp;&ensp;&ensp;有的人为发展而奋斗，目光总是盯在正前方，每天进步一点点，坚持不懈。\n&ensp;&ensp;&ensp;&ensp;毕业这几年，不能没有追求和探索，不能没有理想和目标。人生如逆水行舟，不进则退。甘于现状的生活就是不再前行的船，再也无法追上时代前进的步伐。一定要抓紧每一秒钟的时间来学习，要明白学习不是学生的专利。小聪明的人最得意的是：自己做过什么？大智慧的人最渴望的是：自己还要做什么？\n&ensp;&ensp;&ensp;&ensp;小聪明是战术，大智慧是战略；小聪明看到的是芝麻，大智慧看到的是西瓜。\n&ensp;&ensp;&ensp;&ensp;在这个世界上，既有大人物，也有小角色，大人物有大人物的活 法，小人物有小人物的潇洒，每个人都有自己的生活方式，谁也勉强不了谁。但是，小聪明只能有小成绩和小视野，大智慧才能有大成就和大境界。小企业看老板， 中企业看制度，大企业看文化。\n&ensp;&ensp;&ensp;&ensp;小公司与大企业都有生存之道，没有好坏之分，但对一 个人不同阶段的影响会不同。\n&ensp;&ensp;&ensp;&ensp;小公司肯定想要发展为大企业，这是一种目 标，年轻人也要给自己的职业生涯制定目标。毕业几年的你，是否经常会怯场或者是感到没有底气？居安思危绝对不是危言耸听！此刻打盹，你将做梦；此刻学习， 你将圆梦。在竞争激烈的人生战场上，打盹的都是输家！\n&ensp;&ensp;&ensp;&ensp;每个人在年轻的时候似乎都豪情 万丈，什么都不怕，可是随着年龄的增长，每天想着房子、工作、养家糊口这些俗事儿，再也没有年轻时那种敢于”上天探星、下海捞 月”的勇气了。是我们改变了生活，还是生活改变了我们？我们的思想越来越复杂，因为有了越来越多的舍不得、越来越多的顾虑，我们总是在徘徊、总是在犹豫。毕业开始一两年，生活的重担会压得我们喘不过气来，挫折和障碍堵住四面八方的通口，我们往往在压迫得自己发挥出潜能后，才能杀出重围，找到出路。可是两三年后，身上的重担开始减轻，工作开始一帆风顺，我们就松懈了下来，渐渐忘记了潜在的危险。直到有一天危机突然降临，我们在手足无措中被击败…毕业这几年，仍然处于危险期，一定要有居安思危的意识，好好打拼，这样才能有一个真正的安全人生！\n&ensp;&ensp;&ensp;&ensp;生于忧患，死于安乐。如果你想跨越自己目前的成就，就不能画地自限，而是要勇于接受挑 战。对畏畏缩缩的人来说，真正的危险正在于不敢冒险！\n&ensp;&ensp;&ensp;&ensp;年轻人在社会的重压下，适应 能力已变得越来越强，只是他们不自觉地习惯被环境推着走。他们不敢冒险，怕给自己带来终身的遗憾，于是告慰自己：”我对得起自 己、对得起家人，因为我已竭尽全力。”其实，人只有不断挑战和突破才能逐渐成长。长期固守于已有的安全感中，就会像温水里的青 蛙一样，最终失去跳跃的本能。\n&ensp;&ensp;&ensp;&ensp;经历了这几年社会生活，你应该明白：这个世界上有富也有贫，有阴也有亮， 有丑也有美，到底看到什么，取决于自己是积极还是消极。在年轻时学会勤勉地工作，用一种光明的思维对待生活，那么，只要张开手掌，你就会发现，里面有一片灿烂的人生。\n&ensp;&ensp;&ensp;&ensp;把感恩刻在石头上，深深地感谢别人帮助过你，永远铭记，这是人生应有的一种境界；把仇恨写在沙滩上，淡淡忘掉别人伤害过你，学会宽容，让所有的怨恨随着潮水一去不复 返，这也是一种人生境界。\n&ensp;&ensp;&ensp;&ensp;学会倒出水，才能装下更多的水。从毕业那天开始，学会把每天都当成一个新的起点，每一次工作都从零开始。如果你懂得把”归零”当成一种生活 的常态，当成一种优秀的延续，当成一种时刻要做的事情，那么，经过短短几年，你就可以完成自己职业生涯的正确规划与全面超越。\n&ensp;&ensp;&ensp;&ensp;在职业起步的短短道路上，想要得到更好、更快、更有益的成长，就必须以归零思维来面对这个世界。 不要以大学里的清高来标榜自己，不要觉得自己特别优秀，而是要把自己的姿态放下，把自己的身架放低，让自己沉淀下来，抱着学习的态度去适应环境、接受挑 战。放下”身段”才能提高身价，暂时的俯低终会促成未来的高就。\n&ensp;&ensp;&ensp;&ensp;年轻人从校园或者从一个环境进入一个新环境，就要勇于将原来环境里熟悉、习惯、喜欢的东西放下，然后从 零开始。我们想在职场上获得成功，首先就要培养适应力。从自然人转化为单位人是融入职场的基本条件。一个人起点低并不可怕，怕的是境界低。越计较自我，便越没有发展前景；相反，越是主动付出，那么他就越会快速发展。很多今天取得一定成就的人，在职业生涯的初期都是从零开始，把自己沉淀再沉淀、倒空再倒空、 归零再归零，正因为这样，他们的人生才一路高歌，一路飞扬。\n&ensp;&ensp;&ensp;&ensp;在毕业这 几年里，我们要让过去归零，才不会成为职场上那只背着重壳爬行的蜗牛，才能像天空中的鸟儿那样轻盈地飞翔。请好好品味一下杰克·韦 尔奇说过的一句话：”纠正自己的行为，认清自己，从零开始，你将重新走上职场坦途。”　吐故才能纳 新，心静才能身凉，有舍才能有得，杯空才能水满，放下才能超越。\n&ensp;&ensp;&ensp;&ensp;归零思维五大表现：心中无我，眼中无钱，念中无他，朝中无人，学无止境。\n&ensp;&ensp;&ensp;&ensp;年轻人难免 带着几分傲气，认为自己无所不能、所向披靡，其实不然，初入职场的新人还是个”婴儿”，正处在从爬 到走的成长阶段。在毕业这几年里，一定要让自己逐步培养起学徒思维、海绵思维、空杯思维，具有这样思维的人心灵总是敞开的，能随时接受启示和一切能激发灵 感的东西，他们时刻都能感受到成功女神的召唤。\n","slug":"graduation-you-must-strive","published":1,"updated":"2016-12-12T10:23:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc2q000a2u6bj3gksge8","content":"<p>&ensp;&ensp;&ensp;&ensp;有人工作， 有人继续上学，大家千万不要错过这篇文章，能看到这篇文章也是一种幸运，真的受益匪浅，对我有很大启迪，这篇文章将会改变我的一生，真的太好了，希望与有 缘人分享，也希望对有缘人有所帮助！看完之后有种“相见恨晚”的感觉，特别激动，希望大家好好的珍 藏这篇文章，相信多年以后，再来看这篇文章，一定有不同的感觉。<br>&ensp;&ensp;&ensp;&ensp;一位知名的成功人士曾说过：”我觉得有两种人不要跟别人争利益和价值回报。第一种人就是刚刚进入企业的人，头5年千万不要说你能不能多给我一点儿工资，最重要的是能在企业里学到什么，对发展是不是有利……”<a id=\"more\"></a><br>&ensp;&ensp;&ensp;&ensp;人总是从平坦中获得的教益少，从磨难中获得的教益多；从平坦中获得的教益浅，从磨难中获得的教益深。一个人在年轻时经历磨难，如能正确视之，冲出黑暗，那就是一个值得敬慕的人。最要紧的是先练好内功，毕业后这5年就是练内功的最佳时期，练好内功，才有可能在未来攀得更高。<br>&ensp;&ensp;&ensp;&ensp;出路在哪里？出路在于思路！<br>&ensp;&ensp;&ensp;&ensp;其实，没有钱、没有经验、没有阅历、没有社会关系，这些都不可怕。没有钱，可以通过辛勤劳动去赚；没有经验，可以通过实践操作去总结；没有阅历，可以一步一步去积累；没有社会关系，可以一点一点去编织。但是，没有梦想、没有思路才是最可怕的，才让人感到恐惧，很想 逃避!<br>&ensp;&ensp;&ensp;&ensp;人必须有一个正确的方向。无论你多么 意气风发，无论你是多么足智多谋，无论你花费了多大的心血，如果没有一个明确的方向，就会过得很茫然，渐渐就丧失了斗志，忘却了最初的梦想，就会走上弯路 甚至不归路，枉费了自己的聪明才智，误了自己的青春年华。<br>&ensp;&ensp;&ensp;&ensp;荷马史诗《奥德赛》中有 一句至理名言：”没有比漫无目的地徘徊更令人无法忍受的了。”毕业后这5年 里的迷茫，会造成10年后的恐慌，20年后的挣扎，甚至一辈子的平庸。如果不能在毕业这5年 尽快冲出困惑、走出迷雾，我们实在是无颜面对10年后、20年后的自己。毕业这5年 里，我们既有很多的不确定，也有很多的可能性。<br>&ensp;&ensp;&ensp;&ensp;毕业这5年里，我们既有很多的待定，也有很多的决定。<br>&ensp;&ensp;&ensp;&ensp;迷茫与困惑谁都会经历，恐 惧与逃避谁都曾经有过，但不要把迷茫与困惑当作可以自我放弃、甘于平庸的借口，更不要成为自怨自艾、祭奠失意的苦酒。生命需要自己去承担，命运更需要自己 去把握。在毕业这5年里，越早找到方向，越早走出困惑，就越容易在人生道路上取得成就、创造精彩。无头苍蝇找不到方向，才会四 处碰壁；一个人找不到出路，才会迷茫、恐惧。<br>&ensp;&ensp;&ensp;&ensp;生活中，面对困境，我们常常会有走投 无路的感觉。不要气馁，坚持下去，要相信年轻的人生没有绝路，困境在前方，希望在拐角。只要我们有了正确的思路，就一定能少走弯路，找到出路！<br>&ensp;&ensp;&ensp;&ensp;成功的人不是赢在起点，而是赢在转折点。<br>&ensp;&ensp;&ensp;&ensp;不少刚刚毕业的年轻人，总是奢望马上就能找到自己理想中的工作。然而，很多好工作是无法等来的，你必须选择一份工作 作为历练。职业旅程中的第一份工作，无疑是踏入社会这所大学的起点。也许你找了一份差强人意的工作，那么从这里出发，好好地沉淀自己，从这份工作中汲取到 有价值的营养，厚积薄发。千里之行，始于足下，只要出发，就有希望到达终点。<br>&ensp;&ensp;&ensp;&ensp;起点 可以相同，但是选择了不同的拐点，终点就会大大不同！<br>&ensp;&ensp;&ensp;&ensp;毕业这几年，我们的生活、感 情、职业等都存在很多不确定的因素，未来也充满了各种可能。这个时候，必须学会选择，懂得放弃，给自己一个明确的定位，使自己稳定下来。如果你不主动定 位，就会被别人和社会”定型”！<br>&ensp;&ensp;&ensp;&ensp;可以这么说：一个人在毕业这5年培养起来的行为习惯，将决定他一生的高度。我们能否成功，在某种程度上取决于自己对自己的评 价，这就是定位。你给自己定位是什么，你就是什么。定位能决定人生，定位能改变命运。丑小鸭变成白天鹅，只要一双翅膀；灰姑娘变成美公主，只要一双水晶 鞋。<br>&ensp;&ensp;&ensp;&ensp;人的命，三分天注定，七分靠打拼，有梦就”会红”， 爱拼才会赢。只要不把自己束缚在心灵的牢笼里，谁也束缚不了你去展翅高飞。<br>&ensp;&ensp;&ensp;&ensp;现实情况远非他们所想的那样。于是，当优越感逐渐转为失落感甚至挫败感时，当由坚信自己是一块”金子”到怀疑自己是一粒”沙子”时，愤怒、迷茫、自卑就开始与日俱增。<br>&ensp;&ensp;&ensp;&ensp;其实，应该仔细掂量一下自己，你是否真是金子？是真金，手中要有绝活，才能上要有过人之处才行。一句话：真金是要靠实力来证明的，只有先把自己的本领修炼好了，才有资格考虑伯乐的事情<br>&ensp;&ensp;&ensp;&ensp;每颗珍珠原本都是一粒沙子，但并不是每一粒沙子都能成为一颗珍珠。<br>&ensp;&ensp;&ensp;&ensp;想要卓尔不群，就要有鹤立鸡群的资本。忍受不了打击和挫折，承受不住忽视和平淡，就很难达到辉煌。年轻人要想让自己得到重用，取得成功，就必须把自己从一粒沙子变成一颗价值连城的珍珠。<br>&ensp;&ensp;&ensp;&ensp;天有下雨与日出，人生高峰与低谷。<br>&ensp;&ensp;&ensp;&ensp;莫为浮云遮望眼，风物长宜放眼量。<br>&ensp;&ensp;&ensp;&ensp;只要拂去阴霾，就能亮出朗朗晴空。如果你在工作上有些不如意，要相信自己不会一直处于人生的低谷期，总有一天能冲破重重云层。告诉自己：我并没有失败，只是暂时没有成功！只要在内心点亮一盏希望之灯，一定能驱散黑暗中的阴霾，迎来光明。的确，论资历，他们是不折不扣的职场菜鸟，业务涉及不深，人脉一穷二白，在工作中经常碰壁。他们的压力并不一定都像千钧大石，而是像大雨来临前的天色，灰色低沉， 明明有空间，却被灰色填满每个缝隙，只能等待大雨倾盆之后的晴空。<br>&ensp;&ensp;&ensp;&ensp;“起得比鸡早，睡得比狗晚，干得比驴多，吃得比猪差”这是很多刚刚毕业的人喜欢用来调侃自己生活状态的话。虽然有点儿夸张，但是，他们中的很多人的确一直都被灰色心情所笼罩—心里永远是多云转阴。记得有位哲人曾说：”我们的痛苦不是问题本身带来的，而是我们对这些问题的看法产生的”换个角度看人生，是一种突破、一种解脱、一种超越、一种高层次 的淡泊与宁静，从而获得自由自在的快乐。<br>&ensp;&ensp;&ensp;&ensp;一位哲人说：”人 生就是一连串的抉择，每个人的前途与命运，完全把握在自己手中，只要努力，终会有成。”就业也好，择业也罢，创业亦如此，只要 奋发努力，都会成功。你是不是准备把生命的承诺全部都交给别人？<br>&ensp;&ensp;&ensp;&ensp;毕业后这5年，是改变自己命运的黄金时期。在最能决定自己命运时，如果还不把握，那你还要等到什么时候呢？我的人生我做主，命运由 己不由人。<br>&ensp;&ensp;&ensp;&ensp;不要活在别人的嘴里，不要活在别人的眼 里，而是把命运握在自己手里。<br>&ensp;&ensp;&ensp;&ensp;别说你没有背景，自己就是最大的背景。美国作家杰 克·凯鲁亚克说过一句话：”我还年轻，我渴望上路。”在人生的旅途中， 我们永远都是年轻人，每天都应该满怀渴望。每个人的潜能都是无限的，关键是要发现自己的潜能和正确认识自己的才能，并找到一个能充分发挥潜能的舞台，而不 能只为舞台的不合适感到不快。要客观公正地看待自己的能力，结合自己的实际情况和爱好冷静选择，尽可能到最需要自己、最适合自己的地方。<br>&ensp;&ensp;&ensp;&ensp;在人力资源管理界，特别流行一个说法，即”骑 马，牵牛，赶猪，打狗”理论：人品很好，能力又很强的，是千里马，我们要骑着他；人品很好但能力普通的，是老黄牛，我们要牵着 他；人品、能力皆普通的，就是”猪”，我们要赶走他；人品很差能力很强的，那是”狗”， 我们要打击他。<br>&ensp;&ensp;&ensp;&ensp;我想，刚刚毕业几年的你，一样胸怀大志，一样想成为一匹被人赏识、 驰骋沙场的千里马吧？那么，就好好沉淀下来。低就一层不等于低人一等，今日的俯低是为了明天的高就。所谓生命的价值，就是我们的存在对别人有价值。能被人 利用是一件好事，无人问津才是真正的悲哀！能干工作、干好工作是职场生存的基本保障。<br>&ensp;&ensp;&ensp;&ensp;任何人做工作的前提条件都是他的能力能够胜任这项工作。能干是合 格员工最基本的标准，肯干则是一种态度。一个职位有很多人都能胜任，都有干好这份工作的基本能力，然而，能否把工作做得更好一些，就要看是否具有踏实肯 干、苦于钻研的工作态度了。<br>&ensp;&ensp;&ensp;&ensp;在能干的基础上踏实肯干。<br>&ensp;&ensp;&ensp;&ensp;工作中，活干 得比别人多，你觉得吃亏；钱拿得比别人少，你觉得吃亏；经常加班加点，你觉得吃亏……其实，没必要这样计较，吃亏不是灾难，不 是失败，吃亏也是一种生活哲学。现在吃点儿小亏，为成功铺就道路，也许在未来的某个时刻，你的大福突然就来了。能吃亏是做人的一种境界，是处世的一 种睿智。<br>&ensp;&ensp;&ensp;&ensp;在工作中并不是多做事或多帮别人干点儿活就是吃亏。如果领导让你 加加班、赶赶任务，别以为自己吃了大亏，反而应该感到庆幸，因为领导只叫了你，而没叫其他人，说明他信任你、赏识你。吃亏是一种贡献，你贡献得越多，得到 的回报也就越多。乐于加班，就是这样的一种吃亏。<br>&ensp;&ensp;&ensp;&ensp;舍得舍得，有舍才有得；学会在适当时吃 些亏的人绝对不是弱智，而是大智。<br>&ensp;&ensp;&ensp;&ensp;给别人留余地就是给自己留余地，予人方便就是予己方便，善待别人就是善待自己。<br>&ensp;&ensp;&ensp;&ensp;傻人有傻福，因为傻人没有心计。和这样的人在一起，身心放松，没有太多警惕，就能相互靠近。傻在很多时候意味着执着和忠贞，也意味着宽厚和诚实，让人不知不觉站到他一边。傻人无意中得到的，比聪明人费尽心机得到的还多。毕业这几年，你的天空中只飘着几片雪花，这样你就满足了吗？成功需要坚持与积累，与其专注于搜集雪花，不如省下力气去滚雪球。巴菲特说：”人生就像滚雪球，最重要的是发现很湿的雪和很长的坡。”让自己沉淀下来，学着发现”很湿的雪”，努力寻找”很长的坡”。 记住：散落的雪花会很快融化，化为乌有，只有雪球才更实在，才能长久。<br>&ensp;&ensp;&ensp;&ensp;在毕业这几年里，你要是能做到比别人多付出一分努力，就意味着比别人多积累一分资本，就比别人多一次成功的机会。<br>&ensp;&ensp;&ensp;&ensp;什么是职业化呢？职业化就是工作状态的标准化、规范化、制度化，即在合适的时间、合适的地点用合适的方式说合适的话、做合适的事，使知识、技能、观念、思 维、态度、心理等符合职业规范和标准。”在每个行业里，都有很多出色的人才，他们之所以能存在，是因为比别人更努力、更智慧、 更成熟。但是，最重要的是，他们比一般人更加职业化！这就是为什么我现在能当你老板的原因。一个人仅仅专业化是不够的，只有职业化的人才能飞在别人前面， 让人难以超越！”不要以为我们现在已经生存得很安稳了。对于毕业5年的人来讲，一定要认清即将面临的五大挑战。<br>&ensp;&ensp;&ensp;&ensp;一、赡养父母。<br>&ensp;&ensp;&ensp;&ensp;二、结婚生子。<br>&ensp;&ensp;&ensp;&ensp;三、 升职加薪。<br>&ensp;&ensp;&ensp;&ensp;四、工作压力。<br>&ensp;&ensp;&ensp;&ensp;五、生活质量。<br>&ensp;&ensp;&ensp;&ensp;有的人为生存 而雀跃，目光总是停在身后，三天打鱼两天晒网，有始无终。<br>&ensp;&ensp;&ensp;&ensp;有的人为发展而奋斗，目光总是盯在正前方，每天进步一点点，坚持不懈。<br>&ensp;&ensp;&ensp;&ensp;毕业这几年，不能没有追求和探索，不能没有理想和目标。人生如逆水行舟，不进则退。甘于现状的生活就是不再前行的船，再也无法追上时代前进的步伐。一定要抓紧每一秒钟的时间来学习，要明白学习不是学生的专利。小聪明的人最得意的是：自己做过什么？大智慧的人最渴望的是：自己还要做什么？<br>&ensp;&ensp;&ensp;&ensp;小聪明是战术，大智慧是战略；小聪明看到的是芝麻，大智慧看到的是西瓜。<br>&ensp;&ensp;&ensp;&ensp;在这个世界上，既有大人物，也有小角色，大人物有大人物的活 法，小人物有小人物的潇洒，每个人都有自己的生活方式，谁也勉强不了谁。但是，小聪明只能有小成绩和小视野，大智慧才能有大成就和大境界。小企业看老板， 中企业看制度，大企业看文化。<br>&ensp;&ensp;&ensp;&ensp;小公司与大企业都有生存之道，没有好坏之分，但对一 个人不同阶段的影响会不同。<br>&ensp;&ensp;&ensp;&ensp;小公司肯定想要发展为大企业，这是一种目 标，年轻人也要给自己的职业生涯制定目标。毕业几年的你，是否经常会怯场或者是感到没有底气？居安思危绝对不是危言耸听！此刻打盹，你将做梦；此刻学习， 你将圆梦。在竞争激烈的人生战场上，打盹的都是输家！<br>&ensp;&ensp;&ensp;&ensp;每个人在年轻的时候似乎都豪情 万丈，什么都不怕，可是随着年龄的增长，每天想着房子、工作、养家糊口这些俗事儿，再也没有年轻时那种敢于”上天探星、下海捞 月”的勇气了。是我们改变了生活，还是生活改变了我们？我们的思想越来越复杂，因为有了越来越多的舍不得、越来越多的顾虑，我们总是在徘徊、总是在犹豫。毕业开始一两年，生活的重担会压得我们喘不过气来，挫折和障碍堵住四面八方的通口，我们往往在压迫得自己发挥出潜能后，才能杀出重围，找到出路。可是两三年后，身上的重担开始减轻，工作开始一帆风顺，我们就松懈了下来，渐渐忘记了潜在的危险。直到有一天危机突然降临，我们在手足无措中被击败…毕业这几年，仍然处于危险期，一定要有居安思危的意识，好好打拼，这样才能有一个真正的安全人生！<br>&ensp;&ensp;&ensp;&ensp;生于忧患，死于安乐。如果你想跨越自己目前的成就，就不能画地自限，而是要勇于接受挑 战。对畏畏缩缩的人来说，真正的危险正在于不敢冒险！<br>&ensp;&ensp;&ensp;&ensp;年轻人在社会的重压下，适应 能力已变得越来越强，只是他们不自觉地习惯被环境推着走。他们不敢冒险，怕给自己带来终身的遗憾，于是告慰自己：”我对得起自 己、对得起家人，因为我已竭尽全力。”其实，人只有不断挑战和突破才能逐渐成长。长期固守于已有的安全感中，就会像温水里的青 蛙一样，最终失去跳跃的本能。<br>&ensp;&ensp;&ensp;&ensp;经历了这几年社会生活，你应该明白：这个世界上有富也有贫，有阴也有亮， 有丑也有美，到底看到什么，取决于自己是积极还是消极。在年轻时学会勤勉地工作，用一种光明的思维对待生活，那么，只要张开手掌，你就会发现，里面有一片灿烂的人生。<br>&ensp;&ensp;&ensp;&ensp;把感恩刻在石头上，深深地感谢别人帮助过你，永远铭记，这是人生应有的一种境界；把仇恨写在沙滩上，淡淡忘掉别人伤害过你，学会宽容，让所有的怨恨随着潮水一去不复 返，这也是一种人生境界。<br>&ensp;&ensp;&ensp;&ensp;学会倒出水，才能装下更多的水。从毕业那天开始，学会把每天都当成一个新的起点，每一次工作都从零开始。如果你懂得把”归零”当成一种生活 的常态，当成一种优秀的延续，当成一种时刻要做的事情，那么，经过短短几年，你就可以完成自己职业生涯的正确规划与全面超越。<br>&ensp;&ensp;&ensp;&ensp;在职业起步的短短道路上，想要得到更好、更快、更有益的成长，就必须以归零思维来面对这个世界。 不要以大学里的清高来标榜自己，不要觉得自己特别优秀，而是要把自己的姿态放下，把自己的身架放低，让自己沉淀下来，抱着学习的态度去适应环境、接受挑 战。放下”身段”才能提高身价，暂时的俯低终会促成未来的高就。<br>&ensp;&ensp;&ensp;&ensp;年轻人从校园或者从一个环境进入一个新环境，就要勇于将原来环境里熟悉、习惯、喜欢的东西放下，然后从 零开始。我们想在职场上获得成功，首先就要培养适应力。从自然人转化为单位人是融入职场的基本条件。一个人起点低并不可怕，怕的是境界低。越计较自我，便越没有发展前景；相反，越是主动付出，那么他就越会快速发展。很多今天取得一定成就的人，在职业生涯的初期都是从零开始，把自己沉淀再沉淀、倒空再倒空、 归零再归零，正因为这样，他们的人生才一路高歌，一路飞扬。<br>&ensp;&ensp;&ensp;&ensp;在毕业这 几年里，我们要让过去归零，才不会成为职场上那只背着重壳爬行的蜗牛，才能像天空中的鸟儿那样轻盈地飞翔。请好好品味一下杰克·韦 尔奇说过的一句话：”纠正自己的行为，认清自己，从零开始，你将重新走上职场坦途。”　吐故才能纳 新，心静才能身凉，有舍才能有得，杯空才能水满，放下才能超越。<br>&ensp;&ensp;&ensp;&ensp;归零思维五大表现：心中无我，眼中无钱，念中无他，朝中无人，学无止境。<br>&ensp;&ensp;&ensp;&ensp;年轻人难免 带着几分傲气，认为自己无所不能、所向披靡，其实不然，初入职场的新人还是个”婴儿”，正处在从爬 到走的成长阶段。在毕业这几年里，一定要让自己逐步培养起学徒思维、海绵思维、空杯思维，具有这样思维的人心灵总是敞开的，能随时接受启示和一切能激发灵 感的东西，他们时刻都能感受到成功女神的召唤。</p>\n","excerpt":"<p>&ensp;&ensp;&ensp;&ensp;有人工作， 有人继续上学，大家千万不要错过这篇文章，能看到这篇文章也是一种幸运，真的受益匪浅，对我有很大启迪，这篇文章将会改变我的一生，真的太好了，希望与有 缘人分享，也希望对有缘人有所帮助！看完之后有种“相见恨晚”的感觉，特别激动，希望大家好好的珍 藏这篇文章，相信多年以后，再来看这篇文章，一定有不同的感觉。<br>&ensp;&ensp;&ensp;&ensp;一位知名的成功人士曾说过：”我觉得有两种人不要跟别人争利益和价值回报。第一种人就是刚刚进入企业的人，头5年千万不要说你能不能多给我一点儿工资，最重要的是能在企业里学到什么，对发展是不是有利……”","more":"<br>&ensp;&ensp;&ensp;&ensp;人总是从平坦中获得的教益少，从磨难中获得的教益多；从平坦中获得的教益浅，从磨难中获得的教益深。一个人在年轻时经历磨难，如能正确视之，冲出黑暗，那就是一个值得敬慕的人。最要紧的是先练好内功，毕业后这5年就是练内功的最佳时期，练好内功，才有可能在未来攀得更高。<br>&ensp;&ensp;&ensp;&ensp;出路在哪里？出路在于思路！<br>&ensp;&ensp;&ensp;&ensp;其实，没有钱、没有经验、没有阅历、没有社会关系，这些都不可怕。没有钱，可以通过辛勤劳动去赚；没有经验，可以通过实践操作去总结；没有阅历，可以一步一步去积累；没有社会关系，可以一点一点去编织。但是，没有梦想、没有思路才是最可怕的，才让人感到恐惧，很想 逃避!<br>&ensp;&ensp;&ensp;&ensp;人必须有一个正确的方向。无论你多么 意气风发，无论你是多么足智多谋，无论你花费了多大的心血，如果没有一个明确的方向，就会过得很茫然，渐渐就丧失了斗志，忘却了最初的梦想，就会走上弯路 甚至不归路，枉费了自己的聪明才智，误了自己的青春年华。<br>&ensp;&ensp;&ensp;&ensp;荷马史诗《奥德赛》中有 一句至理名言：”没有比漫无目的地徘徊更令人无法忍受的了。”毕业后这5年 里的迷茫，会造成10年后的恐慌，20年后的挣扎，甚至一辈子的平庸。如果不能在毕业这5年 尽快冲出困惑、走出迷雾，我们实在是无颜面对10年后、20年后的自己。毕业这5年 里，我们既有很多的不确定，也有很多的可能性。<br>&ensp;&ensp;&ensp;&ensp;毕业这5年里，我们既有很多的待定，也有很多的决定。<br>&ensp;&ensp;&ensp;&ensp;迷茫与困惑谁都会经历，恐 惧与逃避谁都曾经有过，但不要把迷茫与困惑当作可以自我放弃、甘于平庸的借口，更不要成为自怨自艾、祭奠失意的苦酒。生命需要自己去承担，命运更需要自己 去把握。在毕业这5年里，越早找到方向，越早走出困惑，就越容易在人生道路上取得成就、创造精彩。无头苍蝇找不到方向，才会四 处碰壁；一个人找不到出路，才会迷茫、恐惧。<br>&ensp;&ensp;&ensp;&ensp;生活中，面对困境，我们常常会有走投 无路的感觉。不要气馁，坚持下去，要相信年轻的人生没有绝路，困境在前方，希望在拐角。只要我们有了正确的思路，就一定能少走弯路，找到出路！<br>&ensp;&ensp;&ensp;&ensp;成功的人不是赢在起点，而是赢在转折点。<br>&ensp;&ensp;&ensp;&ensp;不少刚刚毕业的年轻人，总是奢望马上就能找到自己理想中的工作。然而，很多好工作是无法等来的，你必须选择一份工作 作为历练。职业旅程中的第一份工作，无疑是踏入社会这所大学的起点。也许你找了一份差强人意的工作，那么从这里出发，好好地沉淀自己，从这份工作中汲取到 有价值的营养，厚积薄发。千里之行，始于足下，只要出发，就有希望到达终点。<br>&ensp;&ensp;&ensp;&ensp;起点 可以相同，但是选择了不同的拐点，终点就会大大不同！<br>&ensp;&ensp;&ensp;&ensp;毕业这几年，我们的生活、感 情、职业等都存在很多不确定的因素，未来也充满了各种可能。这个时候，必须学会选择，懂得放弃，给自己一个明确的定位，使自己稳定下来。如果你不主动定 位，就会被别人和社会”定型”！<br>&ensp;&ensp;&ensp;&ensp;可以这么说：一个人在毕业这5年培养起来的行为习惯，将决定他一生的高度。我们能否成功，在某种程度上取决于自己对自己的评 价，这就是定位。你给自己定位是什么，你就是什么。定位能决定人生，定位能改变命运。丑小鸭变成白天鹅，只要一双翅膀；灰姑娘变成美公主，只要一双水晶 鞋。<br>&ensp;&ensp;&ensp;&ensp;人的命，三分天注定，七分靠打拼，有梦就”会红”， 爱拼才会赢。只要不把自己束缚在心灵的牢笼里，谁也束缚不了你去展翅高飞。<br>&ensp;&ensp;&ensp;&ensp;现实情况远非他们所想的那样。于是，当优越感逐渐转为失落感甚至挫败感时，当由坚信自己是一块”金子”到怀疑自己是一粒”沙子”时，愤怒、迷茫、自卑就开始与日俱增。<br>&ensp;&ensp;&ensp;&ensp;其实，应该仔细掂量一下自己，你是否真是金子？是真金，手中要有绝活，才能上要有过人之处才行。一句话：真金是要靠实力来证明的，只有先把自己的本领修炼好了，才有资格考虑伯乐的事情<br>&ensp;&ensp;&ensp;&ensp;每颗珍珠原本都是一粒沙子，但并不是每一粒沙子都能成为一颗珍珠。<br>&ensp;&ensp;&ensp;&ensp;想要卓尔不群，就要有鹤立鸡群的资本。忍受不了打击和挫折，承受不住忽视和平淡，就很难达到辉煌。年轻人要想让自己得到重用，取得成功，就必须把自己从一粒沙子变成一颗价值连城的珍珠。<br>&ensp;&ensp;&ensp;&ensp;天有下雨与日出，人生高峰与低谷。<br>&ensp;&ensp;&ensp;&ensp;莫为浮云遮望眼，风物长宜放眼量。<br>&ensp;&ensp;&ensp;&ensp;只要拂去阴霾，就能亮出朗朗晴空。如果你在工作上有些不如意，要相信自己不会一直处于人生的低谷期，总有一天能冲破重重云层。告诉自己：我并没有失败，只是暂时没有成功！只要在内心点亮一盏希望之灯，一定能驱散黑暗中的阴霾，迎来光明。的确，论资历，他们是不折不扣的职场菜鸟，业务涉及不深，人脉一穷二白，在工作中经常碰壁。他们的压力并不一定都像千钧大石，而是像大雨来临前的天色，灰色低沉， 明明有空间，却被灰色填满每个缝隙，只能等待大雨倾盆之后的晴空。<br>&ensp;&ensp;&ensp;&ensp;“起得比鸡早，睡得比狗晚，干得比驴多，吃得比猪差”这是很多刚刚毕业的人喜欢用来调侃自己生活状态的话。虽然有点儿夸张，但是，他们中的很多人的确一直都被灰色心情所笼罩—心里永远是多云转阴。记得有位哲人曾说：”我们的痛苦不是问题本身带来的，而是我们对这些问题的看法产生的”换个角度看人生，是一种突破、一种解脱、一种超越、一种高层次 的淡泊与宁静，从而获得自由自在的快乐。<br>&ensp;&ensp;&ensp;&ensp;一位哲人说：”人 生就是一连串的抉择，每个人的前途与命运，完全把握在自己手中，只要努力，终会有成。”就业也好，择业也罢，创业亦如此，只要 奋发努力，都会成功。你是不是准备把生命的承诺全部都交给别人？<br>&ensp;&ensp;&ensp;&ensp;毕业后这5年，是改变自己命运的黄金时期。在最能决定自己命运时，如果还不把握，那你还要等到什么时候呢？我的人生我做主，命运由 己不由人。<br>&ensp;&ensp;&ensp;&ensp;不要活在别人的嘴里，不要活在别人的眼 里，而是把命运握在自己手里。<br>&ensp;&ensp;&ensp;&ensp;别说你没有背景，自己就是最大的背景。美国作家杰 克·凯鲁亚克说过一句话：”我还年轻，我渴望上路。”在人生的旅途中， 我们永远都是年轻人，每天都应该满怀渴望。每个人的潜能都是无限的，关键是要发现自己的潜能和正确认识自己的才能，并找到一个能充分发挥潜能的舞台，而不 能只为舞台的不合适感到不快。要客观公正地看待自己的能力，结合自己的实际情况和爱好冷静选择，尽可能到最需要自己、最适合自己的地方。<br>&ensp;&ensp;&ensp;&ensp;在人力资源管理界，特别流行一个说法，即”骑 马，牵牛，赶猪，打狗”理论：人品很好，能力又很强的，是千里马，我们要骑着他；人品很好但能力普通的，是老黄牛，我们要牵着 他；人品、能力皆普通的，就是”猪”，我们要赶走他；人品很差能力很强的，那是”狗”， 我们要打击他。<br>&ensp;&ensp;&ensp;&ensp;我想，刚刚毕业几年的你，一样胸怀大志，一样想成为一匹被人赏识、 驰骋沙场的千里马吧？那么，就好好沉淀下来。低就一层不等于低人一等，今日的俯低是为了明天的高就。所谓生命的价值，就是我们的存在对别人有价值。能被人 利用是一件好事，无人问津才是真正的悲哀！能干工作、干好工作是职场生存的基本保障。<br>&ensp;&ensp;&ensp;&ensp;任何人做工作的前提条件都是他的能力能够胜任这项工作。能干是合 格员工最基本的标准，肯干则是一种态度。一个职位有很多人都能胜任，都有干好这份工作的基本能力，然而，能否把工作做得更好一些，就要看是否具有踏实肯 干、苦于钻研的工作态度了。<br>&ensp;&ensp;&ensp;&ensp;在能干的基础上踏实肯干。<br>&ensp;&ensp;&ensp;&ensp;工作中，活干 得比别人多，你觉得吃亏；钱拿得比别人少，你觉得吃亏；经常加班加点，你觉得吃亏……其实，没必要这样计较，吃亏不是灾难，不 是失败，吃亏也是一种生活哲学。现在吃点儿小亏，为成功铺就道路，也许在未来的某个时刻，你的大福突然就来了。能吃亏是做人的一种境界，是处世的一 种睿智。<br>&ensp;&ensp;&ensp;&ensp;在工作中并不是多做事或多帮别人干点儿活就是吃亏。如果领导让你 加加班、赶赶任务，别以为自己吃了大亏，反而应该感到庆幸，因为领导只叫了你，而没叫其他人，说明他信任你、赏识你。吃亏是一种贡献，你贡献得越多，得到 的回报也就越多。乐于加班，就是这样的一种吃亏。<br>&ensp;&ensp;&ensp;&ensp;舍得舍得，有舍才有得；学会在适当时吃 些亏的人绝对不是弱智，而是大智。<br>&ensp;&ensp;&ensp;&ensp;给别人留余地就是给自己留余地，予人方便就是予己方便，善待别人就是善待自己。<br>&ensp;&ensp;&ensp;&ensp;傻人有傻福，因为傻人没有心计。和这样的人在一起，身心放松，没有太多警惕，就能相互靠近。傻在很多时候意味着执着和忠贞，也意味着宽厚和诚实，让人不知不觉站到他一边。傻人无意中得到的，比聪明人费尽心机得到的还多。毕业这几年，你的天空中只飘着几片雪花，这样你就满足了吗？成功需要坚持与积累，与其专注于搜集雪花，不如省下力气去滚雪球。巴菲特说：”人生就像滚雪球，最重要的是发现很湿的雪和很长的坡。”让自己沉淀下来，学着发现”很湿的雪”，努力寻找”很长的坡”。 记住：散落的雪花会很快融化，化为乌有，只有雪球才更实在，才能长久。<br>&ensp;&ensp;&ensp;&ensp;在毕业这几年里，你要是能做到比别人多付出一分努力，就意味着比别人多积累一分资本，就比别人多一次成功的机会。<br>&ensp;&ensp;&ensp;&ensp;什么是职业化呢？职业化就是工作状态的标准化、规范化、制度化，即在合适的时间、合适的地点用合适的方式说合适的话、做合适的事，使知识、技能、观念、思 维、态度、心理等符合职业规范和标准。”在每个行业里，都有很多出色的人才，他们之所以能存在，是因为比别人更努力、更智慧、 更成熟。但是，最重要的是，他们比一般人更加职业化！这就是为什么我现在能当你老板的原因。一个人仅仅专业化是不够的，只有职业化的人才能飞在别人前面， 让人难以超越！”不要以为我们现在已经生存得很安稳了。对于毕业5年的人来讲，一定要认清即将面临的五大挑战。<br>&ensp;&ensp;&ensp;&ensp;一、赡养父母。<br>&ensp;&ensp;&ensp;&ensp;二、结婚生子。<br>&ensp;&ensp;&ensp;&ensp;三、 升职加薪。<br>&ensp;&ensp;&ensp;&ensp;四、工作压力。<br>&ensp;&ensp;&ensp;&ensp;五、生活质量。<br>&ensp;&ensp;&ensp;&ensp;有的人为生存 而雀跃，目光总是停在身后，三天打鱼两天晒网，有始无终。<br>&ensp;&ensp;&ensp;&ensp;有的人为发展而奋斗，目光总是盯在正前方，每天进步一点点，坚持不懈。<br>&ensp;&ensp;&ensp;&ensp;毕业这几年，不能没有追求和探索，不能没有理想和目标。人生如逆水行舟，不进则退。甘于现状的生活就是不再前行的船，再也无法追上时代前进的步伐。一定要抓紧每一秒钟的时间来学习，要明白学习不是学生的专利。小聪明的人最得意的是：自己做过什么？大智慧的人最渴望的是：自己还要做什么？<br>&ensp;&ensp;&ensp;&ensp;小聪明是战术，大智慧是战略；小聪明看到的是芝麻，大智慧看到的是西瓜。<br>&ensp;&ensp;&ensp;&ensp;在这个世界上，既有大人物，也有小角色，大人物有大人物的活 法，小人物有小人物的潇洒，每个人都有自己的生活方式，谁也勉强不了谁。但是，小聪明只能有小成绩和小视野，大智慧才能有大成就和大境界。小企业看老板， 中企业看制度，大企业看文化。<br>&ensp;&ensp;&ensp;&ensp;小公司与大企业都有生存之道，没有好坏之分，但对一 个人不同阶段的影响会不同。<br>&ensp;&ensp;&ensp;&ensp;小公司肯定想要发展为大企业，这是一种目 标，年轻人也要给自己的职业生涯制定目标。毕业几年的你，是否经常会怯场或者是感到没有底气？居安思危绝对不是危言耸听！此刻打盹，你将做梦；此刻学习， 你将圆梦。在竞争激烈的人生战场上，打盹的都是输家！<br>&ensp;&ensp;&ensp;&ensp;每个人在年轻的时候似乎都豪情 万丈，什么都不怕，可是随着年龄的增长，每天想着房子、工作、养家糊口这些俗事儿，再也没有年轻时那种敢于”上天探星、下海捞 月”的勇气了。是我们改变了生活，还是生活改变了我们？我们的思想越来越复杂，因为有了越来越多的舍不得、越来越多的顾虑，我们总是在徘徊、总是在犹豫。毕业开始一两年，生活的重担会压得我们喘不过气来，挫折和障碍堵住四面八方的通口，我们往往在压迫得自己发挥出潜能后，才能杀出重围，找到出路。可是两三年后，身上的重担开始减轻，工作开始一帆风顺，我们就松懈了下来，渐渐忘记了潜在的危险。直到有一天危机突然降临，我们在手足无措中被击败…毕业这几年，仍然处于危险期，一定要有居安思危的意识，好好打拼，这样才能有一个真正的安全人生！<br>&ensp;&ensp;&ensp;&ensp;生于忧患，死于安乐。如果你想跨越自己目前的成就，就不能画地自限，而是要勇于接受挑 战。对畏畏缩缩的人来说，真正的危险正在于不敢冒险！<br>&ensp;&ensp;&ensp;&ensp;年轻人在社会的重压下，适应 能力已变得越来越强，只是他们不自觉地习惯被环境推着走。他们不敢冒险，怕给自己带来终身的遗憾，于是告慰自己：”我对得起自 己、对得起家人，因为我已竭尽全力。”其实，人只有不断挑战和突破才能逐渐成长。长期固守于已有的安全感中，就会像温水里的青 蛙一样，最终失去跳跃的本能。<br>&ensp;&ensp;&ensp;&ensp;经历了这几年社会生活，你应该明白：这个世界上有富也有贫，有阴也有亮， 有丑也有美，到底看到什么，取决于自己是积极还是消极。在年轻时学会勤勉地工作，用一种光明的思维对待生活，那么，只要张开手掌，你就会发现，里面有一片灿烂的人生。<br>&ensp;&ensp;&ensp;&ensp;把感恩刻在石头上，深深地感谢别人帮助过你，永远铭记，这是人生应有的一种境界；把仇恨写在沙滩上，淡淡忘掉别人伤害过你，学会宽容，让所有的怨恨随着潮水一去不复 返，这也是一种人生境界。<br>&ensp;&ensp;&ensp;&ensp;学会倒出水，才能装下更多的水。从毕业那天开始，学会把每天都当成一个新的起点，每一次工作都从零开始。如果你懂得把”归零”当成一种生活 的常态，当成一种优秀的延续，当成一种时刻要做的事情，那么，经过短短几年，你就可以完成自己职业生涯的正确规划与全面超越。<br>&ensp;&ensp;&ensp;&ensp;在职业起步的短短道路上，想要得到更好、更快、更有益的成长，就必须以归零思维来面对这个世界。 不要以大学里的清高来标榜自己，不要觉得自己特别优秀，而是要把自己的姿态放下，把自己的身架放低，让自己沉淀下来，抱着学习的态度去适应环境、接受挑 战。放下”身段”才能提高身价，暂时的俯低终会促成未来的高就。<br>&ensp;&ensp;&ensp;&ensp;年轻人从校园或者从一个环境进入一个新环境，就要勇于将原来环境里熟悉、习惯、喜欢的东西放下，然后从 零开始。我们想在职场上获得成功，首先就要培养适应力。从自然人转化为单位人是融入职场的基本条件。一个人起点低并不可怕，怕的是境界低。越计较自我，便越没有发展前景；相反，越是主动付出，那么他就越会快速发展。很多今天取得一定成就的人，在职业生涯的初期都是从零开始，把自己沉淀再沉淀、倒空再倒空、 归零再归零，正因为这样，他们的人生才一路高歌，一路飞扬。<br>&ensp;&ensp;&ensp;&ensp;在毕业这 几年里，我们要让过去归零，才不会成为职场上那只背着重壳爬行的蜗牛，才能像天空中的鸟儿那样轻盈地飞翔。请好好品味一下杰克·韦 尔奇说过的一句话：”纠正自己的行为，认清自己，从零开始，你将重新走上职场坦途。”　吐故才能纳 新，心静才能身凉，有舍才能有得，杯空才能水满，放下才能超越。<br>&ensp;&ensp;&ensp;&ensp;归零思维五大表现：心中无我，眼中无钱，念中无他，朝中无人，学无止境。<br>&ensp;&ensp;&ensp;&ensp;年轻人难免 带着几分傲气，认为自己无所不能、所向披靡，其实不然，初入职场的新人还是个”婴儿”，正处在从爬 到走的成长阶段。在毕业这几年里，一定要让自己逐步培养起学徒思维、海绵思维、空杯思维，具有这样思维的人心灵总是敞开的，能随时接受启示和一切能激发灵 感的东西，他们时刻都能感受到成功女神的召唤。</p>"},{"title":"Hexo安装和配置","date":"2017-01-04T01:53:29.000Z","_content":"## 1. Git安装和设置\n* github\n```js\nbrew install git          #Mac电脑使用brew安装 \nsudo apt-get install git  #Ubuntu系统使用这条命令安装\n```\n然后设置好git账户\n使用Github Page搭建博客, 需要在github建立仓库,仓库名为username.github.io\n\n* gitcafe\n因为github速度稍微慢一点，所以用作备份站，主站用国内的gitcafe。\n\n1) 先到https://gitcafe.com/projects/new页面注册一个新的项目，项目名需要与你的用户名相同，默认分支选择gitcafe-pages,项目主页也是相同的 http://username.gitcafe.com\n\n2) 采用和github同样的key文件，在 `~/.ssh/id_rsa.pub`\n如果没有，单独生成一个ssh-key\n\n`ssh-keygen -t rsa -C \"emailaddress\" -f ~/.ssh/gitcafe`\n在SSH的文件夹下，可以看到gitcafe私钥和公钥文件：\n`\ngitcafe\ngitcafe.pub\n`\n生成配置文件：\n\n`touch ~/.ssh/config`\n添加以下内容：\n`\nHost gitcafe.com www.gitcafe.com\nIdentityFile ~/.ssh/gitcafe\n`\n3) 登录网站，将SSH文件夹下的 GitCafe.pub 中的内容复制到公钥框中即可。\n\n4) 测试是否连上，共用的key，输入：\n`\nssh -T git@gitcafe.com -i ~/.ssh/id_rsa\n`\n单独的key，输入：\n`\nssh -T git@gitcafe.com -i ~/.ssh/gitcafe\n`\n## 2. Node.js安装\n`brew install node  #最新版的node.js的包中已经集成了npm包管理工具`\n使用以下命令验证是否安装成功\n`\nnode -v\nnpm -v\n`\n如果运行hexo命令时，发现错误:\n`\n-bash: hexo: command not found\n`\n是没有指定nodejs所致。可以使用下面方法解决：\n\n如果机器没有安装过node，那么首先brew install nvm安装nvm。\n\n其次需要在shell的配置文件(~/.bashrc, ~/.profile, or ~/.zshrc)中添加如下内容：\n`\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\n`\n然后设置别名\n`\nnvm ls\n#v0.12.7\n\nnvm use 0.12.7\n#Now using node v0.12.7\n\nnvm alias default 0.12.7\n#default -> 0.12.7 (-> v0.12.7)\n`\n如果之前通过brew install node方式安装过node，那么需要先删除系统中存在的node：\n`\nbrew remove --force node\nsudo rm -r /usr/local/lib/node_modules\n\nbrew prune\nsudo rm -r /usr/local/include/node\n\n# 检查brew是否正常\nbrew doctor\n`\n## 3. Hexo安装与设置\nNode, npm和Git都安装成功, 开始安装hexo\n`\nnpm install hexo -g  #-g表示全局安装, npm默认为当前项目安装\nhexo version\n`\n如果遇到报错\n```js\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n则用下列语句安装\n`npm install hexo --no-optional`\n\nHexo使用命令:\n```js\ncd ~/git\nhexo init hexo  #执行init命令初始化到你指定的hexo目录\ncd hexo\nnpm install    #install before start blogging\nhexo generate       #自动根据当前目录下文件,生成静态网页\nhexo server         #运行本地服务\n```\n浏览器输入http://localhost:4000就可以看到效果。\n\n目录结构\n```js\n.\n├── .deploy       #需要部署的文件\n├── node_modules  #Hexo插件\n├── public        #生成的静态网页文件\n├── scaffolds     #模板\n├── source        #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里\n|   ├── _drafts   #草稿\n|   └── _posts    #文章\n├── themes        #主题\n├── _config.yml   #全局配置文件\n└── package.json\n```\n## 4. 添加博文\nhexo new \"postName\"  #新建博文,其中postName是博文题目\n博文会自动生成在博客目录下`source/_posts\\postName.md`\n\n文件自动生成格式:\n```js\ntitle: \"It Starts with iGaze: Visual Attention Driven Networkingwith Smart Glasses\"  #博文题目\ndate: 2014-11-21 11:25:38      #生成时间\ntags:                    #标签, 多个标签也可以使用格式[tag1, tag2, tag3,...]\n- tag1\n- tag2\n- tag3\ncategories: [cat1,cat2,cat3]\n---\n```\n正文, 使用 Markdown 语法书写\n如果不想博文在首页全部显示, 并能出现阅读全文按钮效果, 需要在你想在首页显示的部分下添加\n\n<!--more-->\n## 5. 主题更改\n`\ncd ~/git/hexo\n`\ngit clone git@github.com:litten/hexo-theme-yilia.git themes/yilia\n在`./_config.yml`，修改主题为yilia\ntheme: yilia\n\nHexo主题列表\n\n另外推荐几个主题:\n`\niissnan/hexo-theme-next\nTryGhost/Casper\nkywk/hexo-theme-casper #基于Casper\ndaleanthony/uno\nA-limon/pacman\nAlxMedia/hueman\nppoffice/hexo-theme-hueman #基于Hueman\nxiangming/landscape-plus #基于官方\nhexojs/hexo-theme-landscape\n`\n查看本地效果\n`\nhexo g\nhexo s\n`\n6. 部署到Git\n以上内容都是在本地进行查看, 现在将博客部署到github或gitcafe上\n\ngitcafe\n打开`./_config.yml`，修改如下信息：\n```js\ntype: git\nrepository: git@gitcafe.com:yourname/yourname.git\nbranch: gitcafe-pages\nbranch要提交到gitcafe-pages，然后才能在username.gitcafe.io中看到提交的页面。\n\nGithub\ndeploy:\n  type: github\n  repo: https://github.com/lmintlcx/lmintlcx.github.io.git\n  branch: master\n```\n项目主页需要把 branch 设置为 gh-pages\n\n注意事项\n所有键的冒号后面留一个空格，如language: zh-CN\nurl不能为空,否则报错\ntype: github报错hexo ERROR Deployer not found: github的解决方法：\n先运行 npm install hexo-deployer-git --save\n再改为 type: git\n完整配置信息如下：\n```js\n# Site #站点信息\ntitle: blog Name #标题\nsubtitle: Subtitle #副标题\ndescription: my blog desc #描述\nauthor: me #作者\nlanguage: zh-CN #语言\ntimezone: Asia/Shanghai #时区\n\n# URL\nurl: http://yoururl.com   #用于绑定域名, 其他的不需要配置\nroot: /\n#permalink: :year/:month/:day/:title/\npermalink: posts/title.html\npermalink_defaults:\n\n# Directory #目录\nsource_dir: source #源文件\npublic_dir: public #生成的网页文件\ntag_dir: tags #标签\narchive_dir: archives #归档\ncategory_dir: categories #分类\ncode_dir: downloads/code\ni18n_dir: :lang #国际化\nskip_render:\n\n# Writing #写作\nnew_post_name: :title.md #新文章标题\ndefault_layout: post #默认模板(post page photo draft)\ntitlecase: false #标题转换成大写\nexternal_link: true #新标签页里打开连接\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight: #语法高亮\n  enable: true\n  line_number: true #显示行号\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag #分类和标签\ndefault_category: uncategorized #默认分类\ncategory_map:\ntag_map:\n\n# Date / Time format #日期时间格式\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination #分页\nper_page: 10 #每页文章数, 设置成 0 禁用分页\npagination_dir: page\n\n# Extensions #插件和主题\n## 插件: http://hexo.io/plugins/\n## 主题: http://hexo.io/themes/\ntheme: next\n\n# Deployment #部署, 同时发布在 GitHub 和 GitCafe 上面\ndeploy:\n- type: git\n  repo: git@gitcafe.com:username/username.git,gitcafe-pages\n- type: git\n  repo: git@github.com:username/username.github.io.git,master\n\n# Disqus #Disqus评论系统\ndisqus_shortname: \n\nplugins: #插件，例如生成 RSS 和站点地图的\n- hexo-generator-feed\n- hexo-generator-sitemap\n```\n保存之后，便可以使用hexo d上传到GitCafe。\n部署成功,使用username.gitcafe.io进行访问, 或者设置个性域名，参考官方Wiki。\n\n## 7.域名\n绑定域名\n不绑定域名的话只能通过 `your_user_name.github.io` 访问\n申请域名推荐 GoDaddy, 域名解析推荐 DNSPod\n\n绑定顶级域名\n新建文件 CNAME, 无后缀, 纯文本文件, 内容为要绑定的域名 blogname.com\n如果要使用 www.blogname.com 的形式, 文件内容改为 www.blogname.com\n\nDNS设置\n主机记录@, 类型A, 记录值192.30.252.153\n主机记录www, 类型A, 记录值192.30.252.153\n参考 Tips for configuring an A record with your DNS provider\n\n绑定子域名\n\n比如使用域名blogname.com的子域名blog.blogname.com\nCNAME文件内容为blog.blogname.com\n\nDNS设置\n主机记录blog, 类型CNAME, 记录值blogname.github.io\n参考 Tips for configuring a CNAME record with your DNS provider\n\nGitcafe 绑定域名\n\n项目管理界面, 左侧的导航栏中有自定义域名设置\n\n## 8.其他配置\n站点建立时间\n例如 © 2014 - 2015\n\n站点配置文件新增字段 since\nsince: 2014\n\n侧栏设置\npost - 默认行为, 在文章页面(拥有目录列表)时显示\nalways - 在所有页面中都显示\nhide - 在所有页面中都隐藏(可以手动展开)\n\nsidebar: post\n\n头像设置\n编辑站点配置文件, 新增字段 avatar, 头像的链接地址可以是:\n\n网络地址\nhttps://avatars2.githubusercontent.com/u/4962914?v=3&s=460\n\n站点内的地址\n/images/avatar.jpg #头像图片放置在主题的 source/images/\n\navatar: /images/avatar.png\n\n菜单设置\n编辑主题配置文件的 menu\n若站点运行在子目录中, 将链接前缀的 / 去掉\n\nmenu:\n  home: /\n  archives: /archives\n  categories: /categories\n  tags: /tags\n  commonweal: /404.html\n  about: /about\n标签云页面\n添加一个标签云页面, 并在菜单中显示页面链接\n\n新建tags页面\nhexo new page “tags”\n\n将页面的类型设置为 tags\n```js\ntitle: tags\ndate: 2015-09-19 22:37:08\ntype: \"tags\"\n---\n关闭评论\n\ntitle: tags\ndate: 2015-09-19 22:37:08\ntype: \"tags\"\ncomments: false\n---\n在菜单中添加链接。 编辑主题配置文件, 添加 tags 到 menu 中\n\nmenu:\n  tags: /tags\n分类页面\n添加一个分类页面, 并在菜单中显示页面链接\n\n新建 categories 页面\nhexo new page categories\n\n将页面的类型设置为categories\n\ntitle: categories\ndate: 2015-09-19 22:38:00\ntype: \"categories\"\n---\n关闭评论\n\ntitle: categories\ndate: 2015-09-19 22:38:00\ntype: \"categories\"\ncomments: false\n---\n在菜单中添加链接. 编辑主题配置文件, 添加 categories 到 menu 中\n\nmenu:\n  categories: /categories\nRSS 链接\n编辑主题配置文件 rss 字段\n\nrss: false\n禁用Feed链接\n\nrss:\n默认使用站点的 Feed 链接, 需要安装 hexo-generator-feed 插件\n浏览http://localhost:4000/atom.xml查看是否生效\n\nrss: http://your-feed-url\n指定特定的链接地址, 适用于已经烧制过 Feed 的情形\n\n自定义页面\n以关于页面为例\n新建一个 about 页面\nhexo new page \"about\"\n\n编辑 source/about/index.md：\n\ntitle: About\ndate: 2014-11-1 11:11:11\n---\nAbout Me\n```\n菜单显示 about 链接, 主题配置文件中将 menu 中 about 前面的注释去掉\n\n```js\nmenu:\n  about: /about\n```\n## 9.网站代码上传\n设置完毕，为避免本地代码丢失，可以将hexo下的所有文件提交一份到服务器。\n```js\n#create project on gitcafe.com\nmkdir hexo-source\ncd hexo-source\ngit init\n# copy all files in 'hexo' folder here\ngit add ..\ngit commit -m 'first commit'\ngit remote add origin 'git@gitcafe.com:username/hexo-source.git'\ngit push -u origin master\n```\n\n\n","source":"_posts/hexo-install-config.md","raw":"title: Hexo安装和配置\ndate: 2017-01-04 09:53:29\ncategories: 技术\ntags: hexo\n---\n## 1. Git安装和设置\n* github\n```js\nbrew install git          #Mac电脑使用brew安装 \nsudo apt-get install git  #Ubuntu系统使用这条命令安装\n```\n然后设置好git账户\n使用Github Page搭建博客, 需要在github建立仓库,仓库名为username.github.io\n\n* gitcafe\n因为github速度稍微慢一点，所以用作备份站，主站用国内的gitcafe。\n\n1) 先到https://gitcafe.com/projects/new页面注册一个新的项目，项目名需要与你的用户名相同，默认分支选择gitcafe-pages,项目主页也是相同的 http://username.gitcafe.com\n\n2) 采用和github同样的key文件，在 `~/.ssh/id_rsa.pub`\n如果没有，单独生成一个ssh-key\n\n`ssh-keygen -t rsa -C \"emailaddress\" -f ~/.ssh/gitcafe`\n在SSH的文件夹下，可以看到gitcafe私钥和公钥文件：\n`\ngitcafe\ngitcafe.pub\n`\n生成配置文件：\n\n`touch ~/.ssh/config`\n添加以下内容：\n`\nHost gitcafe.com www.gitcafe.com\nIdentityFile ~/.ssh/gitcafe\n`\n3) 登录网站，将SSH文件夹下的 GitCafe.pub 中的内容复制到公钥框中即可。\n\n4) 测试是否连上，共用的key，输入：\n`\nssh -T git@gitcafe.com -i ~/.ssh/id_rsa\n`\n单独的key，输入：\n`\nssh -T git@gitcafe.com -i ~/.ssh/gitcafe\n`\n## 2. Node.js安装\n`brew install node  #最新版的node.js的包中已经集成了npm包管理工具`\n使用以下命令验证是否安装成功\n`\nnode -v\nnpm -v\n`\n如果运行hexo命令时，发现错误:\n`\n-bash: hexo: command not found\n`\n是没有指定nodejs所致。可以使用下面方法解决：\n\n如果机器没有安装过node，那么首先brew install nvm安装nvm。\n\n其次需要在shell的配置文件(~/.bashrc, ~/.profile, or ~/.zshrc)中添加如下内容：\n`\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\n`\n然后设置别名\n`\nnvm ls\n#v0.12.7\n\nnvm use 0.12.7\n#Now using node v0.12.7\n\nnvm alias default 0.12.7\n#default -> 0.12.7 (-> v0.12.7)\n`\n如果之前通过brew install node方式安装过node，那么需要先删除系统中存在的node：\n`\nbrew remove --force node\nsudo rm -r /usr/local/lib/node_modules\n\nbrew prune\nsudo rm -r /usr/local/include/node\n\n# 检查brew是否正常\nbrew doctor\n`\n## 3. Hexo安装与设置\nNode, npm和Git都安装成功, 开始安装hexo\n`\nnpm install hexo -g  #-g表示全局安装, npm默认为当前项目安装\nhexo version\n`\n如果遇到报错\n```js\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n则用下列语句安装\n`npm install hexo --no-optional`\n\nHexo使用命令:\n```js\ncd ~/git\nhexo init hexo  #执行init命令初始化到你指定的hexo目录\ncd hexo\nnpm install    #install before start blogging\nhexo generate       #自动根据当前目录下文件,生成静态网页\nhexo server         #运行本地服务\n```\n浏览器输入http://localhost:4000就可以看到效果。\n\n目录结构\n```js\n.\n├── .deploy       #需要部署的文件\n├── node_modules  #Hexo插件\n├── public        #生成的静态网页文件\n├── scaffolds     #模板\n├── source        #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里\n|   ├── _drafts   #草稿\n|   └── _posts    #文章\n├── themes        #主题\n├── _config.yml   #全局配置文件\n└── package.json\n```\n## 4. 添加博文\nhexo new \"postName\"  #新建博文,其中postName是博文题目\n博文会自动生成在博客目录下`source/_posts\\postName.md`\n\n文件自动生成格式:\n```js\ntitle: \"It Starts with iGaze: Visual Attention Driven Networkingwith Smart Glasses\"  #博文题目\ndate: 2014-11-21 11:25:38      #生成时间\ntags:                    #标签, 多个标签也可以使用格式[tag1, tag2, tag3,...]\n- tag1\n- tag2\n- tag3\ncategories: [cat1,cat2,cat3]\n---\n```\n正文, 使用 Markdown 语法书写\n如果不想博文在首页全部显示, 并能出现阅读全文按钮效果, 需要在你想在首页显示的部分下添加\n\n<!--more-->\n## 5. 主题更改\n`\ncd ~/git/hexo\n`\ngit clone git@github.com:litten/hexo-theme-yilia.git themes/yilia\n在`./_config.yml`，修改主题为yilia\ntheme: yilia\n\nHexo主题列表\n\n另外推荐几个主题:\n`\niissnan/hexo-theme-next\nTryGhost/Casper\nkywk/hexo-theme-casper #基于Casper\ndaleanthony/uno\nA-limon/pacman\nAlxMedia/hueman\nppoffice/hexo-theme-hueman #基于Hueman\nxiangming/landscape-plus #基于官方\nhexojs/hexo-theme-landscape\n`\n查看本地效果\n`\nhexo g\nhexo s\n`\n6. 部署到Git\n以上内容都是在本地进行查看, 现在将博客部署到github或gitcafe上\n\ngitcafe\n打开`./_config.yml`，修改如下信息：\n```js\ntype: git\nrepository: git@gitcafe.com:yourname/yourname.git\nbranch: gitcafe-pages\nbranch要提交到gitcafe-pages，然后才能在username.gitcafe.io中看到提交的页面。\n\nGithub\ndeploy:\n  type: github\n  repo: https://github.com/lmintlcx/lmintlcx.github.io.git\n  branch: master\n```\n项目主页需要把 branch 设置为 gh-pages\n\n注意事项\n所有键的冒号后面留一个空格，如language: zh-CN\nurl不能为空,否则报错\ntype: github报错hexo ERROR Deployer not found: github的解决方法：\n先运行 npm install hexo-deployer-git --save\n再改为 type: git\n完整配置信息如下：\n```js\n# Site #站点信息\ntitle: blog Name #标题\nsubtitle: Subtitle #副标题\ndescription: my blog desc #描述\nauthor: me #作者\nlanguage: zh-CN #语言\ntimezone: Asia/Shanghai #时区\n\n# URL\nurl: http://yoururl.com   #用于绑定域名, 其他的不需要配置\nroot: /\n#permalink: :year/:month/:day/:title/\npermalink: posts/title.html\npermalink_defaults:\n\n# Directory #目录\nsource_dir: source #源文件\npublic_dir: public #生成的网页文件\ntag_dir: tags #标签\narchive_dir: archives #归档\ncategory_dir: categories #分类\ncode_dir: downloads/code\ni18n_dir: :lang #国际化\nskip_render:\n\n# Writing #写作\nnew_post_name: :title.md #新文章标题\ndefault_layout: post #默认模板(post page photo draft)\ntitlecase: false #标题转换成大写\nexternal_link: true #新标签页里打开连接\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight: #语法高亮\n  enable: true\n  line_number: true #显示行号\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag #分类和标签\ndefault_category: uncategorized #默认分类\ncategory_map:\ntag_map:\n\n# Date / Time format #日期时间格式\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination #分页\nper_page: 10 #每页文章数, 设置成 0 禁用分页\npagination_dir: page\n\n# Extensions #插件和主题\n## 插件: http://hexo.io/plugins/\n## 主题: http://hexo.io/themes/\ntheme: next\n\n# Deployment #部署, 同时发布在 GitHub 和 GitCafe 上面\ndeploy:\n- type: git\n  repo: git@gitcafe.com:username/username.git,gitcafe-pages\n- type: git\n  repo: git@github.com:username/username.github.io.git,master\n\n# Disqus #Disqus评论系统\ndisqus_shortname: \n\nplugins: #插件，例如生成 RSS 和站点地图的\n- hexo-generator-feed\n- hexo-generator-sitemap\n```\n保存之后，便可以使用hexo d上传到GitCafe。\n部署成功,使用username.gitcafe.io进行访问, 或者设置个性域名，参考官方Wiki。\n\n## 7.域名\n绑定域名\n不绑定域名的话只能通过 `your_user_name.github.io` 访问\n申请域名推荐 GoDaddy, 域名解析推荐 DNSPod\n\n绑定顶级域名\n新建文件 CNAME, 无后缀, 纯文本文件, 内容为要绑定的域名 blogname.com\n如果要使用 www.blogname.com 的形式, 文件内容改为 www.blogname.com\n\nDNS设置\n主机记录@, 类型A, 记录值192.30.252.153\n主机记录www, 类型A, 记录值192.30.252.153\n参考 Tips for configuring an A record with your DNS provider\n\n绑定子域名\n\n比如使用域名blogname.com的子域名blog.blogname.com\nCNAME文件内容为blog.blogname.com\n\nDNS设置\n主机记录blog, 类型CNAME, 记录值blogname.github.io\n参考 Tips for configuring a CNAME record with your DNS provider\n\nGitcafe 绑定域名\n\n项目管理界面, 左侧的导航栏中有自定义域名设置\n\n## 8.其他配置\n站点建立时间\n例如 © 2014 - 2015\n\n站点配置文件新增字段 since\nsince: 2014\n\n侧栏设置\npost - 默认行为, 在文章页面(拥有目录列表)时显示\nalways - 在所有页面中都显示\nhide - 在所有页面中都隐藏(可以手动展开)\n\nsidebar: post\n\n头像设置\n编辑站点配置文件, 新增字段 avatar, 头像的链接地址可以是:\n\n网络地址\nhttps://avatars2.githubusercontent.com/u/4962914?v=3&s=460\n\n站点内的地址\n/images/avatar.jpg #头像图片放置在主题的 source/images/\n\navatar: /images/avatar.png\n\n菜单设置\n编辑主题配置文件的 menu\n若站点运行在子目录中, 将链接前缀的 / 去掉\n\nmenu:\n  home: /\n  archives: /archives\n  categories: /categories\n  tags: /tags\n  commonweal: /404.html\n  about: /about\n标签云页面\n添加一个标签云页面, 并在菜单中显示页面链接\n\n新建tags页面\nhexo new page “tags”\n\n将页面的类型设置为 tags\n```js\ntitle: tags\ndate: 2015-09-19 22:37:08\ntype: \"tags\"\n---\n关闭评论\n\ntitle: tags\ndate: 2015-09-19 22:37:08\ntype: \"tags\"\ncomments: false\n---\n在菜单中添加链接。 编辑主题配置文件, 添加 tags 到 menu 中\n\nmenu:\n  tags: /tags\n分类页面\n添加一个分类页面, 并在菜单中显示页面链接\n\n新建 categories 页面\nhexo new page categories\n\n将页面的类型设置为categories\n\ntitle: categories\ndate: 2015-09-19 22:38:00\ntype: \"categories\"\n---\n关闭评论\n\ntitle: categories\ndate: 2015-09-19 22:38:00\ntype: \"categories\"\ncomments: false\n---\n在菜单中添加链接. 编辑主题配置文件, 添加 categories 到 menu 中\n\nmenu:\n  categories: /categories\nRSS 链接\n编辑主题配置文件 rss 字段\n\nrss: false\n禁用Feed链接\n\nrss:\n默认使用站点的 Feed 链接, 需要安装 hexo-generator-feed 插件\n浏览http://localhost:4000/atom.xml查看是否生效\n\nrss: http://your-feed-url\n指定特定的链接地址, 适用于已经烧制过 Feed 的情形\n\n自定义页面\n以关于页面为例\n新建一个 about 页面\nhexo new page \"about\"\n\n编辑 source/about/index.md：\n\ntitle: About\ndate: 2014-11-1 11:11:11\n---\nAbout Me\n```\n菜单显示 about 链接, 主题配置文件中将 menu 中 about 前面的注释去掉\n\n```js\nmenu:\n  about: /about\n```\n## 9.网站代码上传\n设置完毕，为避免本地代码丢失，可以将hexo下的所有文件提交一份到服务器。\n```js\n#create project on gitcafe.com\nmkdir hexo-source\ncd hexo-source\ngit init\n# copy all files in 'hexo' folder here\ngit add ..\ngit commit -m 'first commit'\ngit remote add origin 'git@gitcafe.com:username/hexo-source.git'\ngit push -u origin master\n```\n\n\n","slug":"hexo-install-config","published":1,"updated":"2017-01-04T08:11:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc2v000c2u6bl7h8kr9u","content":"<h2 id=\"1-Git安装和设置\"><a href=\"#1-Git安装和设置\" class=\"headerlink\" title=\"1. Git安装和设置\"></a>1. Git安装和设置</h2><ul>\n<li>github<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install git          #Mac电脑使用brew安装 </div><div class=\"line\">sudo apt-get install git  #Ubuntu系统使用这条命令安装</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后设置好git账户<br>使用Github Page搭建博客, 需要在github建立仓库,仓库名为username.github.io</p>\n<ul>\n<li>gitcafe<br>因为github速度稍微慢一点，所以用作备份站，主站用国内的gitcafe。</li>\n</ul>\n<p>1) 先到<a href=\"https://gitcafe.com/projects/new页面注册一个新的项目，项目名需要与你的用户名相同，默认分支选择gitcafe-pages,项目主页也是相同的\" target=\"_blank\" rel=\"external\">https://gitcafe.com/projects/new页面注册一个新的项目，项目名需要与你的用户名相同，默认分支选择gitcafe-pages,项目主页也是相同的</a> <a href=\"http://username.gitcafe.com\" target=\"_blank\" rel=\"external\">http://username.gitcafe.com</a></p>\n<p>2) 采用和github同样的key文件，在 <code>~/.ssh/id_rsa.pub</code><br>如果没有，单独生成一个ssh-key</p>\n<p><code>ssh-keygen -t rsa -C &quot;emailaddress&quot; -f ~/.ssh/gitcafe</code><br>在SSH的文件夹下，可以看到gitcafe私钥和公钥文件：<br><code>gitcafe\ngitcafe.pub</code><br>生成配置文件：</p>\n<p><code>touch ~/.ssh/config</code><br>添加以下内容：<br><code>Host gitcafe.com www.gitcafe.com\nIdentityFile ~/.ssh/gitcafe</code><br>3) 登录网站，将SSH文件夹下的 GitCafe.pub 中的内容复制到公钥框中即可。</p>\n<p>4) 测试是否连上，共用的key，输入：<br><code>ssh -T git@gitcafe.com -i ~/.ssh/id_rsa</code><br>单独的key，输入：<br><code>ssh -T git@gitcafe.com -i ~/.ssh/gitcafe</code></p>\n<h2 id=\"2-Node-js安装\"><a href=\"#2-Node-js安装\" class=\"headerlink\" title=\"2. Node.js安装\"></a>2. Node.js安装</h2><p><code>brew install node  #最新版的node.js的包中已经集成了npm包管理工具</code><br>使用以下命令验证是否安装成功<br><code>node -v\nnpm -v</code><br>如果运行hexo命令时，发现错误:<br><code>-bash: hexo: command not found</code><br>是没有指定nodejs所致。可以使用下面方法解决：</p>\n<p>如果机器没有安装过node，那么首先brew install nvm安装nvm。</p>\n<p>其次需要在shell的配置文件(~/.bashrc, ~/.profile, or ~/.zshrc)中添加如下内容：<br><code>export NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh</code><br>然后设置别名<br>`<br>nvm ls</p>\n<p>#v0.12.7</p>\n<p>nvm use 0.12.7</p>\n<p>#Now using node v0.12.7</p>\n<p>nvm alias default 0.12.7</p>\n<p>#default -&gt; 0.12.7 (-&gt; v0.12.7)<br><code>如果之前通过brew install node方式安装过node，那么需要先删除系统中存在的node：</code><br>brew remove –force node<br>sudo rm -r /usr/local/lib/node_modules</p>\n<p>brew prune<br>sudo rm -r /usr/local/include/node</p>\n<h1 id=\"检查brew是否正常\"><a href=\"#检查brew是否正常\" class=\"headerlink\" title=\"检查brew是否正常\"></a>检查brew是否正常</h1><p>brew doctor<br>`</p>\n<h2 id=\"3-Hexo安装与设置\"><a href=\"#3-Hexo安装与设置\" class=\"headerlink\" title=\"3. Hexo安装与设置\"></a>3. Hexo安装与设置</h2><p>Node, npm和Git都安装成功, 开始安装hexo<br><code>npm install hexo -g  #-g表示全局安装, npm默认为当前项目安装\nhexo version</code><br>如果遇到报错<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure></p>\n<p>则用下列语句安装<br><code>npm install hexo --no-optional</code></p>\n<p>Hexo使用命令:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/git</div><div class=\"line\">hexo init hexo  #执行init命令初始化到你指定的hexo目录</div><div class=\"line\">cd hexo</div><div class=\"line\">npm install    #install before start blogging</div><div class=\"line\">hexo generate       #自动根据当前目录下文件,生成静态网页</div><div class=\"line\">hexo server         #运行本地服务</div></pre></td></tr></table></figure></p>\n<p>浏览器输入<a href=\"http://localhost:4000就可以看到效果。\" target=\"_blank\" rel=\"external\">http://localhost:4000就可以看到效果。</a></p>\n<p>目录结构<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy       #需要部署的文件</div><div class=\"line\">├── node_modules  #Hexo插件</div><div class=\"line\">├── public        #生成的静态网页文件</div><div class=\"line\">├── scaffolds     #模板</div><div class=\"line\">├── source        #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里</div><div class=\"line\">|   ├── _drafts   #草稿</div><div class=\"line\">|   └── _posts    #文章</div><div class=\"line\">├── themes        #主题</div><div class=\"line\">├── _config.yml   #全局配置文件</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-添加博文\"><a href=\"#4-添加博文\" class=\"headerlink\" title=\"4. 添加博文\"></a>4. 添加博文</h2><p>hexo new “postName”  #新建博文,其中postName是博文题目<br>博文会自动生成在博客目录下<code>source/_posts\\postName.md</code></p>\n<p>文件自动生成格式:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: \"It Starts with iGaze: Visual Attention Driven Networkingwith Smart Glasses\"  #博文题目</div><div class=\"line\">date: 2014-11-21 11:25:38      #生成时间</div><div class=\"line\">tags:                    #标签, 多个标签也可以使用格式[tag1, tag2, tag3,...]</div><div class=\"line\">- tag1</div><div class=\"line\">- tag2</div><div class=\"line\">- tag3</div><div class=\"line\">categories: [cat1,cat2,cat3]</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>正文, 使用 Markdown 语法书写<br>如果不想博文在首页全部显示, 并能出现阅读全文按钮效果, 需要在你想在首页显示的部分下添加</p>\n<a id=\"more\"></a>\n<h2 id=\"5-主题更改\"><a href=\"#5-主题更改\" class=\"headerlink\" title=\"5. 主题更改\"></a>5. 主题更改</h2><p><code>cd ~/git/hexo</code><br>git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia<br>在<code>./_config.yml</code>，修改主题为yilia<br>theme: yilia</p>\n<p>Hexo主题列表</p>\n<p>另外推荐几个主题:<br><code>iissnan/hexo-theme-next\nTryGhost/Casper\nkywk/hexo-theme-casper #基于Casper\ndaleanthony/uno\nA-limon/pacman\nAlxMedia/hueman\nppoffice/hexo-theme-hueman #基于Hueman\nxiangming/landscape-plus #基于官方\nhexojs/hexo-theme-landscape</code><br>查看本地效果<br><code>hexo g\nhexo s</code></p>\n<ol>\n<li>部署到Git<br>以上内容都是在本地进行查看, 现在将博客部署到github或gitcafe上</li>\n</ol>\n<p>gitcafe<br>打开<code>./_config.yml</code>，修改如下信息：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">type: git</div><div class=\"line\">repository: git@gitcafe.com:yourname/yourname.git</div><div class=\"line\">branch: gitcafe-pages</div><div class=\"line\">branch要提交到gitcafe-pages，然后才能在username.gitcafe.io中看到提交的页面。</div><div class=\"line\"></div><div class=\"line\">Github</div><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repo: https:<span class=\"comment\">//github.com/lmintlcx/lmintlcx.github.io.git</span></div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>项目主页需要把 branch 设置为 gh-pages</p>\n<p>注意事项<br>所有键的冒号后面留一个空格，如language: zh-CN<br>url不能为空,否则报错<br>type: github报错hexo ERROR Deployer not found: github的解决方法：<br>先运行 npm install hexo-deployer-git –save<br>再改为 type: git<br>完整配置信息如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Site #站点信息</div><div class=\"line\">title: blog Name #标题</div><div class=\"line\">subtitle: Subtitle #副标题</div><div class=\"line\">description: my blog desc #描述</div><div class=\"line\">author: me #作者</div><div class=\"line\">language: zh-CN #语言</div><div class=\"line\">timezone: Asia/Shanghai #时区</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">url: http://yoururl.com   #用于绑定域名, 其他的不需要配置</div><div class=\"line\">root: /</div><div class=\"line\">#permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink: posts/title.html</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory #目录</div><div class=\"line\">source_dir: source #源文件</div><div class=\"line\">public_dir: public #生成的网页文件</div><div class=\"line\">tag_dir: tags #标签</div><div class=\"line\">archive_dir: archives #归档</div><div class=\"line\">category_dir: categories #分类</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang #国际化</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing #写作</div><div class=\"line\">new_post_name: :title.md #新文章标题</div><div class=\"line\">default_layout: post #默认模板(post page photo draft)</div><div class=\"line\">titlecase: false #标题转换成大写</div><div class=\"line\">external_link: true #新标签页里打开连接</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight: #语法高亮</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true #显示行号</div><div class=\"line\">  auto_detect: true</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag #分类和标签</div><div class=\"line\">default_category: uncategorized #默认分类</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format #日期时间格式</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination #分页</div><div class=\"line\">per_page: 10 #每页文章数, 设置成 0 禁用分页</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions #插件和主题</div><div class=\"line\">## 插件: http://hexo.io/plugins/</div><div class=\"line\">## 主题: http://hexo.io/themes/</div><div class=\"line\">theme: next</div><div class=\"line\"></div><div class=\"line\"># Deployment #部署, 同时发布在 GitHub 和 GitCafe 上面</div><div class=\"line\">deploy:</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: git@gitcafe.com:username/username.git,gitcafe-pages</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: git@github.com:username/username.github.io.git,master</div><div class=\"line\"></div><div class=\"line\"># Disqus #Disqus评论系统</div><div class=\"line\">disqus_shortname: </div><div class=\"line\"></div><div class=\"line\">plugins: #插件，例如生成 RSS 和站点地图的</div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\">- hexo-generator-sitemap</div></pre></td></tr></table></figure></p>\n<p>保存之后，便可以使用hexo d上传到GitCafe。<br>部署成功,使用username.gitcafe.io进行访问, 或者设置个性域名，参考官方Wiki。</p>\n<h2 id=\"7-域名\"><a href=\"#7-域名\" class=\"headerlink\" title=\"7.域名\"></a>7.域名</h2><p>绑定域名<br>不绑定域名的话只能通过 <code>your_user_name.github.io</code> 访问<br>申请域名推荐 GoDaddy, 域名解析推荐 DNSPod</p>\n<p>绑定顶级域名<br>新建文件 CNAME, 无后缀, 纯文本文件, 内容为要绑定的域名 blogname.com<br>如果要使用 www.blogname.com 的形式, 文件内容改为 www.blogname.com</p>\n<p>DNS设置<br>主机记录@, 类型A, 记录值192.30.252.153<br>主机记录www, 类型A, 记录值192.30.252.153<br>参考 Tips for configuring an A record with your DNS provider</p>\n<p>绑定子域名</p>\n<p>比如使用域名blogname.com的子域名blog.blogname.com<br>CNAME文件内容为blog.blogname.com</p>\n<p>DNS设置<br>主机记录blog, 类型CNAME, 记录值blogname.github.io<br>参考 Tips for configuring a CNAME record with your DNS provider</p>\n<p>Gitcafe 绑定域名</p>\n<p>项目管理界面, 左侧的导航栏中有自定义域名设置</p>\n<h2 id=\"8-其他配置\"><a href=\"#8-其他配置\" class=\"headerlink\" title=\"8.其他配置\"></a>8.其他配置</h2><p>站点建立时间<br>例如 © 2014 - 2015</p>\n<p>站点配置文件新增字段 since<br>since: 2014</p>\n<p>侧栏设置<br>post - 默认行为, 在文章页面(拥有目录列表)时显示<br>always - 在所有页面中都显示<br>hide - 在所有页面中都隐藏(可以手动展开)</p>\n<p>sidebar: post</p>\n<p>头像设置<br>编辑站点配置文件, 新增字段 avatar, 头像的链接地址可以是:</p>\n<p>网络地址<br><a href=\"https://avatars2.githubusercontent.com/u/4962914?v=3&amp;s=460\" target=\"_blank\" rel=\"external\">https://avatars2.githubusercontent.com/u/4962914?v=3&amp;s=460</a></p>\n<p>站点内的地址<br>/images/avatar.jpg #头像图片放置在主题的 source/images/</p>\n<p>avatar: /images/avatar.png</p>\n<p>菜单设置<br>编辑主题配置文件的 menu<br>若站点运行在子目录中, 将链接前缀的 / 去掉</p>\n<p>menu:<br>  home: /<br>  archives: /archives<br>  categories: /categories<br>  tags: /tags<br>  commonweal: /404.html<br>  about: /about<br>标签云页面<br>添加一个标签云页面, 并在菜单中显示页面链接</p>\n<p>新建tags页面<br>hexo new page “tags”</p>\n<p>将页面的类型设置为 tags<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2015-09-19 22:37:08</div><div class=\"line\">type: \"tags\"</div><div class=\"line\">---</div><div class=\"line\">关闭评论</div><div class=\"line\"></div><div class=\"line\">title: tags</div><div class=\"line\">date: 2015-09-19 22:37:08</div><div class=\"line\">type: \"tags\"</div><div class=\"line\">comments: false</div><div class=\"line\">---</div><div class=\"line\">在菜单中添加链接。 编辑主题配置文件, 添加 tags 到 menu 中</div><div class=\"line\"></div><div class=\"line\">menu:</div><div class=\"line\">  tags: /tags</div><div class=\"line\">分类页面</div><div class=\"line\">添加一个分类页面, 并在菜单中显示页面链接</div><div class=\"line\"></div><div class=\"line\">新建 categories 页面</div><div class=\"line\">hexo new page categories</div><div class=\"line\"></div><div class=\"line\">将页面的类型设置为categories</div><div class=\"line\"></div><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-09-19 22:38:00</div><div class=\"line\">type: \"categories\"</div><div class=\"line\">---</div><div class=\"line\">关闭评论</div><div class=\"line\"></div><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-09-19 22:38:00</div><div class=\"line\">type: \"categories\"</div><div class=\"line\">comments: false</div><div class=\"line\">---</div><div class=\"line\">在菜单中添加链接. 编辑主题配置文件, 添加 categories 到 menu 中</div><div class=\"line\"></div><div class=\"line\">menu:</div><div class=\"line\">  categories: /categories</div><div class=\"line\">RSS 链接</div><div class=\"line\">编辑主题配置文件 rss 字段</div><div class=\"line\"></div><div class=\"line\">rss: false</div><div class=\"line\">禁用Feed链接</div><div class=\"line\"></div><div class=\"line\">rss:</div><div class=\"line\">默认使用站点的 Feed 链接, 需要安装 hexo-generator-feed 插件</div><div class=\"line\">浏览http://localhost:4000/atom.xml查看是否生效</div><div class=\"line\"></div><div class=\"line\">rss: http://your-feed-url</div><div class=\"line\">指定特定的链接地址, 适用于已经烧制过 Feed 的情形</div><div class=\"line\"></div><div class=\"line\">自定义页面</div><div class=\"line\">以关于页面为例</div><div class=\"line\">新建一个 about 页面</div><div class=\"line\">hexo new page \"about\"</div><div class=\"line\"></div><div class=\"line\">编辑 source/about/index.md：</div><div class=\"line\"></div><div class=\"line\">title: About</div><div class=\"line\">date: 2014-11-1 11:11:11</div><div class=\"line\">---</div><div class=\"line\">About Me</div></pre></td></tr></table></figure></p>\n<p>菜单显示 about 链接, 主题配置文件中将 menu 中 about 前面的注释去掉</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  about: <span class=\"regexp\">/about</span></div></pre></td></tr></table></figure>\n<h2 id=\"9-网站代码上传\"><a href=\"#9-网站代码上传\" class=\"headerlink\" title=\"9.网站代码上传\"></a>9.网站代码上传</h2><p>设置完毕，为避免本地代码丢失，可以将hexo下的所有文件提交一份到服务器。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#create project on gitcafe.com</div><div class=\"line\">mkdir hexo-source</div><div class=\"line\">cd hexo-source</div><div class=\"line\">git init</div><div class=\"line\"># copy all files in 'hexo' folder here</div><div class=\"line\">git add ..</div><div class=\"line\">git commit -m 'first commit'</div><div class=\"line\">git remote add origin 'git@gitcafe.com:username/hexo-source.git'</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"1-Git安装和设置\"><a href=\"#1-Git安装和设置\" class=\"headerlink\" title=\"1. Git安装和设置\"></a>1. Git安装和设置</h2><ul>\n<li>github<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install git          #Mac电脑使用brew安装 </div><div class=\"line\">sudo apt-get install git  #Ubuntu系统使用这条命令安装</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后设置好git账户<br>使用Github Page搭建博客, 需要在github建立仓库,仓库名为username.github.io</p>\n<ul>\n<li>gitcafe<br>因为github速度稍微慢一点，所以用作备份站，主站用国内的gitcafe。</li>\n</ul>\n<p>1) 先到<a href=\"https://gitcafe.com/projects/new页面注册一个新的项目，项目名需要与你的用户名相同，默认分支选择gitcafe-pages,项目主页也是相同的\">https://gitcafe.com/projects/new页面注册一个新的项目，项目名需要与你的用户名相同，默认分支选择gitcafe-pages,项目主页也是相同的</a> <a href=\"http://username.gitcafe.com\">http://username.gitcafe.com</a></p>\n<p>2) 采用和github同样的key文件，在 <code>~/.ssh/id_rsa.pub</code><br>如果没有，单独生成一个ssh-key</p>\n<p><code>ssh-keygen -t rsa -C &quot;emailaddress&quot; -f ~/.ssh/gitcafe</code><br>在SSH的文件夹下，可以看到gitcafe私钥和公钥文件：<br><code>gitcafe\ngitcafe.pub</code><br>生成配置文件：</p>\n<p><code>touch ~/.ssh/config</code><br>添加以下内容：<br><code>Host gitcafe.com www.gitcafe.com\nIdentityFile ~/.ssh/gitcafe</code><br>3) 登录网站，将SSH文件夹下的 GitCafe.pub 中的内容复制到公钥框中即可。</p>\n<p>4) 测试是否连上，共用的key，输入：<br><code>ssh -T git@gitcafe.com -i ~/.ssh/id_rsa</code><br>单独的key，输入：<br><code>ssh -T git@gitcafe.com -i ~/.ssh/gitcafe</code></p>\n<h2 id=\"2-Node-js安装\"><a href=\"#2-Node-js安装\" class=\"headerlink\" title=\"2. Node.js安装\"></a>2. Node.js安装</h2><p><code>brew install node  #最新版的node.js的包中已经集成了npm包管理工具</code><br>使用以下命令验证是否安装成功<br><code>node -v\nnpm -v</code><br>如果运行hexo命令时，发现错误:<br><code>-bash: hexo: command not found</code><br>是没有指定nodejs所致。可以使用下面方法解决：</p>\n<p>如果机器没有安装过node，那么首先brew install nvm安装nvm。</p>\n<p>其次需要在shell的配置文件(~/.bashrc, ~/.profile, or ~/.zshrc)中添加如下内容：<br><code>export NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh</code><br>然后设置别名<br>`<br>nvm ls</p>\n<p>#v0.12.7</p>\n<p>nvm use 0.12.7</p>\n<p>#Now using node v0.12.7</p>\n<p>nvm alias default 0.12.7</p>\n<p>#default -&gt; 0.12.7 (-&gt; v0.12.7)<br><code>如果之前通过brew install node方式安装过node，那么需要先删除系统中存在的node：</code><br>brew remove –force node<br>sudo rm -r /usr/local/lib/node_modules</p>\n<p>brew prune<br>sudo rm -r /usr/local/include/node</p>\n<h1 id=\"检查brew是否正常\"><a href=\"#检查brew是否正常\" class=\"headerlink\" title=\"检查brew是否正常\"></a>检查brew是否正常</h1><p>brew doctor<br>`</p>\n<h2 id=\"3-Hexo安装与设置\"><a href=\"#3-Hexo安装与设置\" class=\"headerlink\" title=\"3. Hexo安装与设置\"></a>3. Hexo安装与设置</h2><p>Node, npm和Git都安装成功, 开始安装hexo<br><code>npm install hexo -g  #-g表示全局安装, npm默认为当前项目安装\nhexo version</code><br>如果遇到报错<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure></p>\n<p>则用下列语句安装<br><code>npm install hexo --no-optional</code></p>\n<p>Hexo使用命令:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/git</div><div class=\"line\">hexo init hexo  #执行init命令初始化到你指定的hexo目录</div><div class=\"line\">cd hexo</div><div class=\"line\">npm install    #install before start blogging</div><div class=\"line\">hexo generate       #自动根据当前目录下文件,生成静态网页</div><div class=\"line\">hexo server         #运行本地服务</div></pre></td></tr></table></figure></p>\n<p>浏览器输入<a href=\"http://localhost:4000就可以看到效果。\">http://localhost:4000就可以看到效果。</a></p>\n<p>目录结构<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy       #需要部署的文件</div><div class=\"line\">├── node_modules  #Hexo插件</div><div class=\"line\">├── public        #生成的静态网页文件</div><div class=\"line\">├── scaffolds     #模板</div><div class=\"line\">├── source        #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里</div><div class=\"line\">|   ├── _drafts   #草稿</div><div class=\"line\">|   └── _posts    #文章</div><div class=\"line\">├── themes        #主题</div><div class=\"line\">├── _config.yml   #全局配置文件</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-添加博文\"><a href=\"#4-添加博文\" class=\"headerlink\" title=\"4. 添加博文\"></a>4. 添加博文</h2><p>hexo new “postName”  #新建博文,其中postName是博文题目<br>博文会自动生成在博客目录下<code>source/_posts\\postName.md</code></p>\n<p>文件自动生成格式:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: \"It Starts with iGaze: Visual Attention Driven Networkingwith Smart Glasses\"  #博文题目</div><div class=\"line\">date: 2014-11-21 11:25:38      #生成时间</div><div class=\"line\">tags:                    #标签, 多个标签也可以使用格式[tag1, tag2, tag3,...]</div><div class=\"line\">- tag1</div><div class=\"line\">- tag2</div><div class=\"line\">- tag3</div><div class=\"line\">categories: [cat1,cat2,cat3]</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>正文, 使用 Markdown 语法书写<br>如果不想博文在首页全部显示, 并能出现阅读全文按钮效果, 需要在你想在首页显示的部分下添加</p>","more":"<h2 id=\"5-主题更改\"><a href=\"#5-主题更改\" class=\"headerlink\" title=\"5. 主题更改\"></a>5. 主题更改</h2><p><code>cd ~/git/hexo</code><br>git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia<br>在<code>./_config.yml</code>，修改主题为yilia<br>theme: yilia</p>\n<p>Hexo主题列表</p>\n<p>另外推荐几个主题:<br><code>iissnan/hexo-theme-next\nTryGhost/Casper\nkywk/hexo-theme-casper #基于Casper\ndaleanthony/uno\nA-limon/pacman\nAlxMedia/hueman\nppoffice/hexo-theme-hueman #基于Hueman\nxiangming/landscape-plus #基于官方\nhexojs/hexo-theme-landscape</code><br>查看本地效果<br><code>hexo g\nhexo s</code></p>\n<ol>\n<li>部署到Git<br>以上内容都是在本地进行查看, 现在将博客部署到github或gitcafe上</li>\n</ol>\n<p>gitcafe<br>打开<code>./_config.yml</code>，修改如下信息：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">type: git</div><div class=\"line\">repository: git@gitcafe.com:yourname/yourname.git</div><div class=\"line\">branch: gitcafe-pages</div><div class=\"line\">branch要提交到gitcafe-pages，然后才能在username.gitcafe.io中看到提交的页面。</div><div class=\"line\"></div><div class=\"line\">Github</div><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repo: https:<span class=\"comment\">//github.com/lmintlcx/lmintlcx.github.io.git</span></div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>项目主页需要把 branch 设置为 gh-pages</p>\n<p>注意事项<br>所有键的冒号后面留一个空格，如language: zh-CN<br>url不能为空,否则报错<br>type: github报错hexo ERROR Deployer not found: github的解决方法：<br>先运行 npm install hexo-deployer-git –save<br>再改为 type: git<br>完整配置信息如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Site #站点信息</div><div class=\"line\">title: blog Name #标题</div><div class=\"line\">subtitle: Subtitle #副标题</div><div class=\"line\">description: my blog desc #描述</div><div class=\"line\">author: me #作者</div><div class=\"line\">language: zh-CN #语言</div><div class=\"line\">timezone: Asia/Shanghai #时区</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">url: http://yoururl.com   #用于绑定域名, 其他的不需要配置</div><div class=\"line\">root: /</div><div class=\"line\">#permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink: posts/title.html</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory #目录</div><div class=\"line\">source_dir: source #源文件</div><div class=\"line\">public_dir: public #生成的网页文件</div><div class=\"line\">tag_dir: tags #标签</div><div class=\"line\">archive_dir: archives #归档</div><div class=\"line\">category_dir: categories #分类</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang #国际化</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing #写作</div><div class=\"line\">new_post_name: :title.md #新文章标题</div><div class=\"line\">default_layout: post #默认模板(post page photo draft)</div><div class=\"line\">titlecase: false #标题转换成大写</div><div class=\"line\">external_link: true #新标签页里打开连接</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight: #语法高亮</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true #显示行号</div><div class=\"line\">  auto_detect: true</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag #分类和标签</div><div class=\"line\">default_category: uncategorized #默认分类</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format #日期时间格式</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination #分页</div><div class=\"line\">per_page: 10 #每页文章数, 设置成 0 禁用分页</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions #插件和主题</div><div class=\"line\">## 插件: http://hexo.io/plugins/</div><div class=\"line\">## 主题: http://hexo.io/themes/</div><div class=\"line\">theme: next</div><div class=\"line\"></div><div class=\"line\"># Deployment #部署, 同时发布在 GitHub 和 GitCafe 上面</div><div class=\"line\">deploy:</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: git@gitcafe.com:username/username.git,gitcafe-pages</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: git@github.com:username/username.github.io.git,master</div><div class=\"line\"></div><div class=\"line\"># Disqus #Disqus评论系统</div><div class=\"line\">disqus_shortname: </div><div class=\"line\"></div><div class=\"line\">plugins: #插件，例如生成 RSS 和站点地图的</div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\">- hexo-generator-sitemap</div></pre></td></tr></table></figure></p>\n<p>保存之后，便可以使用hexo d上传到GitCafe。<br>部署成功,使用username.gitcafe.io进行访问, 或者设置个性域名，参考官方Wiki。</p>\n<h2 id=\"7-域名\"><a href=\"#7-域名\" class=\"headerlink\" title=\"7.域名\"></a>7.域名</h2><p>绑定域名<br>不绑定域名的话只能通过 <code>your_user_name.github.io</code> 访问<br>申请域名推荐 GoDaddy, 域名解析推荐 DNSPod</p>\n<p>绑定顶级域名<br>新建文件 CNAME, 无后缀, 纯文本文件, 内容为要绑定的域名 blogname.com<br>如果要使用 www.blogname.com 的形式, 文件内容改为 www.blogname.com</p>\n<p>DNS设置<br>主机记录@, 类型A, 记录值192.30.252.153<br>主机记录www, 类型A, 记录值192.30.252.153<br>参考 Tips for configuring an A record with your DNS provider</p>\n<p>绑定子域名</p>\n<p>比如使用域名blogname.com的子域名blog.blogname.com<br>CNAME文件内容为blog.blogname.com</p>\n<p>DNS设置<br>主机记录blog, 类型CNAME, 记录值blogname.github.io<br>参考 Tips for configuring a CNAME record with your DNS provider</p>\n<p>Gitcafe 绑定域名</p>\n<p>项目管理界面, 左侧的导航栏中有自定义域名设置</p>\n<h2 id=\"8-其他配置\"><a href=\"#8-其他配置\" class=\"headerlink\" title=\"8.其他配置\"></a>8.其他配置</h2><p>站点建立时间<br>例如 © 2014 - 2015</p>\n<p>站点配置文件新增字段 since<br>since: 2014</p>\n<p>侧栏设置<br>post - 默认行为, 在文章页面(拥有目录列表)时显示<br>always - 在所有页面中都显示<br>hide - 在所有页面中都隐藏(可以手动展开)</p>\n<p>sidebar: post</p>\n<p>头像设置<br>编辑站点配置文件, 新增字段 avatar, 头像的链接地址可以是:</p>\n<p>网络地址<br><a href=\"https://avatars2.githubusercontent.com/u/4962914?v=3&amp;s=460\">https://avatars2.githubusercontent.com/u/4962914?v=3&amp;s=460</a></p>\n<p>站点内的地址<br>/images/avatar.jpg #头像图片放置在主题的 source/images/</p>\n<p>avatar: /images/avatar.png</p>\n<p>菜单设置<br>编辑主题配置文件的 menu<br>若站点运行在子目录中, 将链接前缀的 / 去掉</p>\n<p>menu:<br>  home: /<br>  archives: /archives<br>  categories: /categories<br>  tags: /tags<br>  commonweal: /404.html<br>  about: /about<br>标签云页面<br>添加一个标签云页面, 并在菜单中显示页面链接</p>\n<p>新建tags页面<br>hexo new page “tags”</p>\n<p>将页面的类型设置为 tags<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2015-09-19 22:37:08</div><div class=\"line\">type: \"tags\"</div><div class=\"line\">---</div><div class=\"line\">关闭评论</div><div class=\"line\"></div><div class=\"line\">title: tags</div><div class=\"line\">date: 2015-09-19 22:37:08</div><div class=\"line\">type: \"tags\"</div><div class=\"line\">comments: false</div><div class=\"line\">---</div><div class=\"line\">在菜单中添加链接。 编辑主题配置文件, 添加 tags 到 menu 中</div><div class=\"line\"></div><div class=\"line\">menu:</div><div class=\"line\">  tags: /tags</div><div class=\"line\">分类页面</div><div class=\"line\">添加一个分类页面, 并在菜单中显示页面链接</div><div class=\"line\"></div><div class=\"line\">新建 categories 页面</div><div class=\"line\">hexo new page categories</div><div class=\"line\"></div><div class=\"line\">将页面的类型设置为categories</div><div class=\"line\"></div><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-09-19 22:38:00</div><div class=\"line\">type: \"categories\"</div><div class=\"line\">---</div><div class=\"line\">关闭评论</div><div class=\"line\"></div><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-09-19 22:38:00</div><div class=\"line\">type: \"categories\"</div><div class=\"line\">comments: false</div><div class=\"line\">---</div><div class=\"line\">在菜单中添加链接. 编辑主题配置文件, 添加 categories 到 menu 中</div><div class=\"line\"></div><div class=\"line\">menu:</div><div class=\"line\">  categories: /categories</div><div class=\"line\">RSS 链接</div><div class=\"line\">编辑主题配置文件 rss 字段</div><div class=\"line\"></div><div class=\"line\">rss: false</div><div class=\"line\">禁用Feed链接</div><div class=\"line\"></div><div class=\"line\">rss:</div><div class=\"line\">默认使用站点的 Feed 链接, 需要安装 hexo-generator-feed 插件</div><div class=\"line\">浏览http://localhost:4000/atom.xml查看是否生效</div><div class=\"line\"></div><div class=\"line\">rss: http://your-feed-url</div><div class=\"line\">指定特定的链接地址, 适用于已经烧制过 Feed 的情形</div><div class=\"line\"></div><div class=\"line\">自定义页面</div><div class=\"line\">以关于页面为例</div><div class=\"line\">新建一个 about 页面</div><div class=\"line\">hexo new page \"about\"</div><div class=\"line\"></div><div class=\"line\">编辑 source/about/index.md：</div><div class=\"line\"></div><div class=\"line\">title: About</div><div class=\"line\">date: 2014-11-1 11:11:11</div><div class=\"line\">---</div><div class=\"line\">About Me</div></pre></td></tr></table></figure></p>\n<p>菜单显示 about 链接, 主题配置文件中将 menu 中 about 前面的注释去掉</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  about: <span class=\"regexp\">/about</span></div></pre></td></tr></table></figure>\n<h2 id=\"9-网站代码上传\"><a href=\"#9-网站代码上传\" class=\"headerlink\" title=\"9.网站代码上传\"></a>9.网站代码上传</h2><p>设置完毕，为避免本地代码丢失，可以将hexo下的所有文件提交一份到服务器。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#create project on gitcafe.com</div><div class=\"line\">mkdir hexo-source</div><div class=\"line\">cd hexo-source</div><div class=\"line\">git init</div><div class=\"line\"># copy all files in 'hexo' folder here</div><div class=\"line\">git add ..</div><div class=\"line\">git commit -m 'first commit'</div><div class=\"line\">git remote add origin 'git@gitcafe.com:username/hexo-source.git'</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure></p>"},{"title":"学习如何实现hexo博客文档","date":"2014-12-26T04:30:40.000Z","_content":"##学习ejs网页模板文件编写\n###关于ejs\n是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。EJS在这里专指WEB所使用的模板引擎之一。EJS的优点是将会带给你明确、维护性良好的HTML代码结构。<!-- more -->\n###学习ejs\n####安装 EJS 命令如下：\n    npm install ejs\n####jhon的代码\n```js\n// Simple JavaScript Templating\n// John Resig - http://ejohn.org/ - MIT Licensed\n  (function(){\n  var cache = {};\n \n  this.tmpl = function tmpl(str, data){\n    // Figure out if we're getting a template, or if we need to\n    // load the template - and be sure to cache the result.\n    var fn = !/\\W/.test(str) ?\n      cache[str] = cache[str] ||\n        tmpl(document.getElementById(str).innerHTML) :\n     \n      // Generate a reusable function that will serve as a template\n      // generator (and which will be cached).\n      new Function(\"obj\",\n        \"var p=[],print=function(){p.push.apply(p,arguments);};\" +\n       \n        // Introduce the data as local variables using with(){}\n        \"with(obj){p.push('\" +\n       \n        // Convert the template into pure JavaScript\n        str\n          .replace(/[\\r\\t\\n]/g, \" \")\n          .split(\"<%\").join(\"\\t\")\n          .replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n          .replace(/\\t=(.*?)%>/g, \"',$1,'\")\n          .split(\"\\t\").join(\"');\")\n          .split(\"%>\").join(\"p.push('\")\n          .split(\"\\r\").join(\"\\\\'\")\n      + \"');}return p.join('');\");\n   \n    // Provide some basic currying to the user\n    return data ? fn( data ) : fn;\n  };\n})();\n```\n##学习yalm配置\n###学习写yalm的语法\n\n\n\n##学习编写hexo\n###学习markdown编写文章\n\n\n","source":"_posts/hexo-note.md","raw":"title: 学习如何实现hexo博客文档\ndate: 2014-12-26 12:30:40\ncategories: 技术\ntags: hexo\n---\n##学习ejs网页模板文件编写\n###关于ejs\n是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。EJS在这里专指WEB所使用的模板引擎之一。EJS的优点是将会带给你明确、维护性良好的HTML代码结构。<!-- more -->\n###学习ejs\n####安装 EJS 命令如下：\n    npm install ejs\n####jhon的代码\n```js\n// Simple JavaScript Templating\n// John Resig - http://ejohn.org/ - MIT Licensed\n  (function(){\n  var cache = {};\n \n  this.tmpl = function tmpl(str, data){\n    // Figure out if we're getting a template, or if we need to\n    // load the template - and be sure to cache the result.\n    var fn = !/\\W/.test(str) ?\n      cache[str] = cache[str] ||\n        tmpl(document.getElementById(str).innerHTML) :\n     \n      // Generate a reusable function that will serve as a template\n      // generator (and which will be cached).\n      new Function(\"obj\",\n        \"var p=[],print=function(){p.push.apply(p,arguments);};\" +\n       \n        // Introduce the data as local variables using with(){}\n        \"with(obj){p.push('\" +\n       \n        // Convert the template into pure JavaScript\n        str\n          .replace(/[\\r\\t\\n]/g, \" \")\n          .split(\"<%\").join(\"\\t\")\n          .replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n          .replace(/\\t=(.*?)%>/g, \"',$1,'\")\n          .split(\"\\t\").join(\"');\")\n          .split(\"%>\").join(\"p.push('\")\n          .split(\"\\r\").join(\"\\\\'\")\n      + \"');}return p.join('');\");\n   \n    // Provide some basic currying to the user\n    return data ? fn( data ) : fn;\n  };\n})();\n```\n##学习yalm配置\n###学习写yalm的语法\n\n\n\n##学习编写hexo\n###学习markdown编写文章\n\n\n","slug":"hexo-note","published":1,"updated":"2016-12-12T10:23:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc2z000g2u6bwogqhbyy","content":"<p>##学习ejs网页模板文件编写</p>\n<p>###关于ejs<br>是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。EJS在这里专指WEB所使用的模板引擎之一。EJS的优点是将会带给你明确、维护性良好的HTML代码结构。<a id=\"more\"></a></p>\n<p>###学习ejs</p>\n<p>####安装 EJS 命令如下：<br>    npm install ejs</p>\n<p>####jhon的代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Simple JavaScript Templating</span></div><div class=\"line\"><span class=\"comment\">// John Resig - http://ejohn.org/ - MIT Licensed</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">this</span>.tmpl = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tmpl</span>(<span class=\"params\">str, data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Figure out if we're getting a template, or if we need to</span></div><div class=\"line\">    <span class=\"comment\">// load the template - and be sure to cache the result.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> fn = !<span class=\"regexp\">/\\W/</span>.test(str) ?</div><div class=\"line\">      cache[str] = cache[str] ||</div><div class=\"line\">        tmpl(<span class=\"built_in\">document</span>.getElementById(str).innerHTML) :</div><div class=\"line\">     </div><div class=\"line\">      <span class=\"comment\">// Generate a reusable function that will serve as a template</span></div><div class=\"line\">      <span class=\"comment\">// generator (and which will be cached).</span></div><div class=\"line\">      <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"obj\"</span>,</div><div class=\"line\">        <span class=\"string\">\"var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;\"</span> +</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"comment\">// Introduce the data as local variables using with()&#123;&#125;</span></div><div class=\"line\">        <span class=\"string\">\"with(obj)&#123;p.push('\"</span> +</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"comment\">// Convert the template into pure JavaScript</span></div><div class=\"line\">        str</div><div class=\"line\">          .replace(<span class=\"regexp\">/[\\r\\t\\n]/g</span>, <span class=\"string\">\" \"</span>)</div><div class=\"line\">          .split(<span class=\"string\">\"&lt;%\"</span>).join(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">          .replace(<span class=\"regexp\">/((^|%&gt;)[^\\t]*)'/g</span>, <span class=\"string\">\"$1\\r\"</span>)</div><div class=\"line\">          .replace(<span class=\"regexp\">/\\t=(.*?)%&gt;/g</span>, <span class=\"string\">\"',$1,'\"</span>)</div><div class=\"line\">          .split(<span class=\"string\">\"\\t\"</span>).join(<span class=\"string\">\"');\"</span>)</div><div class=\"line\">          .split(<span class=\"string\">\"%&gt;\"</span>).join(<span class=\"string\">\"p.push('\"</span>)</div><div class=\"line\">          .split(<span class=\"string\">\"\\r\"</span>).join(<span class=\"string\">\"\\\\'\"</span>)</div><div class=\"line\">      + <span class=\"string\">\"');&#125;return p.join('');\"</span>);</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// Provide some basic currying to the user</span></div><div class=\"line\">    <span class=\"keyword\">return</span> data ? fn( data ) : fn;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>##学习yalm配置</p>\n<p>###学习写yalm的语法</p>\n<p>##学习编写hexo</p>\n<p>###学习markdown编写文章</p>\n","excerpt":"<p>##学习ejs网页模板文件编写</p>\n<p>###关于ejs<br>是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。EJS在这里专指WEB所使用的模板引擎之一。EJS的优点是将会带给你明确、维护性良好的HTML代码结构。","more":"</p>\n<p>###学习ejs</p>\n<p>####安装 EJS 命令如下：<br>    npm install ejs</p>\n<p>####jhon的代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Simple JavaScript Templating</span></div><div class=\"line\"><span class=\"comment\">// John Resig - http://ejohn.org/ - MIT Licensed</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">this</span>.tmpl = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tmpl</span>(<span class=\"params\">str, data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Figure out if we're getting a template, or if we need to</span></div><div class=\"line\">    <span class=\"comment\">// load the template - and be sure to cache the result.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> fn = !<span class=\"regexp\">/\\W/</span>.test(str) ?</div><div class=\"line\">      cache[str] = cache[str] ||</div><div class=\"line\">        tmpl(<span class=\"built_in\">document</span>.getElementById(str).innerHTML) :</div><div class=\"line\">     </div><div class=\"line\">      <span class=\"comment\">// Generate a reusable function that will serve as a template</span></div><div class=\"line\">      <span class=\"comment\">// generator (and which will be cached).</span></div><div class=\"line\">      <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"obj\"</span>,</div><div class=\"line\">        <span class=\"string\">\"var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;\"</span> +</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"comment\">// Introduce the data as local variables using with()&#123;&#125;</span></div><div class=\"line\">        <span class=\"string\">\"with(obj)&#123;p.push('\"</span> +</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"comment\">// Convert the template into pure JavaScript</span></div><div class=\"line\">        str</div><div class=\"line\">          .replace(<span class=\"regexp\">/[\\r\\t\\n]/g</span>, <span class=\"string\">\" \"</span>)</div><div class=\"line\">          .split(<span class=\"string\">\"&lt;%\"</span>).join(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">          .replace(<span class=\"regexp\">/((^|%&gt;)[^\\t]*)'/g</span>, <span class=\"string\">\"$1\\r\"</span>)</div><div class=\"line\">          .replace(<span class=\"regexp\">/\\t=(.*?)%&gt;/g</span>, <span class=\"string\">\"',$1,'\"</span>)</div><div class=\"line\">          .split(<span class=\"string\">\"\\t\"</span>).join(<span class=\"string\">\"');\"</span>)</div><div class=\"line\">          .split(<span class=\"string\">\"%&gt;\"</span>).join(<span class=\"string\">\"p.push('\"</span>)</div><div class=\"line\">          .split(<span class=\"string\">\"\\r\"</span>).join(<span class=\"string\">\"\\\\'\"</span>)</div><div class=\"line\">      + <span class=\"string\">\"');&#125;return p.join('');\"</span>);</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// Provide some basic currying to the user</span></div><div class=\"line\">    <span class=\"keyword\">return</span> data ? fn( data ) : fn;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>##学习yalm配置</p>\n<p>###学习写yalm的语法</p>\n<p>##学习编写hexo</p>\n<p>###学习markdown编写文章</p>"},{"title":"Get Started with Docker 1.12 on Raspberry Pi","date":"2017-01-05T01:53:29.000Z","_content":"I have put this guide together to help you get started with Docker 1.12 on your Raspberry Pi. For simplicity we will use the default operating system for the Pi - called Raspbian. This guide currently works with most models of Raspberry Pi and I'd recommending using the Model B 2/3 or Zero.\n\n![](/img/docker/1.jpg)\nRaspberry Pi cluster\n\nRaspberry Pi Zero Cluster\n\nDon't know what Docker is yet or what you could use it for? Check out [Understanding Docker](https://docs.docker.com/engine/understanding-docker/) from the offical docs.\n\n## Already using Docker on your Pi?\nHead straight over to my Live Swarm Deep Dive video where we connect multiple Raspberry Pis to together to create a Docker Swarm.\n<!-- more -->\n## Preparing the SD card\nDownload the latest Raspbian Jessie Lite image from https://www.raspberrypi.org/downloads/raspbian/.\n\n`curl -O https://downloads.raspberrypi.org/raspbian_latest`\n\nThe Raspbian Jessie Lite image is the same as the regular image but only contains the bare minimum amount of packages.\n\nNow if you are on Linux or Mac use the dd tool to write the image to an SD card.\n\nLinux:\n\nUse lsblk to list all bulk storage devices. Carefully pick the correct disk and replace /dev/sde with the destination in the following command:\n```js\n$ sudo dd if=raspbian_latest of=/dev/sde bs=1m\n```\nMac:\n\nCheck which disk you need with: sudo diskutil list\n```js\n$ sudo dd if=raspbian_latest of=/dev/rdisk2 BS=1m\n```\nFor Windows use a tool such as Win32DiskImager.\n\nInstall Docker\nOnce you boot up the Raspberry Pi you will be able to locate it on your network through the bonjour/avahi service.\n\nConnect with SSH\n```js\n$ ssh pi@raspberrypi.local\n```\nThe password is raspberry.\n\nFor security reasons it is advisable to change the password of the user pi with the passwd command.\n\nOptional customizations\nAt this point you may want to edit the hostname of the Pi. Use an editor and change the word raspberrypi to something else in:\n```js\n/etc/hosts\n/etc/hostname\n```\nIf you are using the Pi for a headless application then you can reduce the memory split between the GPU and the rest of the system down to 16mb.\n\nEdit `/boot/config.txt` and add this line:\n\n`gpu_mem=16  `\nStart the Docker installer\nAn automated script maintained by the Docker project will create a systemd service file and copy the relevant Docker binaries into /usr/bin/.\n\n`$ curl -sSL get.docker.com | sh`\nUntil recently installing Docker on a Pi was a very manual process which often meant having to build Docker from scratch on a very underpowered device (this could take hours). Lots of hard work by ARM enthusiasts Hypriot has helped make .deb packages a first-class citizen in Docker's own CI process.\n\nIf you would like to opt into using a testing version then replace get.docker.com with test.docker.com. This will bring down a newer version but it may still have some open issues associated with it.\n\nBeware that this work does not extend to non-Debian distributions such as Arch Linux or Fedora. Arch Linux for ARM currently has Docker 1.11 available in its package manager pacman.\n\nConfigure Docker\nThere are a couple of manual steps needed to get the best experience.\n\nSet Docker to auto-start\n`$ sudo systemctl enable docker`\nYou can now reboot the Pi, or start the Docker daemon with:\n\n`$ sudo systemctl start docker`\nEnable Docker client\nThe Docker client can only be used by root or members of the docker group. Add pi or your equivalent user to the docker group:\n\n`$ sudo usermod -aG docker pi`\nAfter making this change, log out and reconnect with ssh.\n\nUsing Docker\nSupport for ARM and the Raspberry Pi is a work-in-progress item which means there are a few things you should know.\n\nPulling images from the Hub\nIf you pull down the busybox image from the Docker hub it will not function correctly. This is because the contents are designed for a regular PC or the x86_64 architecture. There are on-going efforts to fix this in future versions of Docker.\n\nWe should only attempt to use images which we know are designed to work on ARM. At present there are no strictly official images but the Docker team maintains a number of experimental images under the prefix \narmfh.\n\narmhf refers to the way the code on the Raspberry Pi is ported - hf means hard float.\n\nAn image made by Resin.io is used by the current Docker build process to create a base image which is usable on all supported versions of the Raspberry Pi. It is a light-weight version of Raspbian Jessie which makes it a good choice.\n\nRunning your first ARM image\n```js\n$ docker run -ti resin/rpi-raspbian:jessie-20160831 /bin/bash\n\nroot@0c68918c47d3:/# cat /etc/issue  \nRaspbian GNU/Linux 8 \\n \\l\n\nroot@0c68918c47d3:/# exit  \nTry the image and type exit when you are finished.\n```\nBuild a new image\nBuild your image like a regular Docker image but use resin/rpi-raspbian as your base. Let's add curl and ca-certificates and create an image which will access docker.com.\n```js\nFROM resin/rpi-raspbian:jessie-20160831  \nRUN apt-get update && \\  \n    apt-get -qy install curl ca-certificates\nCMD [\"curl\", \"https://docker.com\"]  \nCreate a Node.js application\nThis Dockerfile uses Resin.io's Raspbian image as a base and pulls down Node 4.5 LTS from the official Node.js site.\n\nFROM resin/rpi-raspbian:jessie-20160831  \nRUN apt-get update && \\  \n    apt-get -qy install curl \\\n                build-essential python \\\n                ca-certificates\nWORKDIR /root/  \nRUN curl -O \\  \n  https://nodejs.org/dist/v4.5.0/node-v4.5.0-linux-armv6l.tar.gz\nRUN tar -xvf node-*.tar.gz -C /usr/local \\  \n  --strip-components=1\n\nCMD [\"node\"]  \nTo build and run the image:\n\n$ docker build -t node:arm .\n$ docker run -ti node:arm\n>\nYou can now test out a few Node.js instructions or fork my simple hello-world microservice on Github to take it further.\n\n> process.version\n'v4.5.0'  \n> var fs = require('fs');\n> console.log(fs.readFileSync(\"/etc/hosts\", \"utf8\"));\n> process.exit()\n$ \n```\nMake use of GPIO\nIn order to make use of additional hardware and add-on boards you will need to access the GPIO pins. These require an additional flag at runtime of --privileged to allow the container to write to the special area of memory managing GPIO.\n\nThe standard RPi.GPIO library will work through Docker including the libraries from several hardware manufactures.\n\nThis is a sample Dockerfile for using the defacto RPi.GPIO library.\n```js\nFROM resin/rpi-raspbian:jessie-20160831\n\nRUN apt-get -q update && \\  \n    apt-get -qy install \\\n        python python-pip \\\n        python-dev python-pip gcc make  \nRUN pip install rpi.gpio  \nBuild this image as a basis for adding your GPIO scripts at a later date.\n```\n`$ docker build -t gpio-base .`\nThe following Python code can be used to will blink an LED connected to GPIO pin 18.\n```js\nimport RPi.GPIO as GPIO  \nimport time  \nGPIO.setmode(GPIO.BCM)  \nled_pin = 17  \nGPIO.setup(led_pin, GPIO.OUT)\n\nwhile(True):  \n    GPIO.output(led_pin, GPIO.HIGH)\n    time.sleep(1)\n    GPIO.output(led_pin, GPIO.LOW)\n    time.sleep(1)\napp.py\n\n```\n\nJust use ADD to transfer the script into a new image depriving from gpio-base:\n```js\nFROM gpio-base:latest  \nADD ./app.py ./app.py\n\nCMD [\"python\", \"app.py\"]  \n```\nYou will need to run this container in --privileged mode in order to be able to access the GPIO pins.\n```js\n$ docker build -t blink .\n$ docker run -ti --privileged blink\n```\nIf you enjoyed that then how about making an Internet-enabled buzzer or cheerlight? Here's an example of using the Python Flask library to create a web server that controls a GPIO pin:\n\nGithub: GPIO web server in Docker\n\nFor more on interacting with GPIO head over to the Raspberry Pi Foundation's Getting Started with Physical Computing worksheet.\n\nFeedback & questions\nContact me via Twitter @alexellisuk or in the comments section below. What do you want to see on the blog next? Have you tried it out? Let us know!\n\nResin.io recently changed their base image so instead of using resin/rpi-raspbian:jessie they are suggesting we use resin/rpi-raspbian:jessie-20160831.\n\nSee also:\nStar or fork my docker-arm repo on Github for a list of useful Dockerfiles and information on Docker Swarm.\n\nBuild your Pi Zero Swarm with OTG networking only - look ma, no Ethernet!\n\nHosting series - How I self-host this blog on a Pi\n\n","source":"_posts/install-docker-to-raspberry.md","raw":"title: Get Started with Docker 1.12 on Raspberry Pi \ndate: 2017-01-05 09:53:29\ncategories: 技术\ntags: docker\n---\nI have put this guide together to help you get started with Docker 1.12 on your Raspberry Pi. For simplicity we will use the default operating system for the Pi - called Raspbian. This guide currently works with most models of Raspberry Pi and I'd recommending using the Model B 2/3 or Zero.\n\n![](/img/docker/1.jpg)\nRaspberry Pi cluster\n\nRaspberry Pi Zero Cluster\n\nDon't know what Docker is yet or what you could use it for? Check out [Understanding Docker](https://docs.docker.com/engine/understanding-docker/) from the offical docs.\n\n## Already using Docker on your Pi?\nHead straight over to my Live Swarm Deep Dive video where we connect multiple Raspberry Pis to together to create a Docker Swarm.\n<!-- more -->\n## Preparing the SD card\nDownload the latest Raspbian Jessie Lite image from https://www.raspberrypi.org/downloads/raspbian/.\n\n`curl -O https://downloads.raspberrypi.org/raspbian_latest`\n\nThe Raspbian Jessie Lite image is the same as the regular image but only contains the bare minimum amount of packages.\n\nNow if you are on Linux or Mac use the dd tool to write the image to an SD card.\n\nLinux:\n\nUse lsblk to list all bulk storage devices. Carefully pick the correct disk and replace /dev/sde with the destination in the following command:\n```js\n$ sudo dd if=raspbian_latest of=/dev/sde bs=1m\n```\nMac:\n\nCheck which disk you need with: sudo diskutil list\n```js\n$ sudo dd if=raspbian_latest of=/dev/rdisk2 BS=1m\n```\nFor Windows use a tool such as Win32DiskImager.\n\nInstall Docker\nOnce you boot up the Raspberry Pi you will be able to locate it on your network through the bonjour/avahi service.\n\nConnect with SSH\n```js\n$ ssh pi@raspberrypi.local\n```\nThe password is raspberry.\n\nFor security reasons it is advisable to change the password of the user pi with the passwd command.\n\nOptional customizations\nAt this point you may want to edit the hostname of the Pi. Use an editor and change the word raspberrypi to something else in:\n```js\n/etc/hosts\n/etc/hostname\n```\nIf you are using the Pi for a headless application then you can reduce the memory split between the GPU and the rest of the system down to 16mb.\n\nEdit `/boot/config.txt` and add this line:\n\n`gpu_mem=16  `\nStart the Docker installer\nAn automated script maintained by the Docker project will create a systemd service file and copy the relevant Docker binaries into /usr/bin/.\n\n`$ curl -sSL get.docker.com | sh`\nUntil recently installing Docker on a Pi was a very manual process which often meant having to build Docker from scratch on a very underpowered device (this could take hours). Lots of hard work by ARM enthusiasts Hypriot has helped make .deb packages a first-class citizen in Docker's own CI process.\n\nIf you would like to opt into using a testing version then replace get.docker.com with test.docker.com. This will bring down a newer version but it may still have some open issues associated with it.\n\nBeware that this work does not extend to non-Debian distributions such as Arch Linux or Fedora. Arch Linux for ARM currently has Docker 1.11 available in its package manager pacman.\n\nConfigure Docker\nThere are a couple of manual steps needed to get the best experience.\n\nSet Docker to auto-start\n`$ sudo systemctl enable docker`\nYou can now reboot the Pi, or start the Docker daemon with:\n\n`$ sudo systemctl start docker`\nEnable Docker client\nThe Docker client can only be used by root or members of the docker group. Add pi or your equivalent user to the docker group:\n\n`$ sudo usermod -aG docker pi`\nAfter making this change, log out and reconnect with ssh.\n\nUsing Docker\nSupport for ARM and the Raspberry Pi is a work-in-progress item which means there are a few things you should know.\n\nPulling images from the Hub\nIf you pull down the busybox image from the Docker hub it will not function correctly. This is because the contents are designed for a regular PC or the x86_64 architecture. There are on-going efforts to fix this in future versions of Docker.\n\nWe should only attempt to use images which we know are designed to work on ARM. At present there are no strictly official images but the Docker team maintains a number of experimental images under the prefix \narmfh.\n\narmhf refers to the way the code on the Raspberry Pi is ported - hf means hard float.\n\nAn image made by Resin.io is used by the current Docker build process to create a base image which is usable on all supported versions of the Raspberry Pi. It is a light-weight version of Raspbian Jessie which makes it a good choice.\n\nRunning your first ARM image\n```js\n$ docker run -ti resin/rpi-raspbian:jessie-20160831 /bin/bash\n\nroot@0c68918c47d3:/# cat /etc/issue  \nRaspbian GNU/Linux 8 \\n \\l\n\nroot@0c68918c47d3:/# exit  \nTry the image and type exit when you are finished.\n```\nBuild a new image\nBuild your image like a regular Docker image but use resin/rpi-raspbian as your base. Let's add curl and ca-certificates and create an image which will access docker.com.\n```js\nFROM resin/rpi-raspbian:jessie-20160831  \nRUN apt-get update && \\  \n    apt-get -qy install curl ca-certificates\nCMD [\"curl\", \"https://docker.com\"]  \nCreate a Node.js application\nThis Dockerfile uses Resin.io's Raspbian image as a base and pulls down Node 4.5 LTS from the official Node.js site.\n\nFROM resin/rpi-raspbian:jessie-20160831  \nRUN apt-get update && \\  \n    apt-get -qy install curl \\\n                build-essential python \\\n                ca-certificates\nWORKDIR /root/  \nRUN curl -O \\  \n  https://nodejs.org/dist/v4.5.0/node-v4.5.0-linux-armv6l.tar.gz\nRUN tar -xvf node-*.tar.gz -C /usr/local \\  \n  --strip-components=1\n\nCMD [\"node\"]  \nTo build and run the image:\n\n$ docker build -t node:arm .\n$ docker run -ti node:arm\n>\nYou can now test out a few Node.js instructions or fork my simple hello-world microservice on Github to take it further.\n\n> process.version\n'v4.5.0'  \n> var fs = require('fs');\n> console.log(fs.readFileSync(\"/etc/hosts\", \"utf8\"));\n> process.exit()\n$ \n```\nMake use of GPIO\nIn order to make use of additional hardware and add-on boards you will need to access the GPIO pins. These require an additional flag at runtime of --privileged to allow the container to write to the special area of memory managing GPIO.\n\nThe standard RPi.GPIO library will work through Docker including the libraries from several hardware manufactures.\n\nThis is a sample Dockerfile for using the defacto RPi.GPIO library.\n```js\nFROM resin/rpi-raspbian:jessie-20160831\n\nRUN apt-get -q update && \\  \n    apt-get -qy install \\\n        python python-pip \\\n        python-dev python-pip gcc make  \nRUN pip install rpi.gpio  \nBuild this image as a basis for adding your GPIO scripts at a later date.\n```\n`$ docker build -t gpio-base .`\nThe following Python code can be used to will blink an LED connected to GPIO pin 18.\n```js\nimport RPi.GPIO as GPIO  \nimport time  \nGPIO.setmode(GPIO.BCM)  \nled_pin = 17  \nGPIO.setup(led_pin, GPIO.OUT)\n\nwhile(True):  \n    GPIO.output(led_pin, GPIO.HIGH)\n    time.sleep(1)\n    GPIO.output(led_pin, GPIO.LOW)\n    time.sleep(1)\napp.py\n\n```\n\nJust use ADD to transfer the script into a new image depriving from gpio-base:\n```js\nFROM gpio-base:latest  \nADD ./app.py ./app.py\n\nCMD [\"python\", \"app.py\"]  \n```\nYou will need to run this container in --privileged mode in order to be able to access the GPIO pins.\n```js\n$ docker build -t blink .\n$ docker run -ti --privileged blink\n```\nIf you enjoyed that then how about making an Internet-enabled buzzer or cheerlight? Here's an example of using the Python Flask library to create a web server that controls a GPIO pin:\n\nGithub: GPIO web server in Docker\n\nFor more on interacting with GPIO head over to the Raspberry Pi Foundation's Getting Started with Physical Computing worksheet.\n\nFeedback & questions\nContact me via Twitter @alexellisuk or in the comments section below. What do you want to see on the blog next? Have you tried it out? Let us know!\n\nResin.io recently changed their base image so instead of using resin/rpi-raspbian:jessie they are suggesting we use resin/rpi-raspbian:jessie-20160831.\n\nSee also:\nStar or fork my docker-arm repo on Github for a list of useful Dockerfiles and information on Docker Swarm.\n\nBuild your Pi Zero Swarm with OTG networking only - look ma, no Ethernet!\n\nHosting series - How I self-host this blog on a Pi\n\n","slug":"install-docker-to-raspberry","published":1,"updated":"2017-01-05T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc31000i2u6b9d8ycvxd","content":"<p>I have put this guide together to help you get started with Docker 1.12 on your Raspberry Pi. For simplicity we will use the default operating system for the Pi - called Raspbian. This guide currently works with most models of Raspberry Pi and I’d recommending using the Model B 2/3 or Zero.</p>\n<p><img src=\"/img/docker/1.jpg\" alt=\"\"><br>Raspberry Pi cluster</p>\n<p>Raspberry Pi Zero Cluster</p>\n<p>Don’t know what Docker is yet or what you could use it for? Check out <a href=\"https://docs.docker.com/engine/understanding-docker/\" target=\"_blank\" rel=\"external\">Understanding Docker</a> from the offical docs.</p>\n<h2 id=\"Already-using-Docker-on-your-Pi\"><a href=\"#Already-using-Docker-on-your-Pi\" class=\"headerlink\" title=\"Already using Docker on your Pi?\"></a>Already using Docker on your Pi?</h2><p>Head straight over to my Live Swarm Deep Dive video where we connect multiple Raspberry Pis to together to create a Docker Swarm.<br><a id=\"more\"></a></p>\n<h2 id=\"Preparing-the-SD-card\"><a href=\"#Preparing-the-SD-card\" class=\"headerlink\" title=\"Preparing the SD card\"></a>Preparing the SD card</h2><p>Download the latest Raspbian Jessie Lite image from <a href=\"https://www.raspberrypi.org/downloads/raspbian/\" target=\"_blank\" rel=\"external\">https://www.raspberrypi.org/downloads/raspbian/</a>.</p>\n<p><code>curl -O https://downloads.raspberrypi.org/raspbian_latest</code></p>\n<p>The Raspbian Jessie Lite image is the same as the regular image but only contains the bare minimum amount of packages.</p>\n<p>Now if you are on Linux or Mac use the dd tool to write the image to an SD card.</p>\n<p>Linux:</p>\n<p>Use lsblk to list all bulk storage devices. Carefully pick the correct disk and replace /dev/sde with the destination in the following command:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo dd <span class=\"keyword\">if</span>=raspbian_latest <span class=\"keyword\">of</span>=<span class=\"regexp\">/dev/</span>sde bs=<span class=\"number\">1</span>m</div></pre></td></tr></table></figure></p>\n<p>Mac:</p>\n<p>Check which disk you need with: sudo diskutil list<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo dd <span class=\"keyword\">if</span>=raspbian_latest <span class=\"keyword\">of</span>=<span class=\"regexp\">/dev/</span>rdisk2 BS=<span class=\"number\">1</span>m</div></pre></td></tr></table></figure></p>\n<p>For Windows use a tool such as Win32DiskImager.</p>\n<p>Install Docker<br>Once you boot up the Raspberry Pi you will be able to locate it on your network through the bonjour/avahi service.</p>\n<p>Connect with SSH<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh pi@raspberrypi.local</div></pre></td></tr></table></figure></p>\n<p>The password is raspberry.</p>\n<p>For security reasons it is advisable to change the password of the user pi with the passwd command.</p>\n<p>Optional customizations<br>At this point you may want to edit the hostname of the Pi. Use an editor and change the word raspberrypi to something else in:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/hosts</div><div class=\"line\">/etc/hostname</div></pre></td></tr></table></figure></p>\n<p>If you are using the Pi for a headless application then you can reduce the memory split between the GPU and the rest of the system down to 16mb.</p>\n<p>Edit <code>/boot/config.txt</code> and add this line:</p>\n<p><code>gpu_mem=16</code><br>Start the Docker installer<br>An automated script maintained by the Docker project will create a systemd service file and copy the relevant Docker binaries into /usr/bin/.</p>\n<p><code>$ curl -sSL get.docker.com | sh</code><br>Until recently installing Docker on a Pi was a very manual process which often meant having to build Docker from scratch on a very underpowered device (this could take hours). Lots of hard work by ARM enthusiasts Hypriot has helped make .deb packages a first-class citizen in Docker’s own CI process.</p>\n<p>If you would like to opt into using a testing version then replace get.docker.com with test.docker.com. This will bring down a newer version but it may still have some open issues associated with it.</p>\n<p>Beware that this work does not extend to non-Debian distributions such as Arch Linux or Fedora. Arch Linux for ARM currently has Docker 1.11 available in its package manager pacman.</p>\n<p>Configure Docker<br>There are a couple of manual steps needed to get the best experience.</p>\n<p>Set Docker to auto-start<br><code>$ sudo systemctl enable docker</code><br>You can now reboot the Pi, or start the Docker daemon with:</p>\n<p><code>$ sudo systemctl start docker</code><br>Enable Docker client<br>The Docker client can only be used by root or members of the docker group. Add pi or your equivalent user to the docker group:</p>\n<p><code>$ sudo usermod -aG docker pi</code><br>After making this change, log out and reconnect with ssh.</p>\n<p>Using Docker<br>Support for ARM and the Raspberry Pi is a work-in-progress item which means there are a few things you should know.</p>\n<p>Pulling images from the Hub<br>If you pull down the busybox image from the Docker hub it will not function correctly. This is because the contents are designed for a regular PC or the x86_64 architecture. There are on-going efforts to fix this in future versions of Docker.</p>\n<p>We should only attempt to use images which we know are designed to work on ARM. At present there are no strictly official images but the Docker team maintains a number of experimental images under the prefix<br>armfh.</p>\n<p>armhf refers to the way the code on the Raspberry Pi is ported - hf means hard float.</p>\n<p>An image made by Resin.io is used by the current Docker build process to create a base image which is usable on all supported versions of the Raspberry Pi. It is a light-weight version of Raspbian Jessie which makes it a good choice.</p>\n<p>Running your first ARM image<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker run -ti resin/rpi-raspbian:jessie-20160831 /bin/bash</div><div class=\"line\"></div><div class=\"line\">root@0c68918c47d3:/# cat /etc/issue  </div><div class=\"line\">Raspbian GNU/Linux 8 \\n \\l</div><div class=\"line\"></div><div class=\"line\">root@0c68918c47d3:/# exit  </div><div class=\"line\">Try the image and type exit when you are finished.</div></pre></td></tr></table></figure></p>\n<p>Build a new image<br>Build your image like a regular Docker image but use resin/rpi-raspbian as your base. Let’s add curl and ca-certificates and create an image which will access docker.com.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM resin/rpi-raspbian:jessie-20160831  </div><div class=\"line\">RUN apt-get update &amp;&amp; \\  </div><div class=\"line\">    apt-get -qy install curl ca-certificates</div><div class=\"line\">CMD [\"curl\", \"https://docker.com\"]  </div><div class=\"line\">Create a Node.js application</div><div class=\"line\">This Dockerfile uses Resin.io's Raspbian image as a base and pulls down Node 4.5 LTS from the official Node.js site.</div><div class=\"line\"></div><div class=\"line\">FROM resin/rpi-raspbian:jessie-20160831  </div><div class=\"line\">RUN apt-get update &amp;&amp; \\  </div><div class=\"line\">    apt-get -qy install curl \\</div><div class=\"line\">                build-essential python \\</div><div class=\"line\">                ca-certificates</div><div class=\"line\">WORKDIR /root/  </div><div class=\"line\">RUN curl -O \\  </div><div class=\"line\">  https://nodejs.org/dist/v4.5.0/node-v4.5.0-linux-armv6l.tar.gz</div><div class=\"line\">RUN tar -xvf node-*.tar.gz -C /usr/local \\  </div><div class=\"line\">  --strip-components=1</div><div class=\"line\"></div><div class=\"line\">CMD [\"node\"]  </div><div class=\"line\">To build and run the image:</div><div class=\"line\"></div><div class=\"line\">$ docker build -t node:arm .</div><div class=\"line\">$ docker run -ti node:arm</div><div class=\"line\">&gt;</div><div class=\"line\">You can now test out a few Node.js instructions or fork my simple hello-world microservice on Github to take it further.</div><div class=\"line\"></div><div class=\"line\">&gt; process.version</div><div class=\"line\">'v4.5.0'  </div><div class=\"line\">&gt; var fs = require('fs');</div><div class=\"line\">&gt; console.log(fs.readFileSync(\"/etc/hosts\", \"utf8\"));</div><div class=\"line\">&gt; process.exit()</div><div class=\"line\">$</div></pre></td></tr></table></figure></p>\n<p>Make use of GPIO<br>In order to make use of additional hardware and add-on boards you will need to access the GPIO pins. These require an additional flag at runtime of –privileged to allow the container to write to the special area of memory managing GPIO.</p>\n<p>The standard RPi.GPIO library will work through Docker including the libraries from several hardware manufactures.</p>\n<p>This is a sample Dockerfile for using the defacto RPi.GPIO library.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM resin/rpi-raspbian:jessie<span class=\"number\">-20160831</span></div><div class=\"line\"></div><div class=\"line\">RUN apt-get -q update &amp;&amp; \\  </div><div class=\"line\">    apt-get -qy install \\</div><div class=\"line\">        python python-pip \\</div><div class=\"line\">        python-dev python-pip gcc make  </div><div class=\"line\">RUN pip install rpi.gpio  </div><div class=\"line\">Build <span class=\"keyword\">this</span> image <span class=\"keyword\">as</span> a basis <span class=\"keyword\">for</span> adding your GPIO scripts at a later date.</div></pre></td></tr></table></figure></p>\n<p><code>$ docker build -t gpio-base .</code><br>The following Python code can be used to will blink an LED connected to GPIO pin 18.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO  </div><div class=\"line\"><span class=\"keyword\">import</span> time  </div><div class=\"line\">GPIO.setmode(GPIO.BCM)  </div><div class=\"line\">led_pin = <span class=\"number\">17</span>  </div><div class=\"line\">GPIO.setup(led_pin, GPIO.OUT)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(True):  </div><div class=\"line\">    GPIO.output(led_pin, GPIO.HIGH)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    GPIO.output(led_pin, GPIO.LOW)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">app.py</div></pre></td></tr></table></figure></p>\n<p>Just use ADD to transfer the script into a new image depriving from gpio-base:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM gpio-base:latest  </div><div class=\"line\">ADD ./app.py ./app.py</div><div class=\"line\"></div><div class=\"line\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</div></pre></td></tr></table></figure></p>\n<p>You will need to run this container in –privileged mode in order to be able to access the GPIO pins.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker build -t blink .</div><div class=\"line\">$ docker run -ti --privileged blink</div></pre></td></tr></table></figure></p>\n<p>If you enjoyed that then how about making an Internet-enabled buzzer or cheerlight? Here’s an example of using the Python Flask library to create a web server that controls a GPIO pin:</p>\n<p>Github: GPIO web server in Docker</p>\n<p>For more on interacting with GPIO head over to the Raspberry Pi Foundation’s Getting Started with Physical Computing worksheet.</p>\n<p>Feedback &amp; questions<br>Contact me via Twitter @alexellisuk or in the comments section below. What do you want to see on the blog next? Have you tried it out? Let us know!</p>\n<p>Resin.io recently changed their base image so instead of using resin/rpi-raspbian:jessie they are suggesting we use resin/rpi-raspbian:jessie-20160831.</p>\n<p>See also:<br>Star or fork my docker-arm repo on Github for a list of useful Dockerfiles and information on Docker Swarm.</p>\n<p>Build your Pi Zero Swarm with OTG networking only - look ma, no Ethernet!</p>\n<p>Hosting series - How I self-host this blog on a Pi</p>\n","excerpt":"<p>I have put this guide together to help you get started with Docker 1.12 on your Raspberry Pi. For simplicity we will use the default operating system for the Pi - called Raspbian. This guide currently works with most models of Raspberry Pi and I’d recommending using the Model B 2/3 or Zero.</p>\n<p><img src=\"/img/docker/1.jpg\" alt=\"\"><br>Raspberry Pi cluster</p>\n<p>Raspberry Pi Zero Cluster</p>\n<p>Don’t know what Docker is yet or what you could use it for? Check out <a href=\"https://docs.docker.com/engine/understanding-docker/\">Understanding Docker</a> from the offical docs.</p>\n<h2 id=\"Already-using-Docker-on-your-Pi\"><a href=\"#Already-using-Docker-on-your-Pi\" class=\"headerlink\" title=\"Already using Docker on your Pi?\"></a>Already using Docker on your Pi?</h2><p>Head straight over to my Live Swarm Deep Dive video where we connect multiple Raspberry Pis to together to create a Docker Swarm.<br>","more":"</p>\n<h2 id=\"Preparing-the-SD-card\"><a href=\"#Preparing-the-SD-card\" class=\"headerlink\" title=\"Preparing the SD card\"></a>Preparing the SD card</h2><p>Download the latest Raspbian Jessie Lite image from <a href=\"https://www.raspberrypi.org/downloads/raspbian/\">https://www.raspberrypi.org/downloads/raspbian/</a>.</p>\n<p><code>curl -O https://downloads.raspberrypi.org/raspbian_latest</code></p>\n<p>The Raspbian Jessie Lite image is the same as the regular image but only contains the bare minimum amount of packages.</p>\n<p>Now if you are on Linux or Mac use the dd tool to write the image to an SD card.</p>\n<p>Linux:</p>\n<p>Use lsblk to list all bulk storage devices. Carefully pick the correct disk and replace /dev/sde with the destination in the following command:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo dd <span class=\"keyword\">if</span>=raspbian_latest <span class=\"keyword\">of</span>=<span class=\"regexp\">/dev/</span>sde bs=<span class=\"number\">1</span>m</div></pre></td></tr></table></figure></p>\n<p>Mac:</p>\n<p>Check which disk you need with: sudo diskutil list<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo dd <span class=\"keyword\">if</span>=raspbian_latest <span class=\"keyword\">of</span>=<span class=\"regexp\">/dev/</span>rdisk2 BS=<span class=\"number\">1</span>m</div></pre></td></tr></table></figure></p>\n<p>For Windows use a tool such as Win32DiskImager.</p>\n<p>Install Docker<br>Once you boot up the Raspberry Pi you will be able to locate it on your network through the bonjour/avahi service.</p>\n<p>Connect with SSH<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh pi@raspberrypi.local</div></pre></td></tr></table></figure></p>\n<p>The password is raspberry.</p>\n<p>For security reasons it is advisable to change the password of the user pi with the passwd command.</p>\n<p>Optional customizations<br>At this point you may want to edit the hostname of the Pi. Use an editor and change the word raspberrypi to something else in:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/hosts</div><div class=\"line\">/etc/hostname</div></pre></td></tr></table></figure></p>\n<p>If you are using the Pi for a headless application then you can reduce the memory split between the GPU and the rest of the system down to 16mb.</p>\n<p>Edit <code>/boot/config.txt</code> and add this line:</p>\n<p><code>gpu_mem=16</code><br>Start the Docker installer<br>An automated script maintained by the Docker project will create a systemd service file and copy the relevant Docker binaries into /usr/bin/.</p>\n<p><code>$ curl -sSL get.docker.com | sh</code><br>Until recently installing Docker on a Pi was a very manual process which often meant having to build Docker from scratch on a very underpowered device (this could take hours). Lots of hard work by ARM enthusiasts Hypriot has helped make .deb packages a first-class citizen in Docker’s own CI process.</p>\n<p>If you would like to opt into using a testing version then replace get.docker.com with test.docker.com. This will bring down a newer version but it may still have some open issues associated with it.</p>\n<p>Beware that this work does not extend to non-Debian distributions such as Arch Linux or Fedora. Arch Linux for ARM currently has Docker 1.11 available in its package manager pacman.</p>\n<p>Configure Docker<br>There are a couple of manual steps needed to get the best experience.</p>\n<p>Set Docker to auto-start<br><code>$ sudo systemctl enable docker</code><br>You can now reboot the Pi, or start the Docker daemon with:</p>\n<p><code>$ sudo systemctl start docker</code><br>Enable Docker client<br>The Docker client can only be used by root or members of the docker group. Add pi or your equivalent user to the docker group:</p>\n<p><code>$ sudo usermod -aG docker pi</code><br>After making this change, log out and reconnect with ssh.</p>\n<p>Using Docker<br>Support for ARM and the Raspberry Pi is a work-in-progress item which means there are a few things you should know.</p>\n<p>Pulling images from the Hub<br>If you pull down the busybox image from the Docker hub it will not function correctly. This is because the contents are designed for a regular PC or the x86_64 architecture. There are on-going efforts to fix this in future versions of Docker.</p>\n<p>We should only attempt to use images which we know are designed to work on ARM. At present there are no strictly official images but the Docker team maintains a number of experimental images under the prefix<br>armfh.</p>\n<p>armhf refers to the way the code on the Raspberry Pi is ported - hf means hard float.</p>\n<p>An image made by Resin.io is used by the current Docker build process to create a base image which is usable on all supported versions of the Raspberry Pi. It is a light-weight version of Raspbian Jessie which makes it a good choice.</p>\n<p>Running your first ARM image<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker run -ti resin/rpi-raspbian:jessie-20160831 /bin/bash</div><div class=\"line\"></div><div class=\"line\">root@0c68918c47d3:/# cat /etc/issue  </div><div class=\"line\">Raspbian GNU/Linux 8 \\n \\l</div><div class=\"line\"></div><div class=\"line\">root@0c68918c47d3:/# exit  </div><div class=\"line\">Try the image and type exit when you are finished.</div></pre></td></tr></table></figure></p>\n<p>Build a new image<br>Build your image like a regular Docker image but use resin/rpi-raspbian as your base. Let’s add curl and ca-certificates and create an image which will access docker.com.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM resin/rpi-raspbian:jessie-20160831  </div><div class=\"line\">RUN apt-get update &amp;&amp; \\  </div><div class=\"line\">    apt-get -qy install curl ca-certificates</div><div class=\"line\">CMD [\"curl\", \"https://docker.com\"]  </div><div class=\"line\">Create a Node.js application</div><div class=\"line\">This Dockerfile uses Resin.io's Raspbian image as a base and pulls down Node 4.5 LTS from the official Node.js site.</div><div class=\"line\"></div><div class=\"line\">FROM resin/rpi-raspbian:jessie-20160831  </div><div class=\"line\">RUN apt-get update &amp;&amp; \\  </div><div class=\"line\">    apt-get -qy install curl \\</div><div class=\"line\">                build-essential python \\</div><div class=\"line\">                ca-certificates</div><div class=\"line\">WORKDIR /root/  </div><div class=\"line\">RUN curl -O \\  </div><div class=\"line\">  https://nodejs.org/dist/v4.5.0/node-v4.5.0-linux-armv6l.tar.gz</div><div class=\"line\">RUN tar -xvf node-*.tar.gz -C /usr/local \\  </div><div class=\"line\">  --strip-components=1</div><div class=\"line\"></div><div class=\"line\">CMD [\"node\"]  </div><div class=\"line\">To build and run the image:</div><div class=\"line\"></div><div class=\"line\">$ docker build -t node:arm .</div><div class=\"line\">$ docker run -ti node:arm</div><div class=\"line\">&gt;</div><div class=\"line\">You can now test out a few Node.js instructions or fork my simple hello-world microservice on Github to take it further.</div><div class=\"line\"></div><div class=\"line\">&gt; process.version</div><div class=\"line\">'v4.5.0'  </div><div class=\"line\">&gt; var fs = require('fs');</div><div class=\"line\">&gt; console.log(fs.readFileSync(\"/etc/hosts\", \"utf8\"));</div><div class=\"line\">&gt; process.exit()</div><div class=\"line\">$</div></pre></td></tr></table></figure></p>\n<p>Make use of GPIO<br>In order to make use of additional hardware and add-on boards you will need to access the GPIO pins. These require an additional flag at runtime of –privileged to allow the container to write to the special area of memory managing GPIO.</p>\n<p>The standard RPi.GPIO library will work through Docker including the libraries from several hardware manufactures.</p>\n<p>This is a sample Dockerfile for using the defacto RPi.GPIO library.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM resin/rpi-raspbian:jessie<span class=\"number\">-20160831</span></div><div class=\"line\"></div><div class=\"line\">RUN apt-get -q update &amp;&amp; \\  </div><div class=\"line\">    apt-get -qy install \\</div><div class=\"line\">        python python-pip \\</div><div class=\"line\">        python-dev python-pip gcc make  </div><div class=\"line\">RUN pip install rpi.gpio  </div><div class=\"line\">Build <span class=\"keyword\">this</span> image <span class=\"keyword\">as</span> a basis <span class=\"keyword\">for</span> adding your GPIO scripts at a later date.</div></pre></td></tr></table></figure></p>\n<p><code>$ docker build -t gpio-base .</code><br>The following Python code can be used to will blink an LED connected to GPIO pin 18.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO  </div><div class=\"line\"><span class=\"keyword\">import</span> time  </div><div class=\"line\">GPIO.setmode(GPIO.BCM)  </div><div class=\"line\">led_pin = <span class=\"number\">17</span>  </div><div class=\"line\">GPIO.setup(led_pin, GPIO.OUT)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(True):  </div><div class=\"line\">    GPIO.output(led_pin, GPIO.HIGH)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    GPIO.output(led_pin, GPIO.LOW)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">app.py</div></pre></td></tr></table></figure></p>\n<p>Just use ADD to transfer the script into a new image depriving from gpio-base:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM gpio-base:latest  </div><div class=\"line\">ADD ./app.py ./app.py</div><div class=\"line\"></div><div class=\"line\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</div></pre></td></tr></table></figure></p>\n<p>You will need to run this container in –privileged mode in order to be able to access the GPIO pins.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker build -t blink .</div><div class=\"line\">$ docker run -ti --privileged blink</div></pre></td></tr></table></figure></p>\n<p>If you enjoyed that then how about making an Internet-enabled buzzer or cheerlight? Here’s an example of using the Python Flask library to create a web server that controls a GPIO pin:</p>\n<p>Github: GPIO web server in Docker</p>\n<p>For more on interacting with GPIO head over to the Raspberry Pi Foundation’s Getting Started with Physical Computing worksheet.</p>\n<p>Feedback &amp; questions<br>Contact me via Twitter @alexellisuk or in the comments section below. What do you want to see on the blog next? Have you tried it out? Let us know!</p>\n<p>Resin.io recently changed their base image so instead of using resin/rpi-raspbian:jessie they are suggesting we use resin/rpi-raspbian:jessie-20160831.</p>\n<p>See also:<br>Star or fork my docker-arm repo on Github for a list of useful Dockerfiles and information on Docker Swarm.</p>\n<p>Build your Pi Zero Swarm with OTG networking only - look ma, no Ethernet!</p>\n<p>Hosting series - How I self-host this blog on a Pi</p>"},{"title":"markdown学习心得","date":"2015-01-14T01:53:29.000Z","_content":"\n### hexo中加入多个标签\n```js\n\ttages: [标签1,标签2,…标签n]\n\ttages:\n\t\t标签1\n\t\t标签2\n\t\t…\n\t\t标签n\n```\n<!-- more -->\n\n### markdown语法\n```js\n\t#标题\n\t‘#’ 一级标题（在#后面加个空格，否则不会起作用）\n\t‘##’ 二级标题\n\t‘###’ 三级标题\n\t‘####’ 四级标题\n\t‘#####’ 五级标题\n```\n## 例子：\n![mahua](/picture/images/1B138N144Q1L.jpg)\n## MaHua是什么?\n一个在线编辑markdown文档的编辑器\n\n向Mac下优秀的markdown编辑器mou致敬\n\n###### MaHua有哪些功能？\n\n* 方便的`导入导出`功能\n    *  直接把一个markdown的文本文件拖放到当前这个页面就可以了\n    *  导出为一个html格式的文件，样式一点也不会丢失\n* 编辑和预览`同步滚动`，所见即所得（右上角设置）\n* `VIM快捷键`支持，方便vim党们快速的操作 （右上角设置）\n* 强大的`自定义CSS`功能，方便定制自己的展示\n* 有数量也有质量的`主题`,编辑器和预览区域\n* 完美兼容`Github`的markdown语法\n* 预览区域`代码高亮`\n* 所有选项自动记忆\n\n## 有问题反馈\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\n\n* 邮件(jiangzhendong102#gmail.com, 把#换成@)\n* QQ: 237138130\n* weibo: [@冰岛之都](http://weibo.com/2810839183)\n* twitter: [@JiangWind](http://twitter.com/JiangWind)\n\n## 捐助开发者\n在兴趣的驱动下,写一个`免费`的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。\n当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。\n\n## 感激\n感谢以下的项目,排名不分先后\n\n* [mou](http://mouapp.com/) \n* [ace](http://ace.ajax.org/)\n* [jquery](http://jquery.com)\n\n## 关于作者\n\n```javascript\n  var ihubo = {\n    nickName  : \"J.wind\",\n    site : \"http://jwind.me\"\n  }\n```\n\n","source":"_posts/markdown.md","raw":"title: markdown学习心得\ndate: 2015-01-14 09:53:29\ncategories: 技术\ntags: markdown\n---\n\n### hexo中加入多个标签\n```js\n\ttages: [标签1,标签2,…标签n]\n\ttages:\n\t\t标签1\n\t\t标签2\n\t\t…\n\t\t标签n\n```\n<!-- more -->\n\n### markdown语法\n```js\n\t#标题\n\t‘#’ 一级标题（在#后面加个空格，否则不会起作用）\n\t‘##’ 二级标题\n\t‘###’ 三级标题\n\t‘####’ 四级标题\n\t‘#####’ 五级标题\n```\n## 例子：\n![mahua](/picture/images/1B138N144Q1L.jpg)\n## MaHua是什么?\n一个在线编辑markdown文档的编辑器\n\n向Mac下优秀的markdown编辑器mou致敬\n\n###### MaHua有哪些功能？\n\n* 方便的`导入导出`功能\n    *  直接把一个markdown的文本文件拖放到当前这个页面就可以了\n    *  导出为一个html格式的文件，样式一点也不会丢失\n* 编辑和预览`同步滚动`，所见即所得（右上角设置）\n* `VIM快捷键`支持，方便vim党们快速的操作 （右上角设置）\n* 强大的`自定义CSS`功能，方便定制自己的展示\n* 有数量也有质量的`主题`,编辑器和预览区域\n* 完美兼容`Github`的markdown语法\n* 预览区域`代码高亮`\n* 所有选项自动记忆\n\n## 有问题反馈\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\n\n* 邮件(jiangzhendong102#gmail.com, 把#换成@)\n* QQ: 237138130\n* weibo: [@冰岛之都](http://weibo.com/2810839183)\n* twitter: [@JiangWind](http://twitter.com/JiangWind)\n\n## 捐助开发者\n在兴趣的驱动下,写一个`免费`的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。\n当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。\n\n## 感激\n感谢以下的项目,排名不分先后\n\n* [mou](http://mouapp.com/) \n* [ace](http://ace.ajax.org/)\n* [jquery](http://jquery.com)\n\n## 关于作者\n\n```javascript\n  var ihubo = {\n    nickName  : \"J.wind\",\n    site : \"http://jwind.me\"\n  }\n```\n\n","slug":"markdown","published":1,"updated":"2016-12-13T02:05:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc33000m2u6buwefi4qb","content":"<h3 id=\"hexo中加入多个标签\"><a href=\"#hexo中加入多个标签\" class=\"headerlink\" title=\"hexo中加入多个标签\"></a>hexo中加入多个标签</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tages: [标签<span class=\"number\">1</span>,标签<span class=\"number\">2</span>,…标签n]</div><div class=\"line\">tages:</div><div class=\"line\">\t标签<span class=\"number\">1</span></div><div class=\"line\">\t标签<span class=\"number\">2</span></div><div class=\"line\">\t…</div><div class=\"line\">\t标签n</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"markdown语法\"><a href=\"#markdown语法\" class=\"headerlink\" title=\"markdown语法\"></a>markdown语法</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#标题</div><div class=\"line\">‘#’ 一级标题（在#后面加个空格，否则不会起作用）</div><div class=\"line\">‘##’ 二级标题</div><div class=\"line\">‘###’ 三级标题</div><div class=\"line\">‘####’ 四级标题</div><div class=\"line\">‘#####’ 五级标题</div></pre></td></tr></table></figure>\n<h2 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h2><p><img src=\"/picture/images/1B138N144Q1L.jpg\" alt=\"mahua\"></p>\n<h2 id=\"MaHua是什么\"><a href=\"#MaHua是什么\" class=\"headerlink\" title=\"MaHua是什么?\"></a>MaHua是什么?</h2><p>一个在线编辑markdown文档的编辑器</p>\n<p>向Mac下优秀的markdown编辑器mou致敬</p>\n<h6 id=\"MaHua有哪些功能？\"><a href=\"#MaHua有哪些功能？\" class=\"headerlink\" title=\"MaHua有哪些功能？\"></a>MaHua有哪些功能？</h6><ul>\n<li>方便的<code>导入导出</code>功能<ul>\n<li>直接把一个markdown的文本文件拖放到当前这个页面就可以了</li>\n<li>导出为一个html格式的文件，样式一点也不会丢失</li>\n</ul>\n</li>\n<li>编辑和预览<code>同步滚动</code>，所见即所得（右上角设置）</li>\n<li><code>VIM快捷键</code>支持，方便vim党们快速的操作 （右上角设置）</li>\n<li>强大的<code>自定义CSS</code>功能，方便定制自己的展示</li>\n<li>有数量也有质量的<code>主题</code>,编辑器和预览区域</li>\n<li>完美兼容<code>Github</code>的markdown语法</li>\n<li>预览区域<code>代码高亮</code></li>\n<li>所有选项自动记忆</li>\n</ul>\n<h2 id=\"有问题反馈\"><a href=\"#有问题反馈\" class=\"headerlink\" title=\"有问题反馈\"></a>有问题反馈</h2><p>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>\n<ul>\n<li>邮件(jiangzhendong102#gmail.com, 把#换成@)</li>\n<li>QQ: 237138130</li>\n<li>weibo: <a href=\"http://weibo.com/2810839183\" target=\"_blank\" rel=\"external\">@冰岛之都</a></li>\n<li>twitter: <a href=\"http://twitter.com/JiangWind\" target=\"_blank\" rel=\"external\">@JiangWind</a></li>\n</ul>\n<h2 id=\"捐助开发者\"><a href=\"#捐助开发者\" class=\"headerlink\" title=\"捐助开发者\"></a>捐助开发者</h2><p>在兴趣的驱动下,写一个<code>免费</code>的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。<br>当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。</p>\n<h2 id=\"感激\"><a href=\"#感激\" class=\"headerlink\" title=\"感激\"></a>感激</h2><p>感谢以下的项目,排名不分先后</p>\n<ul>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"external\">mou</a> </li>\n<li><a href=\"http://ace.ajax.org/\" target=\"_blank\" rel=\"external\">ace</a></li>\n<li><a href=\"http://jquery.com\" target=\"_blank\" rel=\"external\">jquery</a></li>\n</ul>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ihubo = &#123;</div><div class=\"line\">  <span class=\"attr\">nickName</span>  : <span class=\"string\">\"J.wind\"</span>,</div><div class=\"line\">  <span class=\"attr\">site</span> : <span class=\"string\">\"http://jwind.me\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"hexo中加入多个标签\"><a href=\"#hexo中加入多个标签\" class=\"headerlink\" title=\"hexo中加入多个标签\"></a>hexo中加入多个标签</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tages: [标签<span class=\"number\">1</span>,标签<span class=\"number\">2</span>,…标签n]</div><div class=\"line\">tages:</div><div class=\"line\">\t标签<span class=\"number\">1</span></div><div class=\"line\">\t标签<span class=\"number\">2</span></div><div class=\"line\">\t…</div><div class=\"line\">\t标签n</div></pre></td></tr></table></figure>","more":"<h3 id=\"markdown语法\"><a href=\"#markdown语法\" class=\"headerlink\" title=\"markdown语法\"></a>markdown语法</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#标题</div><div class=\"line\">‘#’ 一级标题（在#后面加个空格，否则不会起作用）</div><div class=\"line\">‘##’ 二级标题</div><div class=\"line\">‘###’ 三级标题</div><div class=\"line\">‘####’ 四级标题</div><div class=\"line\">‘#####’ 五级标题</div></pre></td></tr></table></figure>\n<h2 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h2><p><img src=\"/picture/images/1B138N144Q1L.jpg\" alt=\"mahua\"></p>\n<h2 id=\"MaHua是什么\"><a href=\"#MaHua是什么\" class=\"headerlink\" title=\"MaHua是什么?\"></a>MaHua是什么?</h2><p>一个在线编辑markdown文档的编辑器</p>\n<p>向Mac下优秀的markdown编辑器mou致敬</p>\n<h6 id=\"MaHua有哪些功能？\"><a href=\"#MaHua有哪些功能？\" class=\"headerlink\" title=\"MaHua有哪些功能？\"></a>MaHua有哪些功能？</h6><ul>\n<li>方便的<code>导入导出</code>功能<ul>\n<li>直接把一个markdown的文本文件拖放到当前这个页面就可以了</li>\n<li>导出为一个html格式的文件，样式一点也不会丢失</li>\n</ul>\n</li>\n<li>编辑和预览<code>同步滚动</code>，所见即所得（右上角设置）</li>\n<li><code>VIM快捷键</code>支持，方便vim党们快速的操作 （右上角设置）</li>\n<li>强大的<code>自定义CSS</code>功能，方便定制自己的展示</li>\n<li>有数量也有质量的<code>主题</code>,编辑器和预览区域</li>\n<li>完美兼容<code>Github</code>的markdown语法</li>\n<li>预览区域<code>代码高亮</code></li>\n<li>所有选项自动记忆</li>\n</ul>\n<h2 id=\"有问题反馈\"><a href=\"#有问题反馈\" class=\"headerlink\" title=\"有问题反馈\"></a>有问题反馈</h2><p>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>\n<ul>\n<li>邮件(jiangzhendong102#gmail.com, 把#换成@)</li>\n<li>QQ: 237138130</li>\n<li>weibo: <a href=\"http://weibo.com/2810839183\">@冰岛之都</a></li>\n<li>twitter: <a href=\"http://twitter.com/JiangWind\">@JiangWind</a></li>\n</ul>\n<h2 id=\"捐助开发者\"><a href=\"#捐助开发者\" class=\"headerlink\" title=\"捐助开发者\"></a>捐助开发者</h2><p>在兴趣的驱动下,写一个<code>免费</code>的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。<br>当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。</p>\n<h2 id=\"感激\"><a href=\"#感激\" class=\"headerlink\" title=\"感激\"></a>感激</h2><p>感谢以下的项目,排名不分先后</p>\n<ul>\n<li><a href=\"http://mouapp.com/\">mou</a> </li>\n<li><a href=\"http://ace.ajax.org/\">ace</a></li>\n<li><a href=\"http://jquery.com\">jquery</a></li>\n</ul>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ihubo = &#123;</div><div class=\"line\">  <span class=\"attr\">nickName</span>  : <span class=\"string\">\"J.wind\"</span>,</div><div class=\"line\">  <span class=\"attr\">site</span> : <span class=\"string\">\"http://jwind.me\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"linux学习心得","date":"2016-09-14T01:53:29.000Z","_content":"## linux文件删除，空间不释放\n文件系统使用率100%，然后删除了一个80G的文件，但是使用`df -k`查看，文件系统使用率还是100%\n### 工具/原料 \n* lsof\n### 方法/步骤\n初步判读是删除文件时有进程在使用文件，导致空间未释放。使用`lsof | grep delete` 查找到相应的进程号，然后用`kill -9 删掉进程`，在次使用`df -k`检查文件系统，发现可用空间为80G .\n<!-- more -->\n## Linux 命令\n* 立即让网络支持nat : `echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward; sudo iptables -t nat -I POSTROUTING -j MASQUERADE`\n* 按cpu利用率从大到小排列进程:  `ps -eo \"%C : %p : %z : %a\"|sort -nr`\n* 显示包含字符串的文件名:  `grep -l -r 字符串 路径`\n* 统计80端口的连接并排序 :  `netstat -na|grep :80|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -r -n`\n* 显示当前内存大小:  `free -m |grep \"Mem\" | awk '{print $2}'`\n* 统计每个单词的出现频率并排序 :  `awk '{arr[$1]+=1 }END{for(i in arr){print arr[i]\"\\t\"i}}' FILE_NAME | sort -rn`\n* 查看CPU信息:  `cat /proc/cpuinfo`\n* 手工增加一条路由 :  sudo route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1\n* 控制台下显示中文 :  sudo apt-get install zhcon;zhcon --utf8 --drv=vga\n* 把终端加到右键菜单:  sudo apt-get install nautilus-open-terminal\n* 显示一小时以内的包含 xxxx 的文件:  find . -type f -mmin -60|xargs -i grep -l xxxx '{}'\n* 手工删除一条路由:  sudo route del -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1\n* 统计程序的内存耗用:  ps -eo fname,rss|awk '{arr[$1]+=$2} END {for (i in arr) {print i,arr[i]}}'|sort -k2 -nr\n* vim 如何显示行号:  :set number\n* 显示最近2小时到8小时之内的文件:  find . -mmin +120 -mmin -480 -exec more {} \\;\n* 命令关机:  sudo halt\n* 查看网络连接状态:  netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n","source":"_posts/linux-command.md","raw":"title: linux学习心得\ndate: 2016-09-14 09:53:29\ncategories: 技术\ntags: [linux,lsof]\n---\n## linux文件删除，空间不释放\n文件系统使用率100%，然后删除了一个80G的文件，但是使用`df -k`查看，文件系统使用率还是100%\n### 工具/原料 \n* lsof\n### 方法/步骤\n初步判读是删除文件时有进程在使用文件，导致空间未释放。使用`lsof | grep delete` 查找到相应的进程号，然后用`kill -9 删掉进程`，在次使用`df -k`检查文件系统，发现可用空间为80G .\n<!-- more -->\n## Linux 命令\n* 立即让网络支持nat : `echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward; sudo iptables -t nat -I POSTROUTING -j MASQUERADE`\n* 按cpu利用率从大到小排列进程:  `ps -eo \"%C : %p : %z : %a\"|sort -nr`\n* 显示包含字符串的文件名:  `grep -l -r 字符串 路径`\n* 统计80端口的连接并排序 :  `netstat -na|grep :80|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -r -n`\n* 显示当前内存大小:  `free -m |grep \"Mem\" | awk '{print $2}'`\n* 统计每个单词的出现频率并排序 :  `awk '{arr[$1]+=1 }END{for(i in arr){print arr[i]\"\\t\"i}}' FILE_NAME | sort -rn`\n* 查看CPU信息:  `cat /proc/cpuinfo`\n* 手工增加一条路由 :  sudo route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1\n* 控制台下显示中文 :  sudo apt-get install zhcon;zhcon --utf8 --drv=vga\n* 把终端加到右键菜单:  sudo apt-get install nautilus-open-terminal\n* 显示一小时以内的包含 xxxx 的文件:  find . -type f -mmin -60|xargs -i grep -l xxxx '{}'\n* 手工删除一条路由:  sudo route del -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1\n* 统计程序的内存耗用:  ps -eo fname,rss|awk '{arr[$1]+=$2} END {for (i in arr) {print i,arr[i]}}'|sort -k2 -nr\n* vim 如何显示行号:  :set number\n* 显示最近2小时到8小时之内的文件:  find . -mmin +120 -mmin -480 -exec more {} \\;\n* 命令关机:  sudo halt\n* 查看网络连接状态:  netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n","slug":"linux-command","published":1,"updated":"2016-12-13T09:20:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc35000p2u6bex1op7kt","content":"<h2 id=\"linux文件删除，空间不释放\"><a href=\"#linux文件删除，空间不释放\" class=\"headerlink\" title=\"linux文件删除，空间不释放\"></a>linux文件删除，空间不释放</h2><p>文件系统使用率100%，然后删除了一个80G的文件，但是使用<code>df -k</code>查看，文件系统使用率还是100%</p>\n<h3 id=\"工具-原料\"><a href=\"#工具-原料\" class=\"headerlink\" title=\"工具/原料\"></a>工具/原料</h3><ul>\n<li>lsof<h3 id=\"方法-步骤\"><a href=\"#方法-步骤\" class=\"headerlink\" title=\"方法/步骤\"></a>方法/步骤</h3>初步判读是删除文件时有进程在使用文件，导致空间未释放。使用<code>lsof | grep delete</code> 查找到相应的进程号，然后用<code>kill -9 删掉进程</code>，在次使用<code>df -k</code>检查文件系统，发现可用空间为80G .<a id=\"more\"></a>\n<h2 id=\"Linux-命令\"><a href=\"#Linux-命令\" class=\"headerlink\" title=\"Linux 命令\"></a>Linux 命令</h2></li>\n<li>立即让网络支持nat : <code>echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward; sudo iptables -t nat -I POSTROUTING -j MASQUERADE</code></li>\n<li>按cpu利用率从大到小排列进程:  <code>ps -eo &quot;%C : %p : %z : %a&quot;|sort -nr</code></li>\n<li>显示包含字符串的文件名:  <code>grep -l -r 字符串 路径</code></li>\n<li>统计80端口的连接并排序 :  <code>netstat -na|grep :80|awk &#39;{print $5}&#39;|awk -F: &#39;{print $1}&#39;|sort|uniq -c|sort -r -n</code></li>\n<li>显示当前内存大小:  <code>free -m |grep &quot;Mem&quot; | awk &#39;{print $2}&#39;</code></li>\n<li>统计每个单词的出现频率并排序 :  <code>awk &#39;{arr[$1]+=1 }END{for(i in arr){print arr[i]&quot;\\t&quot;i}}&#39; FILE_NAME | sort -rn</code></li>\n<li>查看CPU信息:  <code>cat /proc/cpuinfo</code></li>\n<li>手工增加一条路由 :  sudo route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1</li>\n<li>控制台下显示中文 :  sudo apt-get install zhcon;zhcon –utf8 –drv=vga</li>\n<li>把终端加到右键菜单:  sudo apt-get install nautilus-open-terminal</li>\n<li>显示一小时以内的包含 xxxx 的文件:  find . -type f -mmin -60|xargs -i grep -l xxxx ‘{}’</li>\n<li>手工删除一条路由:  sudo route del -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1</li>\n<li>统计程序的内存耗用:  ps -eo fname,rss|awk ‘{arr[$1]+=$2} END {for (i in arr) {print i,arr[i]}}’|sort -k2 -nr</li>\n<li>vim 如何显示行号:  :set number</li>\n<li>显示最近2小时到8小时之内的文件:  find . -mmin +120 -mmin -480 -exec more {} \\;</li>\n<li>命令关机:  sudo halt</li>\n<li>查看网络连接状态:  netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</li>\n</ul>\n","excerpt":"<h2 id=\"linux文件删除，空间不释放\"><a href=\"#linux文件删除，空间不释放\" class=\"headerlink\" title=\"linux文件删除，空间不释放\"></a>linux文件删除，空间不释放</h2><p>文件系统使用率100%，然后删除了一个80G的文件，但是使用<code>df -k</code>查看，文件系统使用率还是100%</p>\n<h3 id=\"工具-原料\"><a href=\"#工具-原料\" class=\"headerlink\" title=\"工具/原料\"></a>工具/原料</h3><ul>\n<li>lsof<h3 id=\"方法-步骤\"><a href=\"#方法-步骤\" class=\"headerlink\" title=\"方法/步骤\"></a>方法/步骤</h3>初步判读是删除文件时有进程在使用文件，导致空间未释放。使用<code>lsof | grep delete</code> 查找到相应的进程号，然后用<code>kill -9 删掉进程</code>，在次使用<code>df -k</code>检查文件系统，发现可用空间为80G .","more":"<h2 id=\"Linux-命令\"><a href=\"#Linux-命令\" class=\"headerlink\" title=\"Linux 命令\"></a>Linux 命令</h2></li>\n<li>立即让网络支持nat : <code>echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward; sudo iptables -t nat -I POSTROUTING -j MASQUERADE</code></li>\n<li>按cpu利用率从大到小排列进程:  <code>ps -eo &quot;%C : %p : %z : %a&quot;|sort -nr</code></li>\n<li>显示包含字符串的文件名:  <code>grep -l -r 字符串 路径</code></li>\n<li>统计80端口的连接并排序 :  <code>netstat -na|grep :80|awk &#39;{print $5}&#39;|awk -F: &#39;{print $1}&#39;|sort|uniq -c|sort -r -n</code></li>\n<li>显示当前内存大小:  <code>free -m |grep &quot;Mem&quot; | awk &#39;{print $2}&#39;</code></li>\n<li>统计每个单词的出现频率并排序 :  <code>awk &#39;{arr[$1]+=1 }END{for(i in arr){print arr[i]&quot;\\t&quot;i}}&#39; FILE_NAME | sort -rn</code></li>\n<li>查看CPU信息:  <code>cat /proc/cpuinfo</code></li>\n<li>手工增加一条路由 :  sudo route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1</li>\n<li>控制台下显示中文 :  sudo apt-get install zhcon;zhcon –utf8 –drv=vga</li>\n<li>把终端加到右键菜单:  sudo apt-get install nautilus-open-terminal</li>\n<li>显示一小时以内的包含 xxxx 的文件:  find . -type f -mmin -60|xargs -i grep -l xxxx ‘{}’</li>\n<li>手工删除一条路由:  sudo route del -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1</li>\n<li>统计程序的内存耗用:  ps -eo fname,rss|awk ‘{arr[$1]+=$2} END {for (i in arr) {print i,arr[i]}}’|sort -k2 -nr</li>\n<li>vim 如何显示行号:  :set number</li>\n<li>显示最近2小时到8小时之内的文件:  find . -mmin +120 -mmin -480 -exec more {} \\;</li>\n<li>命令关机:  sudo halt</li>\n<li>查看网络连接状态:  netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</li>\n</ul>"},{"title":"linux 从百度网盘下载文件的方法","date":"2016-08-14T01:53:29.000Z","_content":"## 方法1.wget\nwget是在Linux下开发的开放源代码的软件，作者是Hrvoje Niksic，后来被移植到包括Windows在内的各个平台上。它有以下功能和特点：\n* （1）支持断点下传功能；这一点，也是网络蚂蚁和FlashGet当年最大的卖点，现在，Wget也可以使用此功能，那些网络不是太好的用户可以放心了；\n* （2）同时支持FTP和HTTP下载方式；尽管现在大部分软件可以使用HTTP方式下载，但是，有些时候，仍然需要使用FTP方式下载软件；\n* （3）支持代理服务器；对安全强度很高的系统而言，一般不会将自己的系统直接暴露在互联网上，所以，支持代理是下载软件必须有的功能；\n* （4）设置方便简单；可能，习惯图形界面的用户已经不是太习惯命令行了，但是，命令行在设置上其实有更多的优点，最少，鼠标可以少点很多次，也不要担心是否错点鼠标；\n* （5）程序小，完全免费；程序小可以考虑不计，因为现在的硬盘实在太大了；完全免费就不得不考虑了，即使网络上有很多所谓的免费软件，但是，这些软件的广告却不是我们喜欢的；\n<!-- more -->\n wget虽然功能强大，但是使用起来还是比较简单的，基本的语法是：wget [参数列表] URL。下面就结合具体的例子来说明一下wget的用法。\n1、下载整个http或者ftp站点。\nwget http://place.your.url/here\n这个命令可以将http://place.your.url/here 首页下载下来。使用-x会强制建立服务器上一模一样的目录，如果使用-nd参数，那么服务器上下载的所有内容都会加到本地当前目录。\n\nwget -r http://place.your.url/here\n这 个命令会按照递归的方法，下载服务器上所有的目录和文件，实质就是下载整个网站。这个命令一定要小心使用，因为在下载的时候，被下载网站指向的所有地址同 样会被下载，因此，如果这个网站引用了其他网站，那么被引用的网站也会被下载下来！基于这个原因，这个参数不常用。可以用-l number参数来指定下载的层次。例如只下载两层，那么使用-l 2。\n\n要是您想制作镜像站点，那么可以使用－m参数，例如：wget -m http://place.your.url/here\n这时wget会自动判断合适的参数来制作镜像站点。此时，wget会登录到服务器上，读入robots.txt并按robots.txt的规定来执行。\n\n2、断点续传。\n当文件特别大或者网络特别慢的时候，往往一个文件还没有下载完，连接就已经被切断，此时就需要断点续传。wget的断点续传是自动的，只需要使用-c参数，例如：\nwget -c http://the.url.of/incomplete/file\n使用断点续传要求服务器支持断点续传。-t参数表示重试次数，例如需要重试100次，那么就写-t 100，如果设成-t 0，那么表示无穷次重试，直到连接成功。-T参数表示超时等待时间，例如-T 120，表示等待120秒连接不上就算超时。\n\n3、批量下载。\n如果有多个文件需要下载，那么可以生成一个文件，把每个文件的URL写一行，例如生成文件download.txt，然后用命令：wget -i download.txt\n这样就会把download.txt里面列出的每个URL都下载下来。（如果列的是文件就下载文件，如果列的是网站，那么下载首页）\n\n4、选择性的下载。\n可以指定让wget只下载一类文件，或者不下载什么文件。例如：\nwget -m –reject=gif http://target.web.site/subdirectory\n表示下载http://target.web.site/subdirectory，但是忽略gif文件。–accept=LIST 可以接受的文件类型，–reject=LIST拒绝接受的文件类型。\n\n5、密码和认证。\nwget只能处理利用用户名/密码方式限制访问的网站，可以利用两个参数：\n–http-user=USER设置HTTP用户\n–http-passwd=PASS设置HTTP密码\n对于需要证书做认证的网站，就只能利用其他下载工具了，例如curl。\n\n6、利用代理服务器进行下载。\n如果用户的网络需要经过代理服务器，那么可以让wget通过代理服务器进行文件的下载。此时需要在当前用户的目录下创建一个.wgetrc文件。文件中可以设置代理服务器：\nhttp-proxy = 111.111.111.111:8080\nftp-proxy = 111.111.111.111:8080\n分别表示http的代理服务器和ftp的代理服务器。如果代理服务器需要密码则使用：\n–proxy-user=USER设置代理用户\n–proxy-passwd=PASS设置代理密码\n这两个参数。\n使用参数–proxy=on/off 使用或者关闭代理。\nwget还有很多有用的功能，需要用户去挖掘。\n\n### 附录：\n```js\n命令格式：\nwget [参数列表] [目标软件、网页的网址]\n\n-V,–version 显示软件版本号然后退出；\n-h,–help显示软件帮助信息；\n-e,–execute=COMMAND 执行一个 “.wgetrc”命令\n\n-o,–output-file=FILE 将软件输出信息保存到文件；\n-a,–append-output=FILE将软件输出信息追加到文件；\n-d,–debug显示输出信息；\n-q,–quiet 不显示输出信息；\n-i,–input-file=FILE 从文件中取得URL；\n\n-t,–tries=NUMBER 是否下载次数（0表示无穷次）\n-O –output-document=FILE下载文件保存为别的文件名\n-nc, –no-clobber 不要覆盖已经存在的文件\n-N,–timestamping只下载比本地新的文件\n-T,–timeout=SECONDS 设置超时时间\n-Y,–proxy=on/off 关闭代理\n\n-nd,–no-directories 不建立目录\n-x,–force-directories 强制建立目录\n\n–http-user=USER设置HTTP用户\n–http-passwd=PASS设置HTTP密码\n–proxy-user=USER设置代理用户\n–proxy-passwd=PASS设置代理密码\n\n-r,–recursive 下载整个网站、目录（小心使用）\n-l,–level=NUMBER 下载层次\n\n-A,–accept=LIST 可以接受的文件类型\n-R,–reject=LIST拒绝接受的文件类型\n-D,–domains=LIST可以接受的域名\n–exclude-domains=LIST拒绝的域名\n-L,–relative 下载关联链接\n–follow-ftp 只下载FTP链接\n-H,–span-hosts 可以下载外面的主机\n-I,–include-directories=LIST允许的目录\n-X,–exclude-directories=LIST 拒绝的目录\n```\n中文文档名在平常的情况下会被编码， 但是在 –cut-dirs 时又是正常的，\nwget -r -np -nH –cut-dirs=3 ftp://host/test/测试.txt\nwget -r -np -nH -nd ftp://host/test/测试.txt\nwget \"ftp://host/test/*\"  测试.txt\n\n由於不知名的原因,可能是为了避开特殊档名，wget 会自动将抓取档名的部分用 encode_string 处理过，所以该 patch 就把被 encode_string 处理成 “%3A” 这种东西， 用 decode_string 还原成 “:”，并套用在目录与档案名称的部分，decode_string 是 wget 内建的函式。\n```js\nwget -t0 -c -nH -x -np -b -m -P /home/sunny/NOD32view/  http://downloads1.kaspersky-labs.com/bases/ -o wget.log\n```\n美中不足的是,wget是单线程下载工具,网络环境相同的情况下,所以速度上可能跟不上axel\n\n## 方法2.axel\naxel是linux下一个多线程下载工具。\n\n### Axel命令使用方法：\n```js\naxel 参数 文件下载地址\n可选参数：\n\t-n   指定线程数\n\t-o   指定另存为目录\n\t-s   指定每秒的最大比特数\n\t-q   静默模式\n```\n如从Diahosting下载lnmp安装包指定10个线程，存到/tmp/：`axel -n 10 -o /tmp/ http://soft.vpser.net/lnmp/lnmp0.7-full.tar.gz`\n\n如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。\n\n首先如果你是获取百度网盘下实际的下载地址的问题:\n\n你可以将想下载的文件分享一下,创建一个公开的链接,然后在浏览器里输入链接地址.点击下载,之后浏览器会下载文件,此时取消下载,然后右键复制下载链接.(之所以要弄这一步是因为:你自己的网盘的权限问题.其他人是不可能直接登陆你的网盘下载文件的.这样转一下,只不过是把权限放开而已,无他,这样任何人都可以下载)\n此后就是`axel -n 9` “下载链接地址”\n注意如果下载链接地址没有加双引号,可能会出现http 401 unauthorized的错误.\n\n","source":"_posts/linux-baidu-pan.md","raw":"title: linux 从百度网盘下载文件的方法 \ndate: 2016-08-14 09:53:29\ncategories: 技术\ntags: markdown\n---\n## 方法1.wget\nwget是在Linux下开发的开放源代码的软件，作者是Hrvoje Niksic，后来被移植到包括Windows在内的各个平台上。它有以下功能和特点：\n* （1）支持断点下传功能；这一点，也是网络蚂蚁和FlashGet当年最大的卖点，现在，Wget也可以使用此功能，那些网络不是太好的用户可以放心了；\n* （2）同时支持FTP和HTTP下载方式；尽管现在大部分软件可以使用HTTP方式下载，但是，有些时候，仍然需要使用FTP方式下载软件；\n* （3）支持代理服务器；对安全强度很高的系统而言，一般不会将自己的系统直接暴露在互联网上，所以，支持代理是下载软件必须有的功能；\n* （4）设置方便简单；可能，习惯图形界面的用户已经不是太习惯命令行了，但是，命令行在设置上其实有更多的优点，最少，鼠标可以少点很多次，也不要担心是否错点鼠标；\n* （5）程序小，完全免费；程序小可以考虑不计，因为现在的硬盘实在太大了；完全免费就不得不考虑了，即使网络上有很多所谓的免费软件，但是，这些软件的广告却不是我们喜欢的；\n<!-- more -->\n wget虽然功能强大，但是使用起来还是比较简单的，基本的语法是：wget [参数列表] URL。下面就结合具体的例子来说明一下wget的用法。\n1、下载整个http或者ftp站点。\nwget http://place.your.url/here\n这个命令可以将http://place.your.url/here 首页下载下来。使用-x会强制建立服务器上一模一样的目录，如果使用-nd参数，那么服务器上下载的所有内容都会加到本地当前目录。\n\nwget -r http://place.your.url/here\n这 个命令会按照递归的方法，下载服务器上所有的目录和文件，实质就是下载整个网站。这个命令一定要小心使用，因为在下载的时候，被下载网站指向的所有地址同 样会被下载，因此，如果这个网站引用了其他网站，那么被引用的网站也会被下载下来！基于这个原因，这个参数不常用。可以用-l number参数来指定下载的层次。例如只下载两层，那么使用-l 2。\n\n要是您想制作镜像站点，那么可以使用－m参数，例如：wget -m http://place.your.url/here\n这时wget会自动判断合适的参数来制作镜像站点。此时，wget会登录到服务器上，读入robots.txt并按robots.txt的规定来执行。\n\n2、断点续传。\n当文件特别大或者网络特别慢的时候，往往一个文件还没有下载完，连接就已经被切断，此时就需要断点续传。wget的断点续传是自动的，只需要使用-c参数，例如：\nwget -c http://the.url.of/incomplete/file\n使用断点续传要求服务器支持断点续传。-t参数表示重试次数，例如需要重试100次，那么就写-t 100，如果设成-t 0，那么表示无穷次重试，直到连接成功。-T参数表示超时等待时间，例如-T 120，表示等待120秒连接不上就算超时。\n\n3、批量下载。\n如果有多个文件需要下载，那么可以生成一个文件，把每个文件的URL写一行，例如生成文件download.txt，然后用命令：wget -i download.txt\n这样就会把download.txt里面列出的每个URL都下载下来。（如果列的是文件就下载文件，如果列的是网站，那么下载首页）\n\n4、选择性的下载。\n可以指定让wget只下载一类文件，或者不下载什么文件。例如：\nwget -m –reject=gif http://target.web.site/subdirectory\n表示下载http://target.web.site/subdirectory，但是忽略gif文件。–accept=LIST 可以接受的文件类型，–reject=LIST拒绝接受的文件类型。\n\n5、密码和认证。\nwget只能处理利用用户名/密码方式限制访问的网站，可以利用两个参数：\n–http-user=USER设置HTTP用户\n–http-passwd=PASS设置HTTP密码\n对于需要证书做认证的网站，就只能利用其他下载工具了，例如curl。\n\n6、利用代理服务器进行下载。\n如果用户的网络需要经过代理服务器，那么可以让wget通过代理服务器进行文件的下载。此时需要在当前用户的目录下创建一个.wgetrc文件。文件中可以设置代理服务器：\nhttp-proxy = 111.111.111.111:8080\nftp-proxy = 111.111.111.111:8080\n分别表示http的代理服务器和ftp的代理服务器。如果代理服务器需要密码则使用：\n–proxy-user=USER设置代理用户\n–proxy-passwd=PASS设置代理密码\n这两个参数。\n使用参数–proxy=on/off 使用或者关闭代理。\nwget还有很多有用的功能，需要用户去挖掘。\n\n### 附录：\n```js\n命令格式：\nwget [参数列表] [目标软件、网页的网址]\n\n-V,–version 显示软件版本号然后退出；\n-h,–help显示软件帮助信息；\n-e,–execute=COMMAND 执行一个 “.wgetrc”命令\n\n-o,–output-file=FILE 将软件输出信息保存到文件；\n-a,–append-output=FILE将软件输出信息追加到文件；\n-d,–debug显示输出信息；\n-q,–quiet 不显示输出信息；\n-i,–input-file=FILE 从文件中取得URL；\n\n-t,–tries=NUMBER 是否下载次数（0表示无穷次）\n-O –output-document=FILE下载文件保存为别的文件名\n-nc, –no-clobber 不要覆盖已经存在的文件\n-N,–timestamping只下载比本地新的文件\n-T,–timeout=SECONDS 设置超时时间\n-Y,–proxy=on/off 关闭代理\n\n-nd,–no-directories 不建立目录\n-x,–force-directories 强制建立目录\n\n–http-user=USER设置HTTP用户\n–http-passwd=PASS设置HTTP密码\n–proxy-user=USER设置代理用户\n–proxy-passwd=PASS设置代理密码\n\n-r,–recursive 下载整个网站、目录（小心使用）\n-l,–level=NUMBER 下载层次\n\n-A,–accept=LIST 可以接受的文件类型\n-R,–reject=LIST拒绝接受的文件类型\n-D,–domains=LIST可以接受的域名\n–exclude-domains=LIST拒绝的域名\n-L,–relative 下载关联链接\n–follow-ftp 只下载FTP链接\n-H,–span-hosts 可以下载外面的主机\n-I,–include-directories=LIST允许的目录\n-X,–exclude-directories=LIST 拒绝的目录\n```\n中文文档名在平常的情况下会被编码， 但是在 –cut-dirs 时又是正常的，\nwget -r -np -nH –cut-dirs=3 ftp://host/test/测试.txt\nwget -r -np -nH -nd ftp://host/test/测试.txt\nwget \"ftp://host/test/*\"  测试.txt\n\n由於不知名的原因,可能是为了避开特殊档名，wget 会自动将抓取档名的部分用 encode_string 处理过，所以该 patch 就把被 encode_string 处理成 “%3A” 这种东西， 用 decode_string 还原成 “:”，并套用在目录与档案名称的部分，decode_string 是 wget 内建的函式。\n```js\nwget -t0 -c -nH -x -np -b -m -P /home/sunny/NOD32view/  http://downloads1.kaspersky-labs.com/bases/ -o wget.log\n```\n美中不足的是,wget是单线程下载工具,网络环境相同的情况下,所以速度上可能跟不上axel\n\n## 方法2.axel\naxel是linux下一个多线程下载工具。\n\n### Axel命令使用方法：\n```js\naxel 参数 文件下载地址\n可选参数：\n\t-n   指定线程数\n\t-o   指定另存为目录\n\t-s   指定每秒的最大比特数\n\t-q   静默模式\n```\n如从Diahosting下载lnmp安装包指定10个线程，存到/tmp/：`axel -n 10 -o /tmp/ http://soft.vpser.net/lnmp/lnmp0.7-full.tar.gz`\n\n如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。\n\n首先如果你是获取百度网盘下实际的下载地址的问题:\n\n你可以将想下载的文件分享一下,创建一个公开的链接,然后在浏览器里输入链接地址.点击下载,之后浏览器会下载文件,此时取消下载,然后右键复制下载链接.(之所以要弄这一步是因为:你自己的网盘的权限问题.其他人是不可能直接登陆你的网盘下载文件的.这样转一下,只不过是把权限放开而已,无他,这样任何人都可以下载)\n此后就是`axel -n 9` “下载链接地址”\n注意如果下载链接地址没有加双引号,可能会出现http 401 unauthorized的错误.\n\n","slug":"linux-baidu-pan","published":1,"updated":"2016-12-13T05:27:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc38000t2u6b887wzljw","content":"<h2 id=\"方法1-wget\"><a href=\"#方法1-wget\" class=\"headerlink\" title=\"方法1.wget\"></a>方法1.wget</h2><p>wget是在Linux下开发的开放源代码的软件，作者是Hrvoje Niksic，后来被移植到包括Windows在内的各个平台上。它有以下功能和特点：</p>\n<ul>\n<li>（1）支持断点下传功能；这一点，也是网络蚂蚁和FlashGet当年最大的卖点，现在，Wget也可以使用此功能，那些网络不是太好的用户可以放心了；</li>\n<li>（2）同时支持FTP和HTTP下载方式；尽管现在大部分软件可以使用HTTP方式下载，但是，有些时候，仍然需要使用FTP方式下载软件；</li>\n<li>（3）支持代理服务器；对安全强度很高的系统而言，一般不会将自己的系统直接暴露在互联网上，所以，支持代理是下载软件必须有的功能；</li>\n<li>（4）设置方便简单；可能，习惯图形界面的用户已经不是太习惯命令行了，但是，命令行在设置上其实有更多的优点，最少，鼠标可以少点很多次，也不要担心是否错点鼠标；</li>\n<li>（5）程序小，完全免费；程序小可以考虑不计，因为现在的硬盘实在太大了；完全免费就不得不考虑了，即使网络上有很多所谓的免费软件，但是，这些软件的广告却不是我们喜欢的；<a id=\"more\"></a>\nwget虽然功能强大，但是使用起来还是比较简单的，基本的语法是：wget [参数列表] URL。下面就结合具体的例子来说明一下wget的用法。<br>1、下载整个http或者ftp站点。<br>wget <a href=\"http://place.your.url/here\" target=\"_blank\" rel=\"external\">http://place.your.url/here</a><br>这个命令可以将<a href=\"http://place.your.url/here\" target=\"_blank\" rel=\"external\">http://place.your.url/here</a> 首页下载下来。使用-x会强制建立服务器上一模一样的目录，如果使用-nd参数，那么服务器上下载的所有内容都会加到本地当前目录。</li>\n</ul>\n<p>wget -r <a href=\"http://place.your.url/here\" target=\"_blank\" rel=\"external\">http://place.your.url/here</a><br>这 个命令会按照递归的方法，下载服务器上所有的目录和文件，实质就是下载整个网站。这个命令一定要小心使用，因为在下载的时候，被下载网站指向的所有地址同 样会被下载，因此，如果这个网站引用了其他网站，那么被引用的网站也会被下载下来！基于这个原因，这个参数不常用。可以用-l number参数来指定下载的层次。例如只下载两层，那么使用-l 2。</p>\n<p>要是您想制作镜像站点，那么可以使用－m参数，例如：wget -m <a href=\"http://place.your.url/here\" target=\"_blank\" rel=\"external\">http://place.your.url/here</a><br>这时wget会自动判断合适的参数来制作镜像站点。此时，wget会登录到服务器上，读入robots.txt并按robots.txt的规定来执行。</p>\n<p>2、断点续传。<br>当文件特别大或者网络特别慢的时候，往往一个文件还没有下载完，连接就已经被切断，此时就需要断点续传。wget的断点续传是自动的，只需要使用-c参数，例如：<br>wget -c <a href=\"http://the.url.of/incomplete/file\" target=\"_blank\" rel=\"external\">http://the.url.of/incomplete/file</a><br>使用断点续传要求服务器支持断点续传。-t参数表示重试次数，例如需要重试100次，那么就写-t 100，如果设成-t 0，那么表示无穷次重试，直到连接成功。-T参数表示超时等待时间，例如-T 120，表示等待120秒连接不上就算超时。</p>\n<p>3、批量下载。<br>如果有多个文件需要下载，那么可以生成一个文件，把每个文件的URL写一行，例如生成文件download.txt，然后用命令：wget -i download.txt<br>这样就会把download.txt里面列出的每个URL都下载下来。（如果列的是文件就下载文件，如果列的是网站，那么下载首页）</p>\n<p>4、选择性的下载。<br>可以指定让wget只下载一类文件，或者不下载什么文件。例如：<br>wget -m –reject=gif <a href=\"http://target.web.site/subdirectory\" target=\"_blank\" rel=\"external\">http://target.web.site/subdirectory</a><br>表示下载<a href=\"http://target.web.site/subdirectory，但是忽略gif文件。–accept=LIST\" target=\"_blank\" rel=\"external\">http://target.web.site/subdirectory，但是忽略gif文件。–accept=LIST</a> 可以接受的文件类型，–reject=LIST拒绝接受的文件类型。</p>\n<p>5、密码和认证。<br>wget只能处理利用用户名/密码方式限制访问的网站，可以利用两个参数：<br>–http-user=USER设置HTTP用户<br>–http-passwd=PASS设置HTTP密码<br>对于需要证书做认证的网站，就只能利用其他下载工具了，例如curl。</p>\n<p>6、利用代理服务器进行下载。<br>如果用户的网络需要经过代理服务器，那么可以让wget通过代理服务器进行文件的下载。此时需要在当前用户的目录下创建一个.wgetrc文件。文件中可以设置代理服务器：<br>http-proxy = 111.111.111.111:8080<br>ftp-proxy = 111.111.111.111:8080<br>分别表示http的代理服务器和ftp的代理服务器。如果代理服务器需要密码则使用：<br>–proxy-user=USER设置代理用户<br>–proxy-passwd=PASS设置代理密码<br>这两个参数。<br>使用参数–proxy=on/off 使用或者关闭代理。<br>wget还有很多有用的功能，需要用户去挖掘。</p>\n<h3 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a>附录：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">命令格式：</div><div class=\"line\">wget [参数列表] [目标软件、网页的网址]</div><div class=\"line\"></div><div class=\"line\">-V,–version 显示软件版本号然后退出；</div><div class=\"line\">-h,–help显示软件帮助信息；</div><div class=\"line\">-e,–execute=COMMAND 执行一个 “.wgetrc”命令</div><div class=\"line\"></div><div class=\"line\">-o,–output-file=FILE 将软件输出信息保存到文件；</div><div class=\"line\">-a,–append-output=FILE将软件输出信息追加到文件；</div><div class=\"line\">-d,–debug显示输出信息；</div><div class=\"line\">-q,–quiet 不显示输出信息；</div><div class=\"line\">-i,–input-file=FILE 从文件中取得URL；</div><div class=\"line\"></div><div class=\"line\">-t,–tries=NUMBER 是否下载次数（<span class=\"number\">0</span>表示无穷次）</div><div class=\"line\">-O –output-<span class=\"built_in\">document</span>=FILE下载文件保存为别的文件名</div><div class=\"line\">-nc, –no-clobber 不要覆盖已经存在的文件</div><div class=\"line\">-N,–timestamping只下载比本地新的文件</div><div class=\"line\">-T,–timeout=SECONDS 设置超时时间</div><div class=\"line\">-Y,–proxy=on/off 关闭代理</div><div class=\"line\"></div><div class=\"line\">-nd,–no-directories 不建立目录</div><div class=\"line\">-x,–force-directories 强制建立目录</div><div class=\"line\"></div><div class=\"line\">–http-user=USER设置HTTP用户</div><div class=\"line\">–http-passwd=PASS设置HTTP密码</div><div class=\"line\">–proxy-user=USER设置代理用户</div><div class=\"line\">–proxy-passwd=PASS设置代理密码</div><div class=\"line\"></div><div class=\"line\">-r,–recursive 下载整个网站、目录（小心使用）</div><div class=\"line\">-l,–level=NUMBER 下载层次</div><div class=\"line\"></div><div class=\"line\">-A,–accept=LIST 可以接受的文件类型</div><div class=\"line\">-R,–reject=LIST拒绝接受的文件类型</div><div class=\"line\">-D,–domains=LIST可以接受的域名</div><div class=\"line\">–exclude-domains=LIST拒绝的域名</div><div class=\"line\">-L,–relative 下载关联链接</div><div class=\"line\">–follow-ftp 只下载FTP链接</div><div class=\"line\">-H,–span-hosts 可以下载外面的主机</div><div class=\"line\">-I,–include-directories=LIST允许的目录</div><div class=\"line\">-X,–exclude-directories=LIST 拒绝的目录</div></pre></td></tr></table></figure>\n<p>中文文档名在平常的情况下会被编码， 但是在 –cut-dirs 时又是正常的，<br>wget -r -np -nH –cut-dirs=3 ftp://host/test/测试.txt<br>wget -r -np -nH -nd ftp://host/test/测试.txt<br>wget “ftp://host/test/*”  测试.txt</p>\n<p>由於不知名的原因,可能是为了避开特殊档名，wget 会自动将抓取档名的部分用 encode_string 处理过，所以该 patch 就把被 encode_string 处理成 “%3A” 这种东西， 用 decode_string 还原成 “:”，并套用在目录与档案名称的部分，decode_string 是 wget 内建的函式。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -t0 -c -nH -x -np -b -m -P /home/sunny/NOD32view/  http:<span class=\"comment\">//downloads1.kaspersky-labs.com/bases/ -o wget.log</span></div></pre></td></tr></table></figure></p>\n<p>美中不足的是,wget是单线程下载工具,网络环境相同的情况下,所以速度上可能跟不上axel</p>\n<h2 id=\"方法2-axel\"><a href=\"#方法2-axel\" class=\"headerlink\" title=\"方法2.axel\"></a>方法2.axel</h2><p>axel是linux下一个多线程下载工具。</p>\n<h3 id=\"Axel命令使用方法：\"><a href=\"#Axel命令使用方法：\" class=\"headerlink\" title=\"Axel命令使用方法：\"></a>Axel命令使用方法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">axel 参数 文件下载地址</div><div class=\"line\">可选参数：</div><div class=\"line\">\t-n   指定线程数</div><div class=\"line\">\t-o   指定另存为目录</div><div class=\"line\">\t-s   指定每秒的最大比特数</div><div class=\"line\">\t-q   静默模式</div></pre></td></tr></table></figure>\n<p>如从Diahosting下载lnmp安装包指定10个线程，存到/tmp/：<code>axel -n 10 -o /tmp/ http://soft.vpser.net/lnmp/lnmp0.7-full.tar.gz</code></p>\n<p>如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。</p>\n<p>首先如果你是获取百度网盘下实际的下载地址的问题:</p>\n<p>你可以将想下载的文件分享一下,创建一个公开的链接,然后在浏览器里输入链接地址.点击下载,之后浏览器会下载文件,此时取消下载,然后右键复制下载链接.(之所以要弄这一步是因为:你自己的网盘的权限问题.其他人是不可能直接登陆你的网盘下载文件的.这样转一下,只不过是把权限放开而已,无他,这样任何人都可以下载)<br>此后就是<code>axel -n 9</code> “下载链接地址”<br>注意如果下载链接地址没有加双引号,可能会出现http 401 unauthorized的错误.</p>\n","excerpt":"<h2 id=\"方法1-wget\"><a href=\"#方法1-wget\" class=\"headerlink\" title=\"方法1.wget\"></a>方法1.wget</h2><p>wget是在Linux下开发的开放源代码的软件，作者是Hrvoje Niksic，后来被移植到包括Windows在内的各个平台上。它有以下功能和特点：</p>\n<ul>\n<li>（1）支持断点下传功能；这一点，也是网络蚂蚁和FlashGet当年最大的卖点，现在，Wget也可以使用此功能，那些网络不是太好的用户可以放心了；</li>\n<li>（2）同时支持FTP和HTTP下载方式；尽管现在大部分软件可以使用HTTP方式下载，但是，有些时候，仍然需要使用FTP方式下载软件；</li>\n<li>（3）支持代理服务器；对安全强度很高的系统而言，一般不会将自己的系统直接暴露在互联网上，所以，支持代理是下载软件必须有的功能；</li>\n<li>（4）设置方便简单；可能，习惯图形界面的用户已经不是太习惯命令行了，但是，命令行在设置上其实有更多的优点，最少，鼠标可以少点很多次，也不要担心是否错点鼠标；</li>\n<li>（5）程序小，完全免费；程序小可以考虑不计，因为现在的硬盘实在太大了；完全免费就不得不考虑了，即使网络上有很多所谓的免费软件，但是，这些软件的广告却不是我们喜欢的；","more":"wget虽然功能强大，但是使用起来还是比较简单的，基本的语法是：wget [参数列表] URL。下面就结合具体的例子来说明一下wget的用法。<br>1、下载整个http或者ftp站点。<br>wget <a href=\"http://place.your.url/here\">http://place.your.url/here</a><br>这个命令可以将<a href=\"http://place.your.url/here\">http://place.your.url/here</a> 首页下载下来。使用-x会强制建立服务器上一模一样的目录，如果使用-nd参数，那么服务器上下载的所有内容都会加到本地当前目录。</li>\n</ul>\n<p>wget -r <a href=\"http://place.your.url/here\">http://place.your.url/here</a><br>这 个命令会按照递归的方法，下载服务器上所有的目录和文件，实质就是下载整个网站。这个命令一定要小心使用，因为在下载的时候，被下载网站指向的所有地址同 样会被下载，因此，如果这个网站引用了其他网站，那么被引用的网站也会被下载下来！基于这个原因，这个参数不常用。可以用-l number参数来指定下载的层次。例如只下载两层，那么使用-l 2。</p>\n<p>要是您想制作镜像站点，那么可以使用－m参数，例如：wget -m <a href=\"http://place.your.url/here\">http://place.your.url/here</a><br>这时wget会自动判断合适的参数来制作镜像站点。此时，wget会登录到服务器上，读入robots.txt并按robots.txt的规定来执行。</p>\n<p>2、断点续传。<br>当文件特别大或者网络特别慢的时候，往往一个文件还没有下载完，连接就已经被切断，此时就需要断点续传。wget的断点续传是自动的，只需要使用-c参数，例如：<br>wget -c <a href=\"http://the.url.of/incomplete/file\">http://the.url.of/incomplete/file</a><br>使用断点续传要求服务器支持断点续传。-t参数表示重试次数，例如需要重试100次，那么就写-t 100，如果设成-t 0，那么表示无穷次重试，直到连接成功。-T参数表示超时等待时间，例如-T 120，表示等待120秒连接不上就算超时。</p>\n<p>3、批量下载。<br>如果有多个文件需要下载，那么可以生成一个文件，把每个文件的URL写一行，例如生成文件download.txt，然后用命令：wget -i download.txt<br>这样就会把download.txt里面列出的每个URL都下载下来。（如果列的是文件就下载文件，如果列的是网站，那么下载首页）</p>\n<p>4、选择性的下载。<br>可以指定让wget只下载一类文件，或者不下载什么文件。例如：<br>wget -m –reject=gif <a href=\"http://target.web.site/subdirectory\">http://target.web.site/subdirectory</a><br>表示下载<a href=\"http://target.web.site/subdirectory，但是忽略gif文件。–accept=LIST\">http://target.web.site/subdirectory，但是忽略gif文件。–accept=LIST</a> 可以接受的文件类型，–reject=LIST拒绝接受的文件类型。</p>\n<p>5、密码和认证。<br>wget只能处理利用用户名/密码方式限制访问的网站，可以利用两个参数：<br>–http-user=USER设置HTTP用户<br>–http-passwd=PASS设置HTTP密码<br>对于需要证书做认证的网站，就只能利用其他下载工具了，例如curl。</p>\n<p>6、利用代理服务器进行下载。<br>如果用户的网络需要经过代理服务器，那么可以让wget通过代理服务器进行文件的下载。此时需要在当前用户的目录下创建一个.wgetrc文件。文件中可以设置代理服务器：<br>http-proxy = 111.111.111.111:8080<br>ftp-proxy = 111.111.111.111:8080<br>分别表示http的代理服务器和ftp的代理服务器。如果代理服务器需要密码则使用：<br>–proxy-user=USER设置代理用户<br>–proxy-passwd=PASS设置代理密码<br>这两个参数。<br>使用参数–proxy=on/off 使用或者关闭代理。<br>wget还有很多有用的功能，需要用户去挖掘。</p>\n<h3 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a>附录：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">命令格式：</div><div class=\"line\">wget [参数列表] [目标软件、网页的网址]</div><div class=\"line\"></div><div class=\"line\">-V,–version 显示软件版本号然后退出；</div><div class=\"line\">-h,–help显示软件帮助信息；</div><div class=\"line\">-e,–execute=COMMAND 执行一个 “.wgetrc”命令</div><div class=\"line\"></div><div class=\"line\">-o,–output-file=FILE 将软件输出信息保存到文件；</div><div class=\"line\">-a,–append-output=FILE将软件输出信息追加到文件；</div><div class=\"line\">-d,–debug显示输出信息；</div><div class=\"line\">-q,–quiet 不显示输出信息；</div><div class=\"line\">-i,–input-file=FILE 从文件中取得URL；</div><div class=\"line\"></div><div class=\"line\">-t,–tries=NUMBER 是否下载次数（<span class=\"number\">0</span>表示无穷次）</div><div class=\"line\">-O –output-<span class=\"built_in\">document</span>=FILE下载文件保存为别的文件名</div><div class=\"line\">-nc, –no-clobber 不要覆盖已经存在的文件</div><div class=\"line\">-N,–timestamping只下载比本地新的文件</div><div class=\"line\">-T,–timeout=SECONDS 设置超时时间</div><div class=\"line\">-Y,–proxy=on/off 关闭代理</div><div class=\"line\"></div><div class=\"line\">-nd,–no-directories 不建立目录</div><div class=\"line\">-x,–force-directories 强制建立目录</div><div class=\"line\"></div><div class=\"line\">–http-user=USER设置HTTP用户</div><div class=\"line\">–http-passwd=PASS设置HTTP密码</div><div class=\"line\">–proxy-user=USER设置代理用户</div><div class=\"line\">–proxy-passwd=PASS设置代理密码</div><div class=\"line\"></div><div class=\"line\">-r,–recursive 下载整个网站、目录（小心使用）</div><div class=\"line\">-l,–level=NUMBER 下载层次</div><div class=\"line\"></div><div class=\"line\">-A,–accept=LIST 可以接受的文件类型</div><div class=\"line\">-R,–reject=LIST拒绝接受的文件类型</div><div class=\"line\">-D,–domains=LIST可以接受的域名</div><div class=\"line\">–exclude-domains=LIST拒绝的域名</div><div class=\"line\">-L,–relative 下载关联链接</div><div class=\"line\">–follow-ftp 只下载FTP链接</div><div class=\"line\">-H,–span-hosts 可以下载外面的主机</div><div class=\"line\">-I,–include-directories=LIST允许的目录</div><div class=\"line\">-X,–exclude-directories=LIST 拒绝的目录</div></pre></td></tr></table></figure>\n<p>中文文档名在平常的情况下会被编码， 但是在 –cut-dirs 时又是正常的，<br>wget -r -np -nH –cut-dirs=3 ftp://host/test/测试.txt<br>wget -r -np -nH -nd ftp://host/test/测试.txt<br>wget “ftp://host/test/*”  测试.txt</p>\n<p>由於不知名的原因,可能是为了避开特殊档名，wget 会自动将抓取档名的部分用 encode_string 处理过，所以该 patch 就把被 encode_string 处理成 “%3A” 这种东西， 用 decode_string 还原成 “:”，并套用在目录与档案名称的部分，decode_string 是 wget 内建的函式。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -t0 -c -nH -x -np -b -m -P /home/sunny/NOD32view/  http:<span class=\"comment\">//downloads1.kaspersky-labs.com/bases/ -o wget.log</span></div></pre></td></tr></table></figure></p>\n<p>美中不足的是,wget是单线程下载工具,网络环境相同的情况下,所以速度上可能跟不上axel</p>\n<h2 id=\"方法2-axel\"><a href=\"#方法2-axel\" class=\"headerlink\" title=\"方法2.axel\"></a>方法2.axel</h2><p>axel是linux下一个多线程下载工具。</p>\n<h3 id=\"Axel命令使用方法：\"><a href=\"#Axel命令使用方法：\" class=\"headerlink\" title=\"Axel命令使用方法：\"></a>Axel命令使用方法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">axel 参数 文件下载地址</div><div class=\"line\">可选参数：</div><div class=\"line\">\t-n   指定线程数</div><div class=\"line\">\t-o   指定另存为目录</div><div class=\"line\">\t-s   指定每秒的最大比特数</div><div class=\"line\">\t-q   静默模式</div></pre></td></tr></table></figure>\n<p>如从Diahosting下载lnmp安装包指定10个线程，存到/tmp/：<code>axel -n 10 -o /tmp/ http://soft.vpser.net/lnmp/lnmp0.7-full.tar.gz</code></p>\n<p>如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。</p>\n<p>首先如果你是获取百度网盘下实际的下载地址的问题:</p>\n<p>你可以将想下载的文件分享一下,创建一个公开的链接,然后在浏览器里输入链接地址.点击下载,之后浏览器会下载文件,此时取消下载,然后右键复制下载链接.(之所以要弄这一步是因为:你自己的网盘的权限问题.其他人是不可能直接登陆你的网盘下载文件的.这样转一下,只不过是把权限放开而已,无他,这样任何人都可以下载)<br>此后就是<code>axel -n 9</code> “下载链接地址”<br>注意如果下载链接地址没有加双引号,可能会出现http 401 unauthorized的错误.</p>"},{"title":"Maven Wrapper","date":"2016-11-14T02:53:29.000Z","_content":"Maven是一个常用的构建工具，但是Maven的版本和插件的配合并不是那么完美，有时候你不得不切换到一个稍微旧一些的版本，以保证所有东西正常工作。\n\n而Gradle提供了一个Wrapper，可以很好解决版本切换的问题，当然更重要的是不需要预安装Gradle。\n\nMaven虽然没有官方的Wrapper，但是有一个第三方的Wrapper可以使用。\n<!-- more -->\n\n安装很简单 `mvn -N io.takari:maven:wrapper` ，安装完成如下\n![安装](/img/maven/1.png)\n\n使用的时候直接 `./mvnw clean install` 即可，它会自动下载最新版本来执行。\n![运行](/img/maven/2.png)\n\n如果需要指定版本,重新生成mvnw文件在运行即可\n\n```js\nmvn -N io.takari:maven:wrapper -Dmaven=3.1.0\n./mvnw clean install\n```\n![切换版本](/img/maven/3.png)\n\nMaven是一个常用的构建工具，但是Maven的版本和插件的配合并不是那么完美，有时候你不得不切换到一个稍微旧一些的版本，以保证所有东西正常工作。\n\n而Gradle提供了一个Wrapper，可以很好解决版本切换的问题，当然更重要的是不需要预安装Gradle。\n\nMaven虽然没有官方的Wrapper，但是有一个第三方的Wrapper可以使用。\n","source":"_posts/maven-wrapper.md","raw":"title: 'Maven Wrapper' \ndate: 2016-11-14 10:53:29\ncategories: 技术\ntags: maven\n---\nMaven是一个常用的构建工具，但是Maven的版本和插件的配合并不是那么完美，有时候你不得不切换到一个稍微旧一些的版本，以保证所有东西正常工作。\n\n而Gradle提供了一个Wrapper，可以很好解决版本切换的问题，当然更重要的是不需要预安装Gradle。\n\nMaven虽然没有官方的Wrapper，但是有一个第三方的Wrapper可以使用。\n<!-- more -->\n\n安装很简单 `mvn -N io.takari:maven:wrapper` ，安装完成如下\n![安装](/img/maven/1.png)\n\n使用的时候直接 `./mvnw clean install` 即可，它会自动下载最新版本来执行。\n![运行](/img/maven/2.png)\n\n如果需要指定版本,重新生成mvnw文件在运行即可\n\n```js\nmvn -N io.takari:maven:wrapper -Dmaven=3.1.0\n./mvnw clean install\n```\n![切换版本](/img/maven/3.png)\n\nMaven是一个常用的构建工具，但是Maven的版本和插件的配合并不是那么完美，有时候你不得不切换到一个稍微旧一些的版本，以保证所有东西正常工作。\n\n而Gradle提供了一个Wrapper，可以很好解决版本切换的问题，当然更重要的是不需要预安装Gradle。\n\nMaven虽然没有官方的Wrapper，但是有一个第三方的Wrapper可以使用。\n","slug":"maven-wrapper","published":1,"updated":"2016-12-22T06:07:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3a000w2u6be8uusfio","content":"<p>Maven是一个常用的构建工具，但是Maven的版本和插件的配合并不是那么完美，有时候你不得不切换到一个稍微旧一些的版本，以保证所有东西正常工作。</p>\n<p>而Gradle提供了一个Wrapper，可以很好解决版本切换的问题，当然更重要的是不需要预安装Gradle。</p>\n<p>Maven虽然没有官方的Wrapper，但是有一个第三方的Wrapper可以使用。<br><a id=\"more\"></a></p>\n<p>安装很简单 <code>mvn -N io.takari:maven:wrapper</code> ，安装完成如下<br><img src=\"/img/maven/1.png\" alt=\"安装\"></p>\n<p>使用的时候直接 <code>./mvnw clean install</code> 即可，它会自动下载最新版本来执行。<br><img src=\"/img/maven/2.png\" alt=\"运行\"></p>\n<p>如果需要指定版本,重新生成mvnw文件在运行即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn -N io.takari:maven:wrapper -Dmaven=<span class=\"number\">3.1</span><span class=\"number\">.0</span></div><div class=\"line\">./mvnw clean install</div></pre></td></tr></table></figure>\n<p><img src=\"/img/maven/3.png\" alt=\"切换版本\"></p>\n<p>Maven是一个常用的构建工具，但是Maven的版本和插件的配合并不是那么完美，有时候你不得不切换到一个稍微旧一些的版本，以保证所有东西正常工作。</p>\n<p>而Gradle提供了一个Wrapper，可以很好解决版本切换的问题，当然更重要的是不需要预安装Gradle。</p>\n<p>Maven虽然没有官方的Wrapper，但是有一个第三方的Wrapper可以使用。</p>\n","excerpt":"<p>Maven是一个常用的构建工具，但是Maven的版本和插件的配合并不是那么完美，有时候你不得不切换到一个稍微旧一些的版本，以保证所有东西正常工作。</p>\n<p>而Gradle提供了一个Wrapper，可以很好解决版本切换的问题，当然更重要的是不需要预安装Gradle。</p>\n<p>Maven虽然没有官方的Wrapper，但是有一个第三方的Wrapper可以使用。<br>","more":"</p>\n<p>安装很简单 <code>mvn -N io.takari:maven:wrapper</code> ，安装完成如下<br><img src=\"/img/maven/1.png\" alt=\"安装\"></p>\n<p>使用的时候直接 <code>./mvnw clean install</code> 即可，它会自动下载最新版本来执行。<br><img src=\"/img/maven/2.png\" alt=\"运行\"></p>\n<p>如果需要指定版本,重新生成mvnw文件在运行即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn -N io.takari:maven:wrapper -Dmaven=<span class=\"number\">3.1</span><span class=\"number\">.0</span></div><div class=\"line\">./mvnw clean install</div></pre></td></tr></table></figure>\n<p><img src=\"/img/maven/3.png\" alt=\"切换版本\"></p>\n<p>Maven是一个常用的构建工具，但是Maven的版本和插件的配合并不是那么完美，有时候你不得不切换到一个稍微旧一些的版本，以保证所有东西正常工作。</p>\n<p>而Gradle提供了一个Wrapper，可以很好解决版本切换的问题，当然更重要的是不需要预安装Gradle。</p>\n<p>Maven虽然没有官方的Wrapper，但是有一个第三方的Wrapper可以使用。</p>"},{"title":"学习nodejs的一些小的知识积累","date":"2015-05-09T03:40:32.000Z","_content":"创建新的nodejs的web项目现在最新的express是4.0的版本，与先前的版本不同，这个版本开始不在app.js设置启动web应用的端口和一些异常处理，改到了../bin/www这个脚本里设置启动的路径，以及设置请求的路由设置也会在相应的目录下生成。目前作者我在学习JS，所以只是大体的写了一些东西，标志一下心得nodejs的启动方式和现在的路径对应的讲解。\n<!-- more -->\n首先要讲解一下nodejs的生成方式：express -e blogs //小编我呢比较喜欢ejs这个编写方式，因为很简单，一下都是这种方式编写的。\n接下来会生成一个文件夹:blogs, cd blogs,显示一下目录下有:\napp.js --------- 一个用于编写模块的文件，里面定义了一些会用到的东西\nrouter ------ 配置请求路由表的文件夹，下面会有两个文件 index.js和user.js （之后可以添加一些文件请求）\npublic ----- 存放着你需要的样式和一些js文件，当然还有字体、图片、音乐。。。。\nviews  ------- 这个就是你的页面存在的文件夹了（这里就发挥你对页面的想象力吧。）\npackage.json ----- 这个很重要的哦，用于配置你的网页的模块依赖，和部署的一些启动方式什么的。\nbin ----- 熟悉linux的都知道了，这是启动用的，这个不例外，也是启动用的。\n```js\n\n```\n","source":"_posts/node-about.md","raw":"title: 学习nodejs的一些小的知识积累\ndate: 2015-05-09 11:40:32\ncategories: 技术\ntags: nodejs\n---\n创建新的nodejs的web项目现在最新的express是4.0的版本，与先前的版本不同，这个版本开始不在app.js设置启动web应用的端口和一些异常处理，改到了../bin/www这个脚本里设置启动的路径，以及设置请求的路由设置也会在相应的目录下生成。目前作者我在学习JS，所以只是大体的写了一些东西，标志一下心得nodejs的启动方式和现在的路径对应的讲解。\n<!-- more -->\n首先要讲解一下nodejs的生成方式：express -e blogs //小编我呢比较喜欢ejs这个编写方式，因为很简单，一下都是这种方式编写的。\n接下来会生成一个文件夹:blogs, cd blogs,显示一下目录下有:\napp.js --------- 一个用于编写模块的文件，里面定义了一些会用到的东西\nrouter ------ 配置请求路由表的文件夹，下面会有两个文件 index.js和user.js （之后可以添加一些文件请求）\npublic ----- 存放着你需要的样式和一些js文件，当然还有字体、图片、音乐。。。。\nviews  ------- 这个就是你的页面存在的文件夹了（这里就发挥你对页面的想象力吧。）\npackage.json ----- 这个很重要的哦，用于配置你的网页的模块依赖，和部署的一些启动方式什么的。\nbin ----- 熟悉linux的都知道了，这是启动用的，这个不例外，也是启动用的。\n```js\n\n```\n","slug":"node-about","published":1,"updated":"2016-12-12T10:23:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3f000z2u6bqvw7jdef","content":"<p>创建新的nodejs的web项目现在最新的express是4.0的版本，与先前的版本不同，这个版本开始不在app.js设置启动web应用的端口和一些异常处理，改到了../bin/www这个脚本里设置启动的路径，以及设置请求的路由设置也会在相应的目录下生成。目前作者我在学习JS，所以只是大体的写了一些东西，标志一下心得nodejs的启动方式和现在的路径对应的讲解。<br><a id=\"more\"></a><br>首先要讲解一下nodejs的生成方式：express -e blogs //小编我呢比较喜欢ejs这个编写方式，因为很简单，一下都是这种方式编写的。<br>接下来会生成一个文件夹:blogs, cd blogs,显示一下目录下有:<br>app.js ——— 一个用于编写模块的文件，里面定义了一些会用到的东西<br>router —— 配置请求路由表的文件夹，下面会有两个文件 index.js和user.js （之后可以添加一些文件请求）<br>public —– 存放着你需要的样式和一些js文件，当然还有字体、图片、音乐。。。。<br>views  ——- 这个就是你的页面存在的文件夹了（这里就发挥你对页面的想象力吧。）<br>package.json —– 这个很重要的哦，用于配置你的网页的模块依赖，和部署的一些启动方式什么的。<br>bin —– 熟悉linux的都知道了，这是启动用的，这个不例外，也是启动用的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>创建新的nodejs的web项目现在最新的express是4.0的版本，与先前的版本不同，这个版本开始不在app.js设置启动web应用的端口和一些异常处理，改到了../bin/www这个脚本里设置启动的路径，以及设置请求的路由设置也会在相应的目录下生成。目前作者我在学习JS，所以只是大体的写了一些东西，标志一下心得nodejs的启动方式和现在的路径对应的讲解。<br>","more":"<br>首先要讲解一下nodejs的生成方式：express -e blogs //小编我呢比较喜欢ejs这个编写方式，因为很简单，一下都是这种方式编写的。<br>接下来会生成一个文件夹:blogs, cd blogs,显示一下目录下有:<br>app.js ——— 一个用于编写模块的文件，里面定义了一些会用到的东西<br>router —— 配置请求路由表的文件夹，下面会有两个文件 index.js和user.js （之后可以添加一些文件请求）<br>public —– 存放着你需要的样式和一些js文件，当然还有字体、图片、音乐。。。。<br>views  ——- 这个就是你的页面存在的文件夹了（这里就发挥你对页面的想象力吧。）<br>package.json —– 这个很重要的哦，用于配置你的网页的模块依赖，和部署的一些启动方式什么的。<br>bin —– 熟悉linux的都知道了，这是启动用的，这个不例外，也是启动用的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>"},{"title":"nginx启动，重启，关闭命令","date":"2016-11-14T01:53:29.000Z","_content":"停止操作\n停止操作是通过向nginx进程发送信号（什么是信号请参阅linux文 章）来进行的\n步骤1：查询nginx主进程号\nps -ef | grep nginx\n在进程列表里 面找master进程，它的编号就是主进程号了。\n步骤2：发送信号\n从容停止Nginx：\nkill -QUIT 主进程号\n快速停止Nginx：\nkill -TERM 主进程号\n强制停止Nginx：\npkill -9 nginx\n<!-- more -->\n\n另外， 若在nginx.conf配置了pid文件存放路径则该文件存放的就是Nginx主进程号，如果没指定则放在nginx的logs目录下。有了pid文 件，我们就不用先查询Nginx的主进程号，而直接向Nginx发送信号了，命令如下：\nkill -信号类型 '/usr/nginx/logs/nginx.pid'\n\n平滑重启\n如果更改了配置就要重启Nginx，要先关闭Nginx再打开？不是的，可以向Nginx 发送信号，平滑重启。\n平滑重启命令：\nkill -HUP 住进称号或进程号文件路径\n或者使用\n\n/usr/nginx/sbin/nginx -s reload\n\n注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：\nnginx -t -c /usr/nginx/conf/nginx.conf\n或者\n\n/usr/nginx/sbin/nginx -t\n\n平滑升级\n如果服务器正在运行的Nginx要进行升级、添加或删除模块时，我们需 要停掉服务器并做相应修改，这样服务器就要在一段时间内停止服务，Nginx可以在不停机的情况下进行各种升级动作而不影响服务器运行。\n步骤1：\n如 果升级Nginx程序，先用新程序替换旧程序文件，编译安装的话新程序直接编译到Nginx安装目录中。\n步 骤2：执行命令\nkill -USR2 旧版程序的主进程号或进程文件名\n此时旧的Nginx主进程将会把自己的进程文件改名为.oldbin，然后执行新版 Nginx。新旧Nginx会同市运行，共同处理请求。\n这时要逐步停止旧版 Nginx，输入命令：\nkill -WINCH 旧版主进程号\n慢慢旧的工作进程就都会随着任务执行完毕而退出，新版的Nginx的工作进程会逐渐取代旧版 工作进程。\n\n此 时，我们可以决定使用新版还是恢复到旧版。\n不重载配置启动新/旧工作进程\nkill -HUP 旧/新版主进程号\n从容关闭旧/新进程\nkill -QUIT 旧/新主进程号\n如果此时报错，提示还有进程没有结束就用下面命令先关闭旧/新工作进程，再关闭主进程号：\nkill -TERM 旧/新工作进程号\n\n这样下来，如果要恢复到旧版本，只需要上面的几个步 骤都是操作新版主进程号，如果要用新版本就上面的几个步骤都操作旧版主进程号就行了。\n\n上面就是Nginx的一些基本的操作，希望以后Nginx能有更好的方法来处理这些操作， 最好是Nginx的命令而不是向Nginx进程发送系统信号。\n","source":"_posts/nginx-restart.md","raw":"title: 'nginx启动，重启，关闭命令'\ndate: 2016-11-14 09:53:29\ncategories: 技术\ntags: nginx\n---\n停止操作\n停止操作是通过向nginx进程发送信号（什么是信号请参阅linux文 章）来进行的\n步骤1：查询nginx主进程号\nps -ef | grep nginx\n在进程列表里 面找master进程，它的编号就是主进程号了。\n步骤2：发送信号\n从容停止Nginx：\nkill -QUIT 主进程号\n快速停止Nginx：\nkill -TERM 主进程号\n强制停止Nginx：\npkill -9 nginx\n<!-- more -->\n\n另外， 若在nginx.conf配置了pid文件存放路径则该文件存放的就是Nginx主进程号，如果没指定则放在nginx的logs目录下。有了pid文 件，我们就不用先查询Nginx的主进程号，而直接向Nginx发送信号了，命令如下：\nkill -信号类型 '/usr/nginx/logs/nginx.pid'\n\n平滑重启\n如果更改了配置就要重启Nginx，要先关闭Nginx再打开？不是的，可以向Nginx 发送信号，平滑重启。\n平滑重启命令：\nkill -HUP 住进称号或进程号文件路径\n或者使用\n\n/usr/nginx/sbin/nginx -s reload\n\n注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：\nnginx -t -c /usr/nginx/conf/nginx.conf\n或者\n\n/usr/nginx/sbin/nginx -t\n\n平滑升级\n如果服务器正在运行的Nginx要进行升级、添加或删除模块时，我们需 要停掉服务器并做相应修改，这样服务器就要在一段时间内停止服务，Nginx可以在不停机的情况下进行各种升级动作而不影响服务器运行。\n步骤1：\n如 果升级Nginx程序，先用新程序替换旧程序文件，编译安装的话新程序直接编译到Nginx安装目录中。\n步 骤2：执行命令\nkill -USR2 旧版程序的主进程号或进程文件名\n此时旧的Nginx主进程将会把自己的进程文件改名为.oldbin，然后执行新版 Nginx。新旧Nginx会同市运行，共同处理请求。\n这时要逐步停止旧版 Nginx，输入命令：\nkill -WINCH 旧版主进程号\n慢慢旧的工作进程就都会随着任务执行完毕而退出，新版的Nginx的工作进程会逐渐取代旧版 工作进程。\n\n此 时，我们可以决定使用新版还是恢复到旧版。\n不重载配置启动新/旧工作进程\nkill -HUP 旧/新版主进程号\n从容关闭旧/新进程\nkill -QUIT 旧/新主进程号\n如果此时报错，提示还有进程没有结束就用下面命令先关闭旧/新工作进程，再关闭主进程号：\nkill -TERM 旧/新工作进程号\n\n这样下来，如果要恢复到旧版本，只需要上面的几个步 骤都是操作新版主进程号，如果要用新版本就上面的几个步骤都操作旧版主进程号就行了。\n\n上面就是Nginx的一些基本的操作，希望以后Nginx能有更好的方法来处理这些操作， 最好是Nginx的命令而不是向Nginx进程发送系统信号。\n","slug":"nginx-restart","published":1,"updated":"2016-12-22T02:11:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3g00112u6b8iaydrc4","content":"<p>停止操作<br>停止操作是通过向nginx进程发送信号（什么是信号请参阅linux文 章）来进行的<br>步骤1：查询nginx主进程号<br>ps -ef | grep nginx<br>在进程列表里 面找master进程，它的编号就是主进程号了。<br>步骤2：发送信号<br>从容停止Nginx：<br>kill -QUIT 主进程号<br>快速停止Nginx：<br>kill -TERM 主进程号<br>强制停止Nginx：<br>pkill -9 nginx<br><a id=\"more\"></a></p>\n<p>另外， 若在nginx.conf配置了pid文件存放路径则该文件存放的就是Nginx主进程号，如果没指定则放在nginx的logs目录下。有了pid文 件，我们就不用先查询Nginx的主进程号，而直接向Nginx发送信号了，命令如下：<br>kill -信号类型 ‘/usr/nginx/logs/nginx.pid’</p>\n<p>平滑重启<br>如果更改了配置就要重启Nginx，要先关闭Nginx再打开？不是的，可以向Nginx 发送信号，平滑重启。<br>平滑重启命令：<br>kill -HUP 住进称号或进程号文件路径<br>或者使用</p>\n<p>/usr/nginx/sbin/nginx -s reload</p>\n<p>注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：<br>nginx -t -c /usr/nginx/conf/nginx.conf<br>或者</p>\n<p>/usr/nginx/sbin/nginx -t</p>\n<p>平滑升级<br>如果服务器正在运行的Nginx要进行升级、添加或删除模块时，我们需 要停掉服务器并做相应修改，这样服务器就要在一段时间内停止服务，Nginx可以在不停机的情况下进行各种升级动作而不影响服务器运行。<br>步骤1：<br>如 果升级Nginx程序，先用新程序替换旧程序文件，编译安装的话新程序直接编译到Nginx安装目录中。<br>步 骤2：执行命令<br>kill -USR2 旧版程序的主进程号或进程文件名<br>此时旧的Nginx主进程将会把自己的进程文件改名为.oldbin，然后执行新版 Nginx。新旧Nginx会同市运行，共同处理请求。<br>这时要逐步停止旧版 Nginx，输入命令：<br>kill -WINCH 旧版主进程号<br>慢慢旧的工作进程就都会随着任务执行完毕而退出，新版的Nginx的工作进程会逐渐取代旧版 工作进程。</p>\n<p>此 时，我们可以决定使用新版还是恢复到旧版。<br>不重载配置启动新/旧工作进程<br>kill -HUP 旧/新版主进程号<br>从容关闭旧/新进程<br>kill -QUIT 旧/新主进程号<br>如果此时报错，提示还有进程没有结束就用下面命令先关闭旧/新工作进程，再关闭主进程号：<br>kill -TERM 旧/新工作进程号</p>\n<p>这样下来，如果要恢复到旧版本，只需要上面的几个步 骤都是操作新版主进程号，如果要用新版本就上面的几个步骤都操作旧版主进程号就行了。</p>\n<p>上面就是Nginx的一些基本的操作，希望以后Nginx能有更好的方法来处理这些操作， 最好是Nginx的命令而不是向Nginx进程发送系统信号。</p>\n","excerpt":"<p>停止操作<br>停止操作是通过向nginx进程发送信号（什么是信号请参阅linux文 章）来进行的<br>步骤1：查询nginx主进程号<br>ps -ef | grep nginx<br>在进程列表里 面找master进程，它的编号就是主进程号了。<br>步骤2：发送信号<br>从容停止Nginx：<br>kill -QUIT 主进程号<br>快速停止Nginx：<br>kill -TERM 主进程号<br>强制停止Nginx：<br>pkill -9 nginx<br>","more":"</p>\n<p>另外， 若在nginx.conf配置了pid文件存放路径则该文件存放的就是Nginx主进程号，如果没指定则放在nginx的logs目录下。有了pid文 件，我们就不用先查询Nginx的主进程号，而直接向Nginx发送信号了，命令如下：<br>kill -信号类型 ‘/usr/nginx/logs/nginx.pid’</p>\n<p>平滑重启<br>如果更改了配置就要重启Nginx，要先关闭Nginx再打开？不是的，可以向Nginx 发送信号，平滑重启。<br>平滑重启命令：<br>kill -HUP 住进称号或进程号文件路径<br>或者使用</p>\n<p>/usr/nginx/sbin/nginx -s reload</p>\n<p>注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：<br>nginx -t -c /usr/nginx/conf/nginx.conf<br>或者</p>\n<p>/usr/nginx/sbin/nginx -t</p>\n<p>平滑升级<br>如果服务器正在运行的Nginx要进行升级、添加或删除模块时，我们需 要停掉服务器并做相应修改，这样服务器就要在一段时间内停止服务，Nginx可以在不停机的情况下进行各种升级动作而不影响服务器运行。<br>步骤1：<br>如 果升级Nginx程序，先用新程序替换旧程序文件，编译安装的话新程序直接编译到Nginx安装目录中。<br>步 骤2：执行命令<br>kill -USR2 旧版程序的主进程号或进程文件名<br>此时旧的Nginx主进程将会把自己的进程文件改名为.oldbin，然后执行新版 Nginx。新旧Nginx会同市运行，共同处理请求。<br>这时要逐步停止旧版 Nginx，输入命令：<br>kill -WINCH 旧版主进程号<br>慢慢旧的工作进程就都会随着任务执行完毕而退出，新版的Nginx的工作进程会逐渐取代旧版 工作进程。</p>\n<p>此 时，我们可以决定使用新版还是恢复到旧版。<br>不重载配置启动新/旧工作进程<br>kill -HUP 旧/新版主进程号<br>从容关闭旧/新进程<br>kill -QUIT 旧/新主进程号<br>如果此时报错，提示还有进程没有结束就用下面命令先关闭旧/新工作进程，再关闭主进程号：<br>kill -TERM 旧/新工作进程号</p>\n<p>这样下来，如果要恢复到旧版本，只需要上面的几个步 骤都是操作新版主进程号，如果要用新版本就上面的几个步骤都操作旧版主进程号就行了。</p>\n<p>上面就是Nginx的一些基本的操作，希望以后Nginx能有更好的方法来处理这些操作， 最好是Nginx的命令而不是向Nginx进程发送系统信号。</p>"},{"title":"Python socket – chat server and client with code example","date":"2016-12-16T03:53:29.000Z","_content":"## Socket based chat application\nIn our previous article on socket programming in python we learned about the basics of creating a socket server and client in python. In this post we are going to write a very simple chat application in python that is powered by sockets.\nThe chat application we are going to make will be more like a chat room, rather than a peer to peer chat. So this means that multiple users can connect to the chat server and send their messages. Every message is broadcasted to every connected chat user. The construction is as simple as the theory.\n\n### Code\n\nThe code consists of 2 python scripts. First is the server and the other is the chat client.\n<!-- more -->\n### Chat server\nThe chat server does the following things\n\n* 1. Accept multiple incoming connections for client.\n* 2. Read incoming messages from each client and broadcast them to all other connected clients.\n\nHere is the code of the chat server. It server opens up port 5000 to listen for incoming connections. The chat client must connect to this same port. You can change the port number if you want.\n\nThe server handles multiple chat clients with select based multiplexing. The select function monitors all the client sockets and the master socket for readable activity. If any of the client socket is readable then it means that one of the chat client has send a message.\n\n```js\n# Get the list sockets which are ready to be read through select\nread_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])\n```\nWhen the select function returns, the read_sockets will be an array consisting of all socket descriptors that are readable. So if the master socket is readable, the server would accept the new connection. If any of the client socket is readable, the server would read the message, and broadcast it back to all clients except the one who send the message. The following function broadcasts the message to all chat clients.\n```js\ndef broadcast_data (sock, message):\n    #Do not send the message to master socket and the client who has send us the message\n    for socket in CONNECTION_LIST:\n        if socket != server_socket and socket != sock :\n            try :\n                socket.send(message)\n            except :\n                # broken socket connection may be, chat client pressed ctrl+c for example\n                socket.close()\n                CONNECTION_LIST.remove(socket)\n```\nIf the broadcast function fails to send message to any of the client, the client is assumed to be disconnected and the connection is closed and the socket is removed from the connection list.\n\nRest of the program is quite self explanatory. Here is the full code of the chat client.\n\n```js\n# Tcp Chat server\n \nimport socket, select\n \n#Function to broadcast chat messages to all connected clients\ndef broadcast_data (sock, message):\n    #Do not send the message to master socket and the client who has send us the message\n    for socket in CONNECTION_LIST:\n        if socket != server_socket and socket != sock :\n            try :\n                socket.send(message)\n            except :\n                # broken socket connection may be, chat client pressed ctrl+c for example\n                socket.close()\n                CONNECTION_LIST.remove(socket)\n \nif __name__ == \"__main__\":\n     \n    # List to keep track of socket descriptors\n    CONNECTION_LIST = []\n    RECV_BUFFER = 4096 # Advisable to keep it as an exponent of 2\n    PORT = 5000\n     \n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # this has no effect, why ?\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind((\"0.0.0.0\", PORT))\n    server_socket.listen(10)\n \n    # Add server socket to the list of readable connections\n    CONNECTION_LIST.append(server_socket)\n \n    print \"Chat server started on port \" + str(PORT)\n \n    while 1:\n        # Get the list sockets which are ready to be read through select\n        read_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])\n \n        for sock in read_sockets:\n            #New connection\n            if sock == server_socket:\n                # Handle the case in which there is a new connection recieved through server_socket\n                sockfd, addr = server_socket.accept()\n                CONNECTION_LIST.append(sockfd)\n                print \"Client (%s, %s) connected\" % addr\n                 \n                broadcast_data(sockfd, \"[%s:%s] entered room\\n\" % addr)\n             \n            #Some incoming message from a client\n            else:\n                # Data recieved from client, process it\n                try:\n                    #In Windows, sometimes when a TCP program closes abruptly,\n                    # a \"Connection reset by peer\" exception will be thrown\n                    data = sock.recv(RECV_BUFFER)\n                    if data:\n                        broadcast_data(sock, \"\\r\" + '<' + str(sock.getpeername()) + '> ' + data)                \n                 \n                except:\n                    broadcast_data(sock, \"Client (%s, %s) is offline\" % addr)\n                    print \"Client (%s, %s) is offline\" % addr\n                    sock.close()\n                    CONNECTION_LIST.remove(sock)\n                    continue\n     \n    server_socket.close()\n```\nRun the server in a console.\n``\n$ python chat_server.py \nChat server started on port 5000\n``\n### Chat client\nNow lets code the chat client that will connect to the above chat server. The client is based on the telnet program in python. It connects to a remote server, sends messages and receives messages.\n\nThe chat client does the following 2 things :\n\n* 1. Listen for incoming messages from the server.\n* 2. Check user input. If the user types in a message then send it to the server.\n\nNow here is something tricky. The client has to actually listen for server message and user input at the same time. To do this, we use the select function. The select function can monitor multiple sockets or file descriptors for some \"interesting activity\" which is this case is readable. When a message comes from the server on the connected socket, it is readable and when the user types a message and hits enter, the stdin stream is readable.\n\nSo the select function has to monitor 2 streams. First is the socket that is connected to the remote webserver, and second is stdin or terminal input stream. The select function blocks till something happens. So after calling select, it will return only when either the server socket receives a message or the user enters a message. If nothing happens it keeps on waiting.\n\n```js\nsocket_list = [sys.stdin, s]\n         \n# Get the list sockets which are readable\nread_sockets, write_sockets, error_sockets = select.select(socket_list , [], [])\n```\nWe simply create an array of the stdin file descriptor that is available from the sys module, and the server socket s. Then we call the select function passing it the list. The select function returns a list of arrays that are readable, writable or had an error. The readable sockets will be again a list of sockets that is readable.\n\nSo in this case, the read_sockets array will contain either the server socket, or stdin or both. Then the next task is to do relevant processing based on which socket is readable. If the server socket is readable, it means that the server has send a message on that socket and so it should be printed. If stdin is readable, it means that the user typed a message and hit enter key, so that message should be read and send to server as a chat message.\n\nHere is the python code that implements the above logic using select function\n\n```js\n# telnet program example\nimport socket, select, string, sys\n \ndef prompt() :\n    sys.stdout.write('<You> ')\n    sys.stdout.flush()\n \n#main function\nif __name__ == \"__main__\":\n     \n    if(len(sys.argv) < 3) :\n        print 'Usage : python telnet.py hostname port'\n        sys.exit()\n     \n    host = sys.argv[1]\n    port = int(sys.argv[2])\n     \n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(2)\n     \n    # connect to remote host\n    try :\n        s.connect((host, port))\n    except :\n        print 'Unable to connect'\n        sys.exit()\n     \n    print 'Connected to remote host. Start sending messages'\n    prompt()\n     \n    while 1:\n        socket_list = [sys.stdin, s]\n         \n        # Get the list sockets which are readable\n        read_sockets, write_sockets, error_sockets = select.select(socket_list , [], [])\n         \n        for sock in read_sockets:\n            #incoming message from remote server\n            if sock == s:\n                data = sock.recv(4096)\n                if not data :\n                    print '\\nDisconnected from chat server'\n                    sys.exit()\n                else :\n                    #print data\n                    sys.stdout.write(data)\n                    prompt()\n             \n            #user entered a message\n            else :\n                msg = sys.stdin.readline()\n                s.send(msg)\n                prompt()\n  \n```           \nRun the client from multiple consoles.\n``\n$ python telnet.py localhost 5000\nConnected to remote host. Start sending messages\n<You> hello\n<You> I am fine\n<('127.0.0.1', 38378)> ok good\n<You>\n``\non another console\n``\n<You> [127.0.0.1:39339] entered room\n<('127.0.0.1', 39339)> hello\n<('127.0.0.1', 39339)> I am fine\n<You> ok good\n``\nSo the messages send by one client are seen on the consoles of other clients. Logic is quite simple. Run it and check it out.\n\n## Note\n\nThe above shown chat client is not going to work on windows. It uses the select function to read data from both the socket and the input stream. This works on linux but not on windows.\n\nThe python documentation on select mentions this\n\n`File objects on Windows are not acceptable, but sockets are. On Windows, the underlying select() function is provided by the WinSock library, and does not handle file descriptors that don’t originate from WinSock.`\nLinux treats sockets and file descriptors in the same manner, therefor the select function is able to read from stdin. On windows the select function will not read anything except sockets created by the winsock socket functions.\n\nThere is another drawback that the above shown chat program suffers. If in the chat client a user is typing a message and while typing a message comes from the server, then the server message shall be printed rightaway and the message that the user was typing would be lost. That is the expected behaviour of this program and there is nothing that can be done to fix this properly.\n\nOnly solution is to use better terminal libraries like ncurses to keep the user input separate from terminal output. Or write a gui program.\n\n","source":"_posts/python-socket.md","raw":"title: Python socket – chat server and client with code example \ndate: 2016-12-16 11:53:29\ncategories: Python\ntags: [python,linux,chat]\n---\n## Socket based chat application\nIn our previous article on socket programming in python we learned about the basics of creating a socket server and client in python. In this post we are going to write a very simple chat application in python that is powered by sockets.\nThe chat application we are going to make will be more like a chat room, rather than a peer to peer chat. So this means that multiple users can connect to the chat server and send their messages. Every message is broadcasted to every connected chat user. The construction is as simple as the theory.\n\n### Code\n\nThe code consists of 2 python scripts. First is the server and the other is the chat client.\n<!-- more -->\n### Chat server\nThe chat server does the following things\n\n* 1. Accept multiple incoming connections for client.\n* 2. Read incoming messages from each client and broadcast them to all other connected clients.\n\nHere is the code of the chat server. It server opens up port 5000 to listen for incoming connections. The chat client must connect to this same port. You can change the port number if you want.\n\nThe server handles multiple chat clients with select based multiplexing. The select function monitors all the client sockets and the master socket for readable activity. If any of the client socket is readable then it means that one of the chat client has send a message.\n\n```js\n# Get the list sockets which are ready to be read through select\nread_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])\n```\nWhen the select function returns, the read_sockets will be an array consisting of all socket descriptors that are readable. So if the master socket is readable, the server would accept the new connection. If any of the client socket is readable, the server would read the message, and broadcast it back to all clients except the one who send the message. The following function broadcasts the message to all chat clients.\n```js\ndef broadcast_data (sock, message):\n    #Do not send the message to master socket and the client who has send us the message\n    for socket in CONNECTION_LIST:\n        if socket != server_socket and socket != sock :\n            try :\n                socket.send(message)\n            except :\n                # broken socket connection may be, chat client pressed ctrl+c for example\n                socket.close()\n                CONNECTION_LIST.remove(socket)\n```\nIf the broadcast function fails to send message to any of the client, the client is assumed to be disconnected and the connection is closed and the socket is removed from the connection list.\n\nRest of the program is quite self explanatory. Here is the full code of the chat client.\n\n```js\n# Tcp Chat server\n \nimport socket, select\n \n#Function to broadcast chat messages to all connected clients\ndef broadcast_data (sock, message):\n    #Do not send the message to master socket and the client who has send us the message\n    for socket in CONNECTION_LIST:\n        if socket != server_socket and socket != sock :\n            try :\n                socket.send(message)\n            except :\n                # broken socket connection may be, chat client pressed ctrl+c for example\n                socket.close()\n                CONNECTION_LIST.remove(socket)\n \nif __name__ == \"__main__\":\n     \n    # List to keep track of socket descriptors\n    CONNECTION_LIST = []\n    RECV_BUFFER = 4096 # Advisable to keep it as an exponent of 2\n    PORT = 5000\n     \n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # this has no effect, why ?\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind((\"0.0.0.0\", PORT))\n    server_socket.listen(10)\n \n    # Add server socket to the list of readable connections\n    CONNECTION_LIST.append(server_socket)\n \n    print \"Chat server started on port \" + str(PORT)\n \n    while 1:\n        # Get the list sockets which are ready to be read through select\n        read_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])\n \n        for sock in read_sockets:\n            #New connection\n            if sock == server_socket:\n                # Handle the case in which there is a new connection recieved through server_socket\n                sockfd, addr = server_socket.accept()\n                CONNECTION_LIST.append(sockfd)\n                print \"Client (%s, %s) connected\" % addr\n                 \n                broadcast_data(sockfd, \"[%s:%s] entered room\\n\" % addr)\n             \n            #Some incoming message from a client\n            else:\n                # Data recieved from client, process it\n                try:\n                    #In Windows, sometimes when a TCP program closes abruptly,\n                    # a \"Connection reset by peer\" exception will be thrown\n                    data = sock.recv(RECV_BUFFER)\n                    if data:\n                        broadcast_data(sock, \"\\r\" + '<' + str(sock.getpeername()) + '> ' + data)                \n                 \n                except:\n                    broadcast_data(sock, \"Client (%s, %s) is offline\" % addr)\n                    print \"Client (%s, %s) is offline\" % addr\n                    sock.close()\n                    CONNECTION_LIST.remove(sock)\n                    continue\n     \n    server_socket.close()\n```\nRun the server in a console.\n``\n$ python chat_server.py \nChat server started on port 5000\n``\n### Chat client\nNow lets code the chat client that will connect to the above chat server. The client is based on the telnet program in python. It connects to a remote server, sends messages and receives messages.\n\nThe chat client does the following 2 things :\n\n* 1. Listen for incoming messages from the server.\n* 2. Check user input. If the user types in a message then send it to the server.\n\nNow here is something tricky. The client has to actually listen for server message and user input at the same time. To do this, we use the select function. The select function can monitor multiple sockets or file descriptors for some \"interesting activity\" which is this case is readable. When a message comes from the server on the connected socket, it is readable and when the user types a message and hits enter, the stdin stream is readable.\n\nSo the select function has to monitor 2 streams. First is the socket that is connected to the remote webserver, and second is stdin or terminal input stream. The select function blocks till something happens. So after calling select, it will return only when either the server socket receives a message or the user enters a message. If nothing happens it keeps on waiting.\n\n```js\nsocket_list = [sys.stdin, s]\n         \n# Get the list sockets which are readable\nread_sockets, write_sockets, error_sockets = select.select(socket_list , [], [])\n```\nWe simply create an array of the stdin file descriptor that is available from the sys module, and the server socket s. Then we call the select function passing it the list. The select function returns a list of arrays that are readable, writable or had an error. The readable sockets will be again a list of sockets that is readable.\n\nSo in this case, the read_sockets array will contain either the server socket, or stdin or both. Then the next task is to do relevant processing based on which socket is readable. If the server socket is readable, it means that the server has send a message on that socket and so it should be printed. If stdin is readable, it means that the user typed a message and hit enter key, so that message should be read and send to server as a chat message.\n\nHere is the python code that implements the above logic using select function\n\n```js\n# telnet program example\nimport socket, select, string, sys\n \ndef prompt() :\n    sys.stdout.write('<You> ')\n    sys.stdout.flush()\n \n#main function\nif __name__ == \"__main__\":\n     \n    if(len(sys.argv) < 3) :\n        print 'Usage : python telnet.py hostname port'\n        sys.exit()\n     \n    host = sys.argv[1]\n    port = int(sys.argv[2])\n     \n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(2)\n     \n    # connect to remote host\n    try :\n        s.connect((host, port))\n    except :\n        print 'Unable to connect'\n        sys.exit()\n     \n    print 'Connected to remote host. Start sending messages'\n    prompt()\n     \n    while 1:\n        socket_list = [sys.stdin, s]\n         \n        # Get the list sockets which are readable\n        read_sockets, write_sockets, error_sockets = select.select(socket_list , [], [])\n         \n        for sock in read_sockets:\n            #incoming message from remote server\n            if sock == s:\n                data = sock.recv(4096)\n                if not data :\n                    print '\\nDisconnected from chat server'\n                    sys.exit()\n                else :\n                    #print data\n                    sys.stdout.write(data)\n                    prompt()\n             \n            #user entered a message\n            else :\n                msg = sys.stdin.readline()\n                s.send(msg)\n                prompt()\n  \n```           \nRun the client from multiple consoles.\n``\n$ python telnet.py localhost 5000\nConnected to remote host. Start sending messages\n<You> hello\n<You> I am fine\n<('127.0.0.1', 38378)> ok good\n<You>\n``\non another console\n``\n<You> [127.0.0.1:39339] entered room\n<('127.0.0.1', 39339)> hello\n<('127.0.0.1', 39339)> I am fine\n<You> ok good\n``\nSo the messages send by one client are seen on the consoles of other clients. Logic is quite simple. Run it and check it out.\n\n## Note\n\nThe above shown chat client is not going to work on windows. It uses the select function to read data from both the socket and the input stream. This works on linux but not on windows.\n\nThe python documentation on select mentions this\n\n`File objects on Windows are not acceptable, but sockets are. On Windows, the underlying select() function is provided by the WinSock library, and does not handle file descriptors that don’t originate from WinSock.`\nLinux treats sockets and file descriptors in the same manner, therefor the select function is able to read from stdin. On windows the select function will not read anything except sockets created by the winsock socket functions.\n\nThere is another drawback that the above shown chat program suffers. If in the chat client a user is typing a message and while typing a message comes from the server, then the server message shall be printed rightaway and the message that the user was typing would be lost. That is the expected behaviour of this program and there is nothing that can be done to fix this properly.\n\nOnly solution is to use better terminal libraries like ncurses to keep the user input separate from terminal output. Or write a gui program.\n\n","slug":"python-socket","published":1,"updated":"2016-12-16T03:22:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3h00132u6betfgj2go","content":"<h2 id=\"Socket-based-chat-application\"><a href=\"#Socket-based-chat-application\" class=\"headerlink\" title=\"Socket based chat application\"></a>Socket based chat application</h2><p>In our previous article on socket programming in python we learned about the basics of creating a socket server and client in python. In this post we are going to write a very simple chat application in python that is powered by sockets.<br>The chat application we are going to make will be more like a chat room, rather than a peer to peer chat. So this means that multiple users can connect to the chat server and send their messages. Every message is broadcasted to every connected chat user. The construction is as simple as the theory.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>The code consists of 2 python scripts. First is the server and the other is the chat client.<br><a id=\"more\"></a></p>\n<h3 id=\"Chat-server\"><a href=\"#Chat-server\" class=\"headerlink\" title=\"Chat server\"></a>Chat server</h3><p>The chat server does the following things</p>\n<ul>\n<li><ol>\n<li>Accept multiple incoming connections for client.</li>\n</ol>\n</li>\n<li><ol>\n<li>Read incoming messages from each client and broadcast them to all other connected clients.</li>\n</ol>\n</li>\n</ul>\n<p>Here is the code of the chat server. It server opens up port 5000 to listen for incoming connections. The chat client must connect to this same port. You can change the port number if you want.</p>\n<p>The server handles multiple chat clients with select based multiplexing. The select function monitors all the client sockets and the master socket for readable activity. If any of the client socket is readable then it means that one of the chat client has send a message.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Get the list sockets which are ready to be read through select</div><div class=\"line\">read_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])</div></pre></td></tr></table></figure>\n<p>When the select function returns, the read_sockets will be an array consisting of all socket descriptors that are readable. So if the master socket is readable, the server would accept the new connection. If any of the client socket is readable, the server would read the message, and broadcast it back to all clients except the one who send the message. The following function broadcasts the message to all chat clients.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">def broadcast_data (sock, message):</div><div class=\"line\">    #Do not send the message to master socket and the client who has send us the message</div><div class=\"line\">    for socket in CONNECTION_LIST:</div><div class=\"line\">        if socket != server_socket and socket != sock :</div><div class=\"line\">            try :</div><div class=\"line\">                socket.send(message)</div><div class=\"line\">            except :</div><div class=\"line\">                # broken socket connection may be, chat client pressed ctrl+c for example</div><div class=\"line\">                socket.close()</div><div class=\"line\">                CONNECTION_LIST.remove(socket)</div></pre></td></tr></table></figure></p>\n<p>If the broadcast function fails to send message to any of the client, the client is assumed to be disconnected and the connection is closed and the socket is removed from the connection list.</p>\n<p>Rest of the program is quite self explanatory. Here is the full code of the chat client.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Tcp Chat server</div><div class=\"line\"> </div><div class=\"line\">import socket, select</div><div class=\"line\"> </div><div class=\"line\">#Function to broadcast chat messages to all connected clients</div><div class=\"line\">def broadcast_data (sock, message):</div><div class=\"line\">    #Do not send the message to master socket and the client who has send us the message</div><div class=\"line\">    for socket in CONNECTION_LIST:</div><div class=\"line\">        if socket != server_socket and socket != sock :</div><div class=\"line\">            try :</div><div class=\"line\">                socket.send(message)</div><div class=\"line\">            except :</div><div class=\"line\">                # broken socket connection may be, chat client pressed ctrl+c for example</div><div class=\"line\">                socket.close()</div><div class=\"line\">                CONNECTION_LIST.remove(socket)</div><div class=\"line\"> </div><div class=\"line\">if __name__ == \"__main__\":</div><div class=\"line\">     </div><div class=\"line\">    # List to keep track of socket descriptors</div><div class=\"line\">    CONNECTION_LIST = []</div><div class=\"line\">    RECV_BUFFER = 4096 # Advisable to keep it as an exponent of 2</div><div class=\"line\">    PORT = 5000</div><div class=\"line\">     </div><div class=\"line\">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">    # this has no effect, why ?</div><div class=\"line\">    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</div><div class=\"line\">    server_socket.bind((\"0.0.0.0\", PORT))</div><div class=\"line\">    server_socket.listen(10)</div><div class=\"line\"> </div><div class=\"line\">    # Add server socket to the list of readable connections</div><div class=\"line\">    CONNECTION_LIST.append(server_socket)</div><div class=\"line\"> </div><div class=\"line\">    print \"Chat server started on port \" + str(PORT)</div><div class=\"line\"> </div><div class=\"line\">    while 1:</div><div class=\"line\">        # Get the list sockets which are ready to be read through select</div><div class=\"line\">        read_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])</div><div class=\"line\"> </div><div class=\"line\">        for sock in read_sockets:</div><div class=\"line\">            #New connection</div><div class=\"line\">            if sock == server_socket:</div><div class=\"line\">                # Handle the case in which there is a new connection recieved through server_socket</div><div class=\"line\">                sockfd, addr = server_socket.accept()</div><div class=\"line\">                CONNECTION_LIST.append(sockfd)</div><div class=\"line\">                print \"Client (%s, %s) connected\" % addr</div><div class=\"line\">                 </div><div class=\"line\">                broadcast_data(sockfd, \"[%s:%s] entered room\\n\" % addr)</div><div class=\"line\">             </div><div class=\"line\">            #Some incoming message from a client</div><div class=\"line\">            else:</div><div class=\"line\">                # Data recieved from client, process it</div><div class=\"line\">                try:</div><div class=\"line\">                    #In Windows, sometimes when a TCP program closes abruptly,</div><div class=\"line\">                    # a \"Connection reset by peer\" exception will be thrown</div><div class=\"line\">                    data = sock.recv(RECV_BUFFER)</div><div class=\"line\">                    if data:</div><div class=\"line\">                        broadcast_data(sock, \"\\r\" + '&lt;' + str(sock.getpeername()) + '&gt; ' + data)                </div><div class=\"line\">                 </div><div class=\"line\">                except:</div><div class=\"line\">                    broadcast_data(sock, \"Client (%s, %s) is offline\" % addr)</div><div class=\"line\">                    print \"Client (%s, %s) is offline\" % addr</div><div class=\"line\">                    sock.close()</div><div class=\"line\">                    CONNECTION_LIST.remove(sock)</div><div class=\"line\">                    continue</div><div class=\"line\">     </div><div class=\"line\">    server_socket.close()</div></pre></td></tr></table></figure>\n<p>Run the server in a console.<br><code>$ python chat_server.py \nChat server started on port 5000</code></p>\n<h3 id=\"Chat-client\"><a href=\"#Chat-client\" class=\"headerlink\" title=\"Chat client\"></a>Chat client</h3><p>Now lets code the chat client that will connect to the above chat server. The client is based on the telnet program in python. It connects to a remote server, sends messages and receives messages.</p>\n<p>The chat client does the following 2 things :</p>\n<ul>\n<li><ol>\n<li>Listen for incoming messages from the server.</li>\n</ol>\n</li>\n<li><ol>\n<li>Check user input. If the user types in a message then send it to the server.</li>\n</ol>\n</li>\n</ul>\n<p>Now here is something tricky. The client has to actually listen for server message and user input at the same time. To do this, we use the select function. The select function can monitor multiple sockets or file descriptors for some “interesting activity” which is this case is readable. When a message comes from the server on the connected socket, it is readable and when the user types a message and hits enter, the stdin stream is readable.</p>\n<p>So the select function has to monitor 2 streams. First is the socket that is connected to the remote webserver, and second is stdin or terminal input stream. The select function blocks till something happens. So after calling select, it will return only when either the server socket receives a message or the user enters a message. If nothing happens it keeps on waiting.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket_list = [sys.stdin, s]</div><div class=\"line\">         </div><div class=\"line\"># Get the list sockets which are readable</div><div class=\"line\">read_sockets, write_sockets, error_sockets = select.select(socket_list , [], [])</div></pre></td></tr></table></figure>\n<p>We simply create an array of the stdin file descriptor that is available from the sys module, and the server socket s. Then we call the select function passing it the list. The select function returns a list of arrays that are readable, writable or had an error. The readable sockets will be again a list of sockets that is readable.</p>\n<p>So in this case, the read_sockets array will contain either the server socket, or stdin or both. Then the next task is to do relevant processing based on which socket is readable. If the server socket is readable, it means that the server has send a message on that socket and so it should be printed. If stdin is readable, it means that the user typed a message and hit enter key, so that message should be read and send to server as a chat message.</p>\n<p>Here is the python code that implements the above logic using select function</p>\n<pre><code class=\"js\"># telnet program example\nimport socket, select, string, sys\n\ndef prompt() :\n    sys.stdout.write('&lt;You&gt; ')\n    sys.stdout.flush()\n\n#main function\nif __name__ == \"__main__\":\n\n    if(len(sys.argv) &lt; 3) :\n        print 'Usage : python telnet.py hostname port'\n        sys.exit()\n\n    host = sys.argv[1]\n    port = int(sys.argv[2])\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(2)\n\n    # connect to remote host\n    try :\n        s.connect((host, port))\n    except :\n        print 'Unable to connect'\n        sys.exit()\n\n    print 'Connected to remote host. Start sending messages'\n    prompt()\n\n    while 1:\n        socket_list = [sys.stdin, s]\n\n        # Get the list sockets which are readable\n        read_sockets, write_sockets, error_sockets = select.select(socket_list , [], [])\n\n        for sock in read_sockets:\n            #incoming message from remote server\n            if sock == s:\n                data = sock.recv(4096)\n                if not data :\n                    print '\\nDisconnected from chat server'\n                    sys.exit()\n                else :\n                    #print data\n                    sys.stdout.write(data)\n                    prompt()\n\n            #user entered a message\n            else :\n                msg = sys.stdin.readline()\n                s.send(msg)\n                prompt()\n</code></pre>\n<p>Run the client from multiple consoles.<br>``<br>$ python telnet.py localhost 5000<br>Connected to remote host. Start sending messages</p>\n<p><you> hello</you></p>\n<p><you> I am fine<br>&lt;(‘127.0.0.1’, 38378)&gt; ok good</you></p>\n<p><you><br><code>on another console</code></you></p>\n<p><you> [127.0.0.1:39339] entered room<br>&lt;(‘127.0.0.1’, 39339)&gt; hello<br>&lt;(‘127.0.0.1’, 39339)&gt; I am fine</you></p>\n<p><you> ok good<br>``<br>So the messages send by one client are seen on the consoles of other clients. Logic is quite simple. Run it and check it out.</you></p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The above shown chat client is not going to work on windows. It uses the select function to read data from both the socket and the input stream. This works on linux but not on windows.</p>\n<p>The python documentation on select mentions this</p>\n<p><code>File objects on Windows are not acceptable, but sockets are. On Windows, the underlying select() function is provided by the WinSock library, and does not handle file descriptors that don’t originate from WinSock.</code><br>Linux treats sockets and file descriptors in the same manner, therefor the select function is able to read from stdin. On windows the select function will not read anything except sockets created by the winsock socket functions.</p>\n<p>There is another drawback that the above shown chat program suffers. If in the chat client a user is typing a message and while typing a message comes from the server, then the server message shall be printed rightaway and the message that the user was typing would be lost. That is the expected behaviour of this program and there is nothing that can be done to fix this properly.</p>\n<p>Only solution is to use better terminal libraries like ncurses to keep the user input separate from terminal output. Or write a gui program.</p>\n","excerpt":"<h2 id=\"Socket-based-chat-application\"><a href=\"#Socket-based-chat-application\" class=\"headerlink\" title=\"Socket based chat application\"></a>Socket based chat application</h2><p>In our previous article on socket programming in python we learned about the basics of creating a socket server and client in python. In this post we are going to write a very simple chat application in python that is powered by sockets.<br>The chat application we are going to make will be more like a chat room, rather than a peer to peer chat. So this means that multiple users can connect to the chat server and send their messages. Every message is broadcasted to every connected chat user. The construction is as simple as the theory.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>The code consists of 2 python scripts. First is the server and the other is the chat client.<br>","more":"</p>\n<h3 id=\"Chat-server\"><a href=\"#Chat-server\" class=\"headerlink\" title=\"Chat server\"></a>Chat server</h3><p>The chat server does the following things</p>\n<ul>\n<li><ol>\n<li>Accept multiple incoming connections for client.</li>\n</ol>\n</li>\n<li><ol>\n<li>Read incoming messages from each client and broadcast them to all other connected clients.</li>\n</ol>\n</li>\n</ul>\n<p>Here is the code of the chat server. It server opens up port 5000 to listen for incoming connections. The chat client must connect to this same port. You can change the port number if you want.</p>\n<p>The server handles multiple chat clients with select based multiplexing. The select function monitors all the client sockets and the master socket for readable activity. If any of the client socket is readable then it means that one of the chat client has send a message.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Get the list sockets which are ready to be read through select</div><div class=\"line\">read_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])</div></pre></td></tr></table></figure>\n<p>When the select function returns, the read_sockets will be an array consisting of all socket descriptors that are readable. So if the master socket is readable, the server would accept the new connection. If any of the client socket is readable, the server would read the message, and broadcast it back to all clients except the one who send the message. The following function broadcasts the message to all chat clients.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">def broadcast_data (sock, message):</div><div class=\"line\">    #Do not send the message to master socket and the client who has send us the message</div><div class=\"line\">    for socket in CONNECTION_LIST:</div><div class=\"line\">        if socket != server_socket and socket != sock :</div><div class=\"line\">            try :</div><div class=\"line\">                socket.send(message)</div><div class=\"line\">            except :</div><div class=\"line\">                # broken socket connection may be, chat client pressed ctrl+c for example</div><div class=\"line\">                socket.close()</div><div class=\"line\">                CONNECTION_LIST.remove(socket)</div></pre></td></tr></table></figure></p>\n<p>If the broadcast function fails to send message to any of the client, the client is assumed to be disconnected and the connection is closed and the socket is removed from the connection list.</p>\n<p>Rest of the program is quite self explanatory. Here is the full code of the chat client.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Tcp Chat server</div><div class=\"line\"> </div><div class=\"line\">import socket, select</div><div class=\"line\"> </div><div class=\"line\">#Function to broadcast chat messages to all connected clients</div><div class=\"line\">def broadcast_data (sock, message):</div><div class=\"line\">    #Do not send the message to master socket and the client who has send us the message</div><div class=\"line\">    for socket in CONNECTION_LIST:</div><div class=\"line\">        if socket != server_socket and socket != sock :</div><div class=\"line\">            try :</div><div class=\"line\">                socket.send(message)</div><div class=\"line\">            except :</div><div class=\"line\">                # broken socket connection may be, chat client pressed ctrl+c for example</div><div class=\"line\">                socket.close()</div><div class=\"line\">                CONNECTION_LIST.remove(socket)</div><div class=\"line\"> </div><div class=\"line\">if __name__ == \"__main__\":</div><div class=\"line\">     </div><div class=\"line\">    # List to keep track of socket descriptors</div><div class=\"line\">    CONNECTION_LIST = []</div><div class=\"line\">    RECV_BUFFER = 4096 # Advisable to keep it as an exponent of 2</div><div class=\"line\">    PORT = 5000</div><div class=\"line\">     </div><div class=\"line\">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">    # this has no effect, why ?</div><div class=\"line\">    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</div><div class=\"line\">    server_socket.bind((\"0.0.0.0\", PORT))</div><div class=\"line\">    server_socket.listen(10)</div><div class=\"line\"> </div><div class=\"line\">    # Add server socket to the list of readable connections</div><div class=\"line\">    CONNECTION_LIST.append(server_socket)</div><div class=\"line\"> </div><div class=\"line\">    print \"Chat server started on port \" + str(PORT)</div><div class=\"line\"> </div><div class=\"line\">    while 1:</div><div class=\"line\">        # Get the list sockets which are ready to be read through select</div><div class=\"line\">        read_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])</div><div class=\"line\"> </div><div class=\"line\">        for sock in read_sockets:</div><div class=\"line\">            #New connection</div><div class=\"line\">            if sock == server_socket:</div><div class=\"line\">                # Handle the case in which there is a new connection recieved through server_socket</div><div class=\"line\">                sockfd, addr = server_socket.accept()</div><div class=\"line\">                CONNECTION_LIST.append(sockfd)</div><div class=\"line\">                print \"Client (%s, %s) connected\" % addr</div><div class=\"line\">                 </div><div class=\"line\">                broadcast_data(sockfd, \"[%s:%s] entered room\\n\" % addr)</div><div class=\"line\">             </div><div class=\"line\">            #Some incoming message from a client</div><div class=\"line\">            else:</div><div class=\"line\">                # Data recieved from client, process it</div><div class=\"line\">                try:</div><div class=\"line\">                    #In Windows, sometimes when a TCP program closes abruptly,</div><div class=\"line\">                    # a \"Connection reset by peer\" exception will be thrown</div><div class=\"line\">                    data = sock.recv(RECV_BUFFER)</div><div class=\"line\">                    if data:</div><div class=\"line\">                        broadcast_data(sock, \"\\r\" + '&lt;' + str(sock.getpeername()) + '&gt; ' + data)                </div><div class=\"line\">                 </div><div class=\"line\">                except:</div><div class=\"line\">                    broadcast_data(sock, \"Client (%s, %s) is offline\" % addr)</div><div class=\"line\">                    print \"Client (%s, %s) is offline\" % addr</div><div class=\"line\">                    sock.close()</div><div class=\"line\">                    CONNECTION_LIST.remove(sock)</div><div class=\"line\">                    continue</div><div class=\"line\">     </div><div class=\"line\">    server_socket.close()</div></pre></td></tr></table></figure>\n<p>Run the server in a console.<br><code>$ python chat_server.py \nChat server started on port 5000</code></p>\n<h3 id=\"Chat-client\"><a href=\"#Chat-client\" class=\"headerlink\" title=\"Chat client\"></a>Chat client</h3><p>Now lets code the chat client that will connect to the above chat server. The client is based on the telnet program in python. It connects to a remote server, sends messages and receives messages.</p>\n<p>The chat client does the following 2 things :</p>\n<ul>\n<li><ol>\n<li>Listen for incoming messages from the server.</li>\n</ol>\n</li>\n<li><ol>\n<li>Check user input. If the user types in a message then send it to the server.</li>\n</ol>\n</li>\n</ul>\n<p>Now here is something tricky. The client has to actually listen for server message and user input at the same time. To do this, we use the select function. The select function can monitor multiple sockets or file descriptors for some “interesting activity” which is this case is readable. When a message comes from the server on the connected socket, it is readable and when the user types a message and hits enter, the stdin stream is readable.</p>\n<p>So the select function has to monitor 2 streams. First is the socket that is connected to the remote webserver, and second is stdin or terminal input stream. The select function blocks till something happens. So after calling select, it will return only when either the server socket receives a message or the user enters a message. If nothing happens it keeps on waiting.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket_list = [sys.stdin, s]</div><div class=\"line\">         </div><div class=\"line\"># Get the list sockets which are readable</div><div class=\"line\">read_sockets, write_sockets, error_sockets = select.select(socket_list , [], [])</div></pre></td></tr></table></figure>\n<p>We simply create an array of the stdin file descriptor that is available from the sys module, and the server socket s. Then we call the select function passing it the list. The select function returns a list of arrays that are readable, writable or had an error. The readable sockets will be again a list of sockets that is readable.</p>\n<p>So in this case, the read_sockets array will contain either the server socket, or stdin or both. Then the next task is to do relevant processing based on which socket is readable. If the server socket is readable, it means that the server has send a message on that socket and so it should be printed. If stdin is readable, it means that the user typed a message and hit enter key, so that message should be read and send to server as a chat message.</p>\n<p>Here is the python code that implements the above logic using select function</p>\n<pre><code class=\"js\"># telnet program example\nimport socket, select, string, sys\n\ndef prompt() :\n    sys.stdout.write('&lt;You&gt; ')\n    sys.stdout.flush()\n\n#main function\nif __name__ == \"__main__\":\n\n    if(len(sys.argv) &lt; 3) :\n        print 'Usage : python telnet.py hostname port'\n        sys.exit()\n\n    host = sys.argv[1]\n    port = int(sys.argv[2])\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(2)\n\n    # connect to remote host\n    try :\n        s.connect((host, port))\n    except :\n        print 'Unable to connect'\n        sys.exit()\n\n    print 'Connected to remote host. Start sending messages'\n    prompt()\n\n    while 1:\n        socket_list = [sys.stdin, s]\n\n        # Get the list sockets which are readable\n        read_sockets, write_sockets, error_sockets = select.select(socket_list , [], [])\n\n        for sock in read_sockets:\n            #incoming message from remote server\n            if sock == s:\n                data = sock.recv(4096)\n                if not data :\n                    print '\\nDisconnected from chat server'\n                    sys.exit()\n                else :\n                    #print data\n                    sys.stdout.write(data)\n                    prompt()\n\n            #user entered a message\n            else :\n                msg = sys.stdin.readline()\n                s.send(msg)\n                prompt()\n</code></pre>\n<p>Run the client from multiple consoles.<br>``<br>$ python telnet.py localhost 5000<br>Connected to remote host. Start sending messages</p>\n<p><You> hello</p>\n<p><You> I am fine<br>&lt;(‘127.0.0.1’, 38378)&gt; ok good</p>\n<p><You><br><code>on another console</code></p>\n<p><You> [127.0.0.1:39339] entered room<br>&lt;(‘127.0.0.1’, 39339)&gt; hello<br>&lt;(‘127.0.0.1’, 39339)&gt; I am fine</p>\n<p><You> ok good<br>``<br>So the messages send by one client are seen on the consoles of other clients. Logic is quite simple. Run it and check it out.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p>The above shown chat client is not going to work on windows. It uses the select function to read data from both the socket and the input stream. This works on linux but not on windows.</p>\n<p>The python documentation on select mentions this</p>\n<p><code>File objects on Windows are not acceptable, but sockets are. On Windows, the underlying select() function is provided by the WinSock library, and does not handle file descriptors that don’t originate from WinSock.</code><br>Linux treats sockets and file descriptors in the same manner, therefor the select function is able to read from stdin. On windows the select function will not read anything except sockets created by the winsock socket functions.</p>\n<p>There is another drawback that the above shown chat program suffers. If in the chat client a user is typing a message and while typing a message comes from the server, then the server message shall be printed rightaway and the message that the user was typing would be lost. That is the expected behaviour of this program and there is nothing that can be done to fix this properly.</p>\n<p>Only solution is to use better terminal libraries like ncurses to keep the user input separate from terminal output. Or write a gui program.</p>"},{"title":"perl语言入门学习笔记","date":"2014-12-25T01:53:29.000Z","_content":" perl内部并不存在整数，在perl内部总是按照双精度浮点数的要求来保存数字并进行运算的。\n### 如果要使perl支持unicode字符，需要添加 use utf8;\n\\l 将下一个字母转换为小写\n\\L 将它后面的所有字母都换为小写，直到\\E为止\n\\u 将下一个字母转换为大写<!-- more -->\n\\U 将它后面的所有字母都换为大写，直到\\E为止\n\\Q 相当于把它到\\E之间的非单词字符加上反斜杠\n\\E 结束\\L、\\U、\\Q开始的作用范围\n### per的告警信息：\n```js\n\tuse warnings;\n```\n或者使用 perl -w运行脚本\n或者加上 `#!/usr/bin/perl -w`\n如果看不懂告警，就是用\n```js\nuse diagnostics;\n```\n### 打印更详细的信息\n```js\n$#aaa表示aaa数组的最后一个元素的索引值\n```\n关于perl中布尔值的判断\n* 1、如果是数字，0为假；所有其他的为真\n* 2、如果是字符串，空字符串为假，所有其他的字符串为真\n* 3、如果既不是数字也不是字符串，那就先换成数字或者字符串再进行判断。\n### 使用defined函数来判断变量是否定义\n#### 数组定义：\n```js\nmy @p1=(‘aaa’,’bbb’,’ccc’);\nmy @p2=(1..100);\nmy @p3=qw(aaa bbb ccc);\nmy @p4=qw! aaa bbb ccc !;\n$end=$#p1;\n$number=$#p1+1;\n$last=$p1[$#p1];\n$last=$p1[-1];\n```\npop取出数组中的最后的一个元素并将其作为返回值返回。\n```js\n$last=pop(@p1);\n```\npush添加元素到数组的最后\n```js\npush(@p1,’jaj’);\npush @p1,’aaaa’;\npush @p1,@p2;\n```\nshift取出数字第一个元素并将其作为返回值返回\n```js\n$first=shift(@p1);\n```\nunshift添加元素到数组的最左边\n```js\nunshift(@p1,’jaj’);\nunshift @p1,@p2;\n```\nsplice可以实现从中间操作数组；\nforeach 来循环遍历数组中的值\nreverse反转数组\nsort 对数组进行排序\nsort(@p1) 正向排序\nreverse sort(@p1) 逆向排序\nchomp(@p1);\nchomp(@line =);\n可以使用state操作符来声明持久性私有变量\nstate $sum=0;\nstate @numbers;\n打印数组：\nprint @array\nprint “@array”\n@ARGV是存放所有参数的数组\n<>砖石操作符，把输入参数当作文件处理\n文件操作符（文件句柄）\n```js\nopen CONFIG, ‘test’;\nopen CONFIG, ‘<test’;\nopen CONFIG, ‘>test’;\nopen CONFIG, ‘>>test’;\n```\n关闭文件句柄：\nclose CONFIG;\n读取或者写入的时候指定文件的字符编码\nopen CONFIG, ‘<:encoding(UTF-8)’, ‘test’;\nopen CONFIG, ‘>>:encoding(UTF-8)’, ‘test’;\n打印perl能处理的字符编码清单\n```js\nperl -MEncode -le “print for Encode->encodings(‘:all’)”\n```\n判断文件句柄是否成功的代码：\n```js\nmy $success=open CONFIG, ‘>>’, test’;\nif( !$success ){ print “create file faild”;\n}\nif( ! open CONFIG, ‘>>’, ‘test’ ){\ndie “Can’t create config file: $!”;\n}\nif( @ARGV<2 ){\ndie “Not enough arguments\\n”;\n}\n```\n自动检查致命错误\nuse autodie;\n可以将文件句柄设置成变量，这样文件句柄可以作为子程序的参数传递，或者放在数组和hash中排序，或者严格控制其作用域。\n打印往文件句柄中写入数据的时候不需要加入逗号！\n```js\nhash\n申明hash\nmy %test=(‘foo’=>35,’bar’=>39,’carl’=>34,’zhang’=>89);\nmy %test=(‘foo’,35,’bar’,39,’carl’,34,’zhang’,89);\n访问哈希元素\n$hash{$key};\n哈希元素赋值\n$hash{‘test’}=’carlzhang’;\n访问整个hash\nmy @any_array=%array;\nprint “@any_array\\n”;\nhash转换\nmy %test_hash=reverse %hash;\nhash函数\nkeys函数能返回hash的所有键列表\nvalues函数能返回hash所有的值列表\nmy %test=(‘foo’=>35,’bar’=>39,’carl’=>34,’zhang’=>89);\nmy @test_key=keys%test;\nmy @test_value=values%test;\nprint “test_key is: @test_key\\n”;\nprint “test_value is: @test_value\\n”;\n使用each函数遍历hash\nmy %test=(‘foo’=>35,’bar’=>39,’carl’=>34,’zhang’=>89);\nwhile( my($test_key,$test_value)=each %test){\nprint “$test_key=>$test_value\\n”;\n}\nmy %test=(‘foo’=>35,’bar’=>39,’carl’=>34,’zhang’=>89);\nforeach my $test_key (sort keys %test){\nmy $test_value=$test{$test_key};\nprint “$test_key=>$test_value\\n”;\n}\n判断键值是否存在：\nif ( exists $test{‘foo’}){\nprint “key fool is in test hash\\n”;\n}\n删除hash中的某个元素\ndelete $test{‘foo’};\n%ENV环境变量\nmy @test=%ENV;\nforeach $test_key (keys %ENV){\nprint “$test_key=>$ENV{$test_key}\\n”;\n}\n```\n模式匹配：\nm/string/;\nm%string%;\n/string/;\n使用/i忽略带小写\n/string/i\n用/s匹配任意字符\n/test.aaa/s 会匹配test和aaa之间的所有内容，包括换行符\n用/x加入空白符，有了/x，perl会忽略空格和正则表达式中的perl风格的注释。\n\\A表示字符串开头\n\\z表示要匹配的字符串绝对末尾\n\\b匹配单词边界\n\\B不匹配单词边界\n捕获\n使用?:来指定不捕获小括号内的东东\n使用?来命名捕获的内容，使用$+{LABEL}来提取捕获的内容\n贪婪匹配 ? +? {1,}? {4,20}? ??\n$^I 读取文件后对文件进行备份\nperl模块\nperldoc CGI 查看模块的用法\ncpan -a 列出安装的模块\n模块的安装：\nperl Makefile.PL\nmake\nmake install\n可以在perl Makefile.PL后面通过`INSTALL_BASE`指定安装的路径\nFile::Basename和File::Spec的使用\n```js\nuse File::Basename;\nuse File::Spec;\nmy $name=”/usr/local/bin/perl”;\nmy $filename=basename $name;\nmy $dirname=dirname $name;\nmy $new_name=File::Spec->catfile($dirname,$filename);\nprint “filename is $filename\\n”;\nprint “dirname is $dirname\\n”;\nprint “newname is $new_name\\n”;\n```\n文件操作\n文件测试操作符\n```js\n-r 文件或者目录对当前用户或组来说是可读的\n-w 文件或者目录对当前用户或组来说是可写的\n-x 文件或者目录对当前用户或组来说是可执行的\n-o 文件或目录由当前用户拥有\n-R 文件或者目录对实际的用户或者组是可读的\n-W 文件或者目录对实际的用户或者组是可写的\n-X 文件或者目录对实际的用户或者组是可执行的\n-O 文件或者目录由实际的用户拥有\n-e 文件或者目录是存在的\n-z 文件存在且没有内容（对目录来说永远为假）\n-s 文件或者目录存在而且有内容（返回值是以字节为单位的文件大小）\n-f 是普通文件\n-d 是目录\n-l 是符号链接\n-S 是socket类型的文件\n-p 是命名管道，也就是先入先出(fifo)队列\n-b 是块设备文件（比如某个可挂载的磁盘）\n-c 是字符设备文件（比如某个I/O设备）\n-u 文件或者目录设置了setuid位\n-g 文件或者目录设置了setgid位\n-k 文件或者目录设置了sticky位\n-t 文件句柄是TTY设备\n-T 看起来像文本文件\n-B 看起来像二进制文件\n-M 最后一次被修改后至今的天数\n-A 最后一次被访问后至今的天数\n-C 最后一次文件节点编号(inode)被变更后至今的天数\n```\n测试统一文件的多项属性\n```js\nif (-r $file and -w $file){\n…..\n}\n```\n可以改写成如下语句，以提高性能\n```js\nif (-r $file and -w ){\n…..\n}\n```\n符号表示虚拟文件句柄，它会告诉perl用上次查询过的文件来做当前测试。\n```js\nstat和lstat函数\nstat函数返回一个有13个元素组成的列表。\ndev 0 文件所在的设备编号\nino 1 文件的inode标号\nmode 2 文件模式（权限、类型）\nnlink 3 文件或者目录的连接数\nuid 4 文件的用户ID\ngid 5 文件的组ID\nrdev 6 设备识别码（只用于特殊文件）\nsize 7 文件总的自己数\natime 8 文件最后访问时间\nmtime 9 文件最后更改时间\nctime 10 inode更改的时间\nblksize 11 文件系统I/O首选块的大小\nblocks 12 实际分配的文件块数\nlocaltime函数\n($sec,$min,$hour,$mday,$mon,$year_off,$wday,$yday,$isdat) = localtime;\n$sec 秒，0 ~ 59\n$min 分，0 ~ 59\n$hour 时，0 ~ 23\n$mday 月份中的日期， 1 ~ 2 8、2 9、3 0或3 1\n$mon 年份中的月份， 0 ~ 11（这里请特别要小心）\n$year_off 1900年以来的年份。将1900加上这个数字，得出正确的4位数年份\n$wday 星期几，0 ~ 6\n$yday 一年中的第几天，0 ~ 364或365\n$isdst 如果夏令时有效，则为真\nperl目录操作\nchdir改变工作目录\nchdir ‘/etc’ or die “can’t chdir to /etc: $!\\n”;\n```\n在程序内部使用通配符匹配文件\n```js\nmy @files=glob ‘. ‘; #匹配多个模式需要用空格隔开，也可以采用my @files=<*>;的方式\nprint “@files\\n”;\nopendir 打开目录\nreaddir 读取目录下的文件名\nclosedir 关闭打卡的目录句柄\n测试代码：\nuse File::Spec::Functions;\nmy $dir=’/etc’;\nopendir DIR,$dir or die “can’t open /etc directory: $!\\n”;\nforeach my $file (readdir DIR){\nif ($file=~/^./){\nnext;\n}\n$file=catfile($dir,$file);\nprint “we found $file in /etc directory\\n”;\n}\nclosedir DIR;\nunlink删除文件，返回成功删除文件的数目，unlink不能用来删除目录\nrename重命名文件\n测试代码：\nfor my $file (glob ‘*.old’){\nmy $new_file=$file;\n$new_file=~s/old/new/;\nif (-z $new_file){\nprint “$new_file is exists ,please check it out\\n”;\n}else{\nrename $file,$new_file or warn “rename $file faild,please check it out\\n”;\nprint “rename $file success ,don’t worry\\n”;\n}\n}\n```\n创建和删除目录\n```js\nmkdir 创建目录\nmy $dir=’aaa’;\nmy $permissions=”0755”;\nmkdir ‘aaa’,oct($permissions) or die “can’t create directory aaa: $!\\n”;\nrmdir删除目录，每次只能删除一个目录，而且删除时目录必须为空，不然会导致失败!\nchmod修改文件或者目录权限\nchmod 0755,’test’;\nchown修改文件或者目录的属主或者属组,返回受影响的文件数量\n测试代码:\nmy $user=52;\nmy $group=52;\nchown $user,$group,’bbb’;\ndefined(my $user1=getpwnam ‘puppet’) or die “bad user: $!\\n”;\ndefined(my $group1=getpwnam ‘puppet’) or die ‘bad group: $!\\n’;\nchown $user1,$group1,’bbb.new’;\nutime修改文件的时间戳(最近的更改和访问时间)\n测试代码：\nmy $now=time;\nmy $ago=$now-246060;\nutime $now,$ago,’bbb’;\n字符串和排序\n用index查找子字符串\nmy $string='hah aaa bbbcc aa ddd';\nmy $part=index($string,'aa');\nprint \"$part\\n\";\n```\n排序\n按照数字排序<=>;\n按照字符排序cmp;\n```js\nmy @some_numbers=qw{1 10 23 100 34 45};\nmy @some_chars=qw{aa cc bb dd dc bc};\nsub by_number{\n$a<=>$b;\n}\nsub by_char{\n$a cmp $b;\n}\nmy @test=sort by_number @some_numbers;\nmy @test2=sort by_char @some_chars;\nprint “@test\\n”;\nprint “@test2\\n”;\nsub sort_test{\nsubstr($test1{$a},2,6) <=> substr($test1{$b},2,6)\nor substr($test1{$a},0,1) cmp substr($test1{$b},0,1)\n}\n```\n执行外部命令\nIPC::System::Simple\nsystem systemx\ncapture capturex\n错误扑捉：\n```js\neval\nmy $aaa1=$ARGV[0];\nmy $aaa2=$ARGV[1];\nmy $test=eval{$aaa1/$aaa2} || ‘aaa’;\nprint “I couldn’t divide by \\$aaa2: $@” if $@;\nprint “$test”;\n```\n有4中类型的错误eval捕捉不到：\n* 1、代码语法错误\n* 2、perl解析器本省的崩溃错误\n* 3、告警类错误\n* 4、每次调用exit的时候\n","source":"_posts/perl-lan.md","raw":"title: perl语言入门学习笔记\ndate: 2014-12-25 09:53:29\ncategories: 技术\ntags: perl\n---\n perl内部并不存在整数，在perl内部总是按照双精度浮点数的要求来保存数字并进行运算的。\n### 如果要使perl支持unicode字符，需要添加 use utf8;\n\\l 将下一个字母转换为小写\n\\L 将它后面的所有字母都换为小写，直到\\E为止\n\\u 将下一个字母转换为大写<!-- more -->\n\\U 将它后面的所有字母都换为大写，直到\\E为止\n\\Q 相当于把它到\\E之间的非单词字符加上反斜杠\n\\E 结束\\L、\\U、\\Q开始的作用范围\n### per的告警信息：\n```js\n\tuse warnings;\n```\n或者使用 perl -w运行脚本\n或者加上 `#!/usr/bin/perl -w`\n如果看不懂告警，就是用\n```js\nuse diagnostics;\n```\n### 打印更详细的信息\n```js\n$#aaa表示aaa数组的最后一个元素的索引值\n```\n关于perl中布尔值的判断\n* 1、如果是数字，0为假；所有其他的为真\n* 2、如果是字符串，空字符串为假，所有其他的字符串为真\n* 3、如果既不是数字也不是字符串，那就先换成数字或者字符串再进行判断。\n### 使用defined函数来判断变量是否定义\n#### 数组定义：\n```js\nmy @p1=(‘aaa’,’bbb’,’ccc’);\nmy @p2=(1..100);\nmy @p3=qw(aaa bbb ccc);\nmy @p4=qw! aaa bbb ccc !;\n$end=$#p1;\n$number=$#p1+1;\n$last=$p1[$#p1];\n$last=$p1[-1];\n```\npop取出数组中的最后的一个元素并将其作为返回值返回。\n```js\n$last=pop(@p1);\n```\npush添加元素到数组的最后\n```js\npush(@p1,’jaj’);\npush @p1,’aaaa’;\npush @p1,@p2;\n```\nshift取出数字第一个元素并将其作为返回值返回\n```js\n$first=shift(@p1);\n```\nunshift添加元素到数组的最左边\n```js\nunshift(@p1,’jaj’);\nunshift @p1,@p2;\n```\nsplice可以实现从中间操作数组；\nforeach 来循环遍历数组中的值\nreverse反转数组\nsort 对数组进行排序\nsort(@p1) 正向排序\nreverse sort(@p1) 逆向排序\nchomp(@p1);\nchomp(@line =);\n可以使用state操作符来声明持久性私有变量\nstate $sum=0;\nstate @numbers;\n打印数组：\nprint @array\nprint “@array”\n@ARGV是存放所有参数的数组\n<>砖石操作符，把输入参数当作文件处理\n文件操作符（文件句柄）\n```js\nopen CONFIG, ‘test’;\nopen CONFIG, ‘<test’;\nopen CONFIG, ‘>test’;\nopen CONFIG, ‘>>test’;\n```\n关闭文件句柄：\nclose CONFIG;\n读取或者写入的时候指定文件的字符编码\nopen CONFIG, ‘<:encoding(UTF-8)’, ‘test’;\nopen CONFIG, ‘>>:encoding(UTF-8)’, ‘test’;\n打印perl能处理的字符编码清单\n```js\nperl -MEncode -le “print for Encode->encodings(‘:all’)”\n```\n判断文件句柄是否成功的代码：\n```js\nmy $success=open CONFIG, ‘>>’, test’;\nif( !$success ){ print “create file faild”;\n}\nif( ! open CONFIG, ‘>>’, ‘test’ ){\ndie “Can’t create config file: $!”;\n}\nif( @ARGV<2 ){\ndie “Not enough arguments\\n”;\n}\n```\n自动检查致命错误\nuse autodie;\n可以将文件句柄设置成变量，这样文件句柄可以作为子程序的参数传递，或者放在数组和hash中排序，或者严格控制其作用域。\n打印往文件句柄中写入数据的时候不需要加入逗号！\n```js\nhash\n申明hash\nmy %test=(‘foo’=>35,’bar’=>39,’carl’=>34,’zhang’=>89);\nmy %test=(‘foo’,35,’bar’,39,’carl’,34,’zhang’,89);\n访问哈希元素\n$hash{$key};\n哈希元素赋值\n$hash{‘test’}=’carlzhang’;\n访问整个hash\nmy @any_array=%array;\nprint “@any_array\\n”;\nhash转换\nmy %test_hash=reverse %hash;\nhash函数\nkeys函数能返回hash的所有键列表\nvalues函数能返回hash所有的值列表\nmy %test=(‘foo’=>35,’bar’=>39,’carl’=>34,’zhang’=>89);\nmy @test_key=keys%test;\nmy @test_value=values%test;\nprint “test_key is: @test_key\\n”;\nprint “test_value is: @test_value\\n”;\n使用each函数遍历hash\nmy %test=(‘foo’=>35,’bar’=>39,’carl’=>34,’zhang’=>89);\nwhile( my($test_key,$test_value)=each %test){\nprint “$test_key=>$test_value\\n”;\n}\nmy %test=(‘foo’=>35,’bar’=>39,’carl’=>34,’zhang’=>89);\nforeach my $test_key (sort keys %test){\nmy $test_value=$test{$test_key};\nprint “$test_key=>$test_value\\n”;\n}\n判断键值是否存在：\nif ( exists $test{‘foo’}){\nprint “key fool is in test hash\\n”;\n}\n删除hash中的某个元素\ndelete $test{‘foo’};\n%ENV环境变量\nmy @test=%ENV;\nforeach $test_key (keys %ENV){\nprint “$test_key=>$ENV{$test_key}\\n”;\n}\n```\n模式匹配：\nm/string/;\nm%string%;\n/string/;\n使用/i忽略带小写\n/string/i\n用/s匹配任意字符\n/test.aaa/s 会匹配test和aaa之间的所有内容，包括换行符\n用/x加入空白符，有了/x，perl会忽略空格和正则表达式中的perl风格的注释。\n\\A表示字符串开头\n\\z表示要匹配的字符串绝对末尾\n\\b匹配单词边界\n\\B不匹配单词边界\n捕获\n使用?:来指定不捕获小括号内的东东\n使用?来命名捕获的内容，使用$+{LABEL}来提取捕获的内容\n贪婪匹配 ? +? {1,}? {4,20}? ??\n$^I 读取文件后对文件进行备份\nperl模块\nperldoc CGI 查看模块的用法\ncpan -a 列出安装的模块\n模块的安装：\nperl Makefile.PL\nmake\nmake install\n可以在perl Makefile.PL后面通过`INSTALL_BASE`指定安装的路径\nFile::Basename和File::Spec的使用\n```js\nuse File::Basename;\nuse File::Spec;\nmy $name=”/usr/local/bin/perl”;\nmy $filename=basename $name;\nmy $dirname=dirname $name;\nmy $new_name=File::Spec->catfile($dirname,$filename);\nprint “filename is $filename\\n”;\nprint “dirname is $dirname\\n”;\nprint “newname is $new_name\\n”;\n```\n文件操作\n文件测试操作符\n```js\n-r 文件或者目录对当前用户或组来说是可读的\n-w 文件或者目录对当前用户或组来说是可写的\n-x 文件或者目录对当前用户或组来说是可执行的\n-o 文件或目录由当前用户拥有\n-R 文件或者目录对实际的用户或者组是可读的\n-W 文件或者目录对实际的用户或者组是可写的\n-X 文件或者目录对实际的用户或者组是可执行的\n-O 文件或者目录由实际的用户拥有\n-e 文件或者目录是存在的\n-z 文件存在且没有内容（对目录来说永远为假）\n-s 文件或者目录存在而且有内容（返回值是以字节为单位的文件大小）\n-f 是普通文件\n-d 是目录\n-l 是符号链接\n-S 是socket类型的文件\n-p 是命名管道，也就是先入先出(fifo)队列\n-b 是块设备文件（比如某个可挂载的磁盘）\n-c 是字符设备文件（比如某个I/O设备）\n-u 文件或者目录设置了setuid位\n-g 文件或者目录设置了setgid位\n-k 文件或者目录设置了sticky位\n-t 文件句柄是TTY设备\n-T 看起来像文本文件\n-B 看起来像二进制文件\n-M 最后一次被修改后至今的天数\n-A 最后一次被访问后至今的天数\n-C 最后一次文件节点编号(inode)被变更后至今的天数\n```\n测试统一文件的多项属性\n```js\nif (-r $file and -w $file){\n…..\n}\n```\n可以改写成如下语句，以提高性能\n```js\nif (-r $file and -w ){\n…..\n}\n```\n符号表示虚拟文件句柄，它会告诉perl用上次查询过的文件来做当前测试。\n```js\nstat和lstat函数\nstat函数返回一个有13个元素组成的列表。\ndev 0 文件所在的设备编号\nino 1 文件的inode标号\nmode 2 文件模式（权限、类型）\nnlink 3 文件或者目录的连接数\nuid 4 文件的用户ID\ngid 5 文件的组ID\nrdev 6 设备识别码（只用于特殊文件）\nsize 7 文件总的自己数\natime 8 文件最后访问时间\nmtime 9 文件最后更改时间\nctime 10 inode更改的时间\nblksize 11 文件系统I/O首选块的大小\nblocks 12 实际分配的文件块数\nlocaltime函数\n($sec,$min,$hour,$mday,$mon,$year_off,$wday,$yday,$isdat) = localtime;\n$sec 秒，0 ~ 59\n$min 分，0 ~ 59\n$hour 时，0 ~ 23\n$mday 月份中的日期， 1 ~ 2 8、2 9、3 0或3 1\n$mon 年份中的月份， 0 ~ 11（这里请特别要小心）\n$year_off 1900年以来的年份。将1900加上这个数字，得出正确的4位数年份\n$wday 星期几，0 ~ 6\n$yday 一年中的第几天，0 ~ 364或365\n$isdst 如果夏令时有效，则为真\nperl目录操作\nchdir改变工作目录\nchdir ‘/etc’ or die “can’t chdir to /etc: $!\\n”;\n```\n在程序内部使用通配符匹配文件\n```js\nmy @files=glob ‘. ‘; #匹配多个模式需要用空格隔开，也可以采用my @files=<*>;的方式\nprint “@files\\n”;\nopendir 打开目录\nreaddir 读取目录下的文件名\nclosedir 关闭打卡的目录句柄\n测试代码：\nuse File::Spec::Functions;\nmy $dir=’/etc’;\nopendir DIR,$dir or die “can’t open /etc directory: $!\\n”;\nforeach my $file (readdir DIR){\nif ($file=~/^./){\nnext;\n}\n$file=catfile($dir,$file);\nprint “we found $file in /etc directory\\n”;\n}\nclosedir DIR;\nunlink删除文件，返回成功删除文件的数目，unlink不能用来删除目录\nrename重命名文件\n测试代码：\nfor my $file (glob ‘*.old’){\nmy $new_file=$file;\n$new_file=~s/old/new/;\nif (-z $new_file){\nprint “$new_file is exists ,please check it out\\n”;\n}else{\nrename $file,$new_file or warn “rename $file faild,please check it out\\n”;\nprint “rename $file success ,don’t worry\\n”;\n}\n}\n```\n创建和删除目录\n```js\nmkdir 创建目录\nmy $dir=’aaa’;\nmy $permissions=”0755”;\nmkdir ‘aaa’,oct($permissions) or die “can’t create directory aaa: $!\\n”;\nrmdir删除目录，每次只能删除一个目录，而且删除时目录必须为空，不然会导致失败!\nchmod修改文件或者目录权限\nchmod 0755,’test’;\nchown修改文件或者目录的属主或者属组,返回受影响的文件数量\n测试代码:\nmy $user=52;\nmy $group=52;\nchown $user,$group,’bbb’;\ndefined(my $user1=getpwnam ‘puppet’) or die “bad user: $!\\n”;\ndefined(my $group1=getpwnam ‘puppet’) or die ‘bad group: $!\\n’;\nchown $user1,$group1,’bbb.new’;\nutime修改文件的时间戳(最近的更改和访问时间)\n测试代码：\nmy $now=time;\nmy $ago=$now-246060;\nutime $now,$ago,’bbb’;\n字符串和排序\n用index查找子字符串\nmy $string='hah aaa bbbcc aa ddd';\nmy $part=index($string,'aa');\nprint \"$part\\n\";\n```\n排序\n按照数字排序<=>;\n按照字符排序cmp;\n```js\nmy @some_numbers=qw{1 10 23 100 34 45};\nmy @some_chars=qw{aa cc bb dd dc bc};\nsub by_number{\n$a<=>$b;\n}\nsub by_char{\n$a cmp $b;\n}\nmy @test=sort by_number @some_numbers;\nmy @test2=sort by_char @some_chars;\nprint “@test\\n”;\nprint “@test2\\n”;\nsub sort_test{\nsubstr($test1{$a},2,6) <=> substr($test1{$b},2,6)\nor substr($test1{$a},0,1) cmp substr($test1{$b},0,1)\n}\n```\n执行外部命令\nIPC::System::Simple\nsystem systemx\ncapture capturex\n错误扑捉：\n```js\neval\nmy $aaa1=$ARGV[0];\nmy $aaa2=$ARGV[1];\nmy $test=eval{$aaa1/$aaa2} || ‘aaa’;\nprint “I couldn’t divide by \\$aaa2: $@” if $@;\nprint “$test”;\n```\n有4中类型的错误eval捕捉不到：\n* 1、代码语法错误\n* 2、perl解析器本省的崩溃错误\n* 3、告警类错误\n* 4、每次调用exit的时候\n","slug":"perl-lan","published":1,"updated":"2016-12-13T04:02:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3k00172u6b6jts6c8g","content":"<p> perl内部并不存在整数，在perl内部总是按照双精度浮点数的要求来保存数字并进行运算的。</p>\n<h3 id=\"如果要使perl支持unicode字符，需要添加-use-utf8\"><a href=\"#如果要使perl支持unicode字符，需要添加-use-utf8\" class=\"headerlink\" title=\"如果要使perl支持unicode字符，需要添加 use utf8;\"></a>如果要使perl支持unicode字符，需要添加 use utf8;</h3><p>\\l 将下一个字母转换为小写<br>\\L 将它后面的所有字母都换为小写，直到\\E为止<br>\\u 将下一个字母转换为大写<a id=\"more\"></a><br>\\U 将它后面的所有字母都换为大写，直到\\E为止<br>\\Q 相当于把它到\\E之间的非单词字符加上反斜杠<br>\\E 结束\\L、\\U、\\Q开始的作用范围</p>\n<h3 id=\"per的告警信息：\"><a href=\"#per的告警信息：\" class=\"headerlink\" title=\"per的告警信息：\"></a>per的告警信息：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use warnings;</div></pre></td></tr></table></figure>\n<p>或者使用 perl -w运行脚本<br>或者加上 <code>#!/usr/bin/perl -w</code><br>如果看不懂告警，就是用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use diagnostics;</div></pre></td></tr></table></figure></p>\n<h3 id=\"打印更详细的信息\"><a href=\"#打印更详细的信息\" class=\"headerlink\" title=\"打印更详细的信息\"></a>打印更详细的信息</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$#aaa表示aaa数组的最后一个元素的索引值</div></pre></td></tr></table></figure>\n<p>关于perl中布尔值的判断</p>\n<ul>\n<li>1、如果是数字，0为假；所有其他的为真</li>\n<li>2、如果是字符串，空字符串为假，所有其他的字符串为真</li>\n<li>3、如果既不是数字也不是字符串，那就先换成数字或者字符串再进行判断。<h3 id=\"使用defined函数来判断变量是否定义\"><a href=\"#使用defined函数来判断变量是否定义\" class=\"headerlink\" title=\"使用defined函数来判断变量是否定义\"></a>使用defined函数来判断变量是否定义</h3><h4 id=\"数组定义：\"><a href=\"#数组定义：\" class=\"headerlink\" title=\"数组定义：\"></a>数组定义：</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">my @p1=(‘aaa’,’bbb’,’ccc’);</div><div class=\"line\">my @p2=(1..100);</div><div class=\"line\">my @p3=qw(aaa bbb ccc);</div><div class=\"line\">my @p4=qw! aaa bbb ccc !;</div><div class=\"line\">$end=$#p1;</div><div class=\"line\">$number=$#p1+1;</div><div class=\"line\">$last=$p1[$#p1];</div><div class=\"line\">$last=$p1[-1];</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>pop取出数组中的最后的一个元素并将其作为返回值返回。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$last=pop(@p1);</div></pre></td></tr></table></figure></p>\n<p>push添加元素到数组的最后<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">push(@p1,’jaj’);</div><div class=\"line\">push @p1,’aaaa’;</div><div class=\"line\">push @p1,@p2;</div></pre></td></tr></table></figure></p>\n<p>shift取出数字第一个元素并将其作为返回值返回<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$first=shift(@p1);</div></pre></td></tr></table></figure></p>\n<p>unshift添加元素到数组的最左边<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">unshift(@p1,’jaj’);</div><div class=\"line\">unshift @p1,@p2;</div></pre></td></tr></table></figure></p>\n<p>splice可以实现从中间操作数组；<br>foreach 来循环遍历数组中的值<br>reverse反转数组<br>sort 对数组进行排序<br>sort(@p1) 正向排序<br>reverse sort(@p1) 逆向排序<br>chomp(@p1);<br>chomp(@line =);<br>可以使用state操作符来声明持久性私有变量<br>state $sum=0;<br>state @numbers;<br>打印数组：<br>print @array<br>print “@array”<br>@ARGV是存放所有参数的数组<br>&lt;&gt;砖石操作符，把输入参数当作文件处理<br>文件操作符（文件句柄）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">open CONFIG, ‘test’;</div><div class=\"line\">open CONFIG, ‘&lt;test’;</div><div class=\"line\">open CONFIG, ‘&gt;test’;</div><div class=\"line\">open CONFIG, ‘&gt;&gt;test’;</div></pre></td></tr></table></figure></p>\n<p>关闭文件句柄：<br>close CONFIG;<br>读取或者写入的时候指定文件的字符编码<br>open CONFIG, ‘&lt;:encoding(UTF-8)’, ‘test’;<br>open CONFIG, ‘&gt;&gt;:encoding(UTF-8)’, ‘test’;<br>打印perl能处理的字符编码清单<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">perl -MEncode -le “print <span class=\"keyword\">for</span> Encode-&gt;encodings(‘:all’)”</div></pre></td></tr></table></figure></p>\n<p>判断文件句柄是否成功的代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">my $success=open CONFIG, ‘&gt;&gt;’, test’;</div><div class=\"line\"><span class=\"keyword\">if</span>( !$success )&#123; print “create file faild”;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>( ! open CONFIG, ‘&gt;&gt;’, ‘test’ )&#123;</div><div class=\"line\">die “Can’t create config file: $!”;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>( @ARGV&lt;<span class=\"number\">2</span> )&#123;</div><div class=\"line\">die “Not enough <span class=\"built_in\">arguments</span>\\n”;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>自动检查致命错误<br>use autodie;<br>可以将文件句柄设置成变量，这样文件句柄可以作为子程序的参数传递，或者放在数组和hash中排序，或者严格控制其作用域。<br>打印往文件句柄中写入数据的时候不需要加入逗号！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash</div><div class=\"line\">申明hash</div><div class=\"line\">my %test=(‘foo’=&gt;<span class=\"number\">35</span>,’bar’=&gt;<span class=\"number\">39</span>,’carl’=&gt;<span class=\"number\">34</span>,’zhang’=&gt;<span class=\"number\">89</span>);</div><div class=\"line\">my %test=(‘foo’,<span class=\"number\">35</span>,’bar’,<span class=\"number\">39</span>,’carl’,<span class=\"number\">34</span>,’zhang’,<span class=\"number\">89</span>);</div><div class=\"line\">访问哈希元素</div><div class=\"line\">$hash&#123;$key&#125;;</div><div class=\"line\">哈希元素赋值</div><div class=\"line\">$hash&#123;‘test’&#125;=’carlzhang’;</div><div class=\"line\">访问整个hash</div><div class=\"line\">my @any_array=%array;</div><div class=\"line\">print “@any_array\\n”;</div><div class=\"line\">hash转换</div><div class=\"line\">my %test_hash=reverse %hash;</div><div class=\"line\">hash函数</div><div class=\"line\">keys函数能返回hash的所有键列表</div><div class=\"line\">values函数能返回hash所有的值列表</div><div class=\"line\">my %test=(‘foo’=&gt;<span class=\"number\">35</span>,’bar’=&gt;<span class=\"number\">39</span>,’carl’=&gt;<span class=\"number\">34</span>,’zhang’=&gt;<span class=\"number\">89</span>);</div><div class=\"line\">my @test_key=keys%test;</div><div class=\"line\">my @test_value=values%test;</div><div class=\"line\">print “test_key is: @test_key\\n”;</div><div class=\"line\">print “test_value is: @test_value\\n”;</div><div class=\"line\">使用each函数遍历hash</div><div class=\"line\">my %test=(‘foo’=&gt;<span class=\"number\">35</span>,’bar’=&gt;<span class=\"number\">39</span>,’carl’=&gt;<span class=\"number\">34</span>,’zhang’=&gt;<span class=\"number\">89</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>( my($test_key,$test_value)=each %test)&#123;</div><div class=\"line\">print “$test_key=&gt;$test_value\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">my %test=(‘foo’=&gt;<span class=\"number\">35</span>,’bar’=&gt;<span class=\"number\">39</span>,’carl’=&gt;<span class=\"number\">34</span>,’zhang’=&gt;<span class=\"number\">89</span>);</div><div class=\"line\">foreach my $test_key (sort keys %test)&#123;</div><div class=\"line\">my $test_value=$test&#123;$test_key&#125;;</div><div class=\"line\">print “$test_key=&gt;$test_value\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">判断键值是否存在：</div><div class=\"line\"><span class=\"keyword\">if</span> ( exists $test&#123;‘foo’&#125;)&#123;</div><div class=\"line\">print “key fool is <span class=\"keyword\">in</span> test hash\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">删除hash中的某个元素</div><div class=\"line\"><span class=\"keyword\">delete</span> $test&#123;‘foo’&#125;;</div><div class=\"line\">%ENV环境变量</div><div class=\"line\">my @test=%ENV;</div><div class=\"line\">foreach $test_key (keys %ENV)&#123;</div><div class=\"line\">print “$test_key=&gt;$ENV&#123;$test_key&#125;\\n”;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>模式匹配：<br>m/string/;<br>m%string%;<br>/string/;<br>使用/i忽略带小写<br>/string/i<br>用/s匹配任意字符<br>/test.aaa/s 会匹配test和aaa之间的所有内容，包括换行符<br>用/x加入空白符，有了/x，perl会忽略空格和正则表达式中的perl风格的注释。<br>\\A表示字符串开头<br>\\z表示要匹配的字符串绝对末尾<br>\\b匹配单词边界<br>\\B不匹配单词边界<br>捕获<br>使用?:来指定不捕获小括号内的东东<br>使用?来命名捕获的内容，使用$+{LABEL}来提取捕获的内容<br>贪婪匹配 ? +? {1,}? {4,20}? ??<br>$^I 读取文件后对文件进行备份<br>perl模块<br>perldoc CGI 查看模块的用法<br>cpan -a 列出安装的模块<br>模块的安装：<br>perl Makefile.PL<br>make<br>make install<br>可以在perl Makefile.PL后面通过<code>INSTALL_BASE</code>指定安装的路径<br>File::Basename和File::Spec的使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">use File::Basename;</div><div class=\"line\">use File::Spec;</div><div class=\"line\">my $name=”/usr/local/bin/perl”;</div><div class=\"line\">my $filename=basename $name;</div><div class=\"line\">my $dirname=dirname $name;</div><div class=\"line\">my $new_name=File::Spec-&gt;catfile($dirname,$filename);</div><div class=\"line\">print “filename is $filename\\n”;</div><div class=\"line\">print “dirname is $dirname\\n”;</div><div class=\"line\">print “newname is $new_name\\n”;</div></pre></td></tr></table></figure></p>\n<p>文件操作<br>文件测试操作符<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">-r 文件或者目录对当前用户或组来说是可读的</div><div class=\"line\">-w 文件或者目录对当前用户或组来说是可写的</div><div class=\"line\">-x 文件或者目录对当前用户或组来说是可执行的</div><div class=\"line\">-o 文件或目录由当前用户拥有</div><div class=\"line\">-R 文件或者目录对实际的用户或者组是可读的</div><div class=\"line\">-W 文件或者目录对实际的用户或者组是可写的</div><div class=\"line\">-X 文件或者目录对实际的用户或者组是可执行的</div><div class=\"line\">-O 文件或者目录由实际的用户拥有</div><div class=\"line\">-e 文件或者目录是存在的</div><div class=\"line\">-z 文件存在且没有内容（对目录来说永远为假）</div><div class=\"line\">-s 文件或者目录存在而且有内容（返回值是以字节为单位的文件大小）</div><div class=\"line\">-f 是普通文件</div><div class=\"line\">-d 是目录</div><div class=\"line\">-l 是符号链接</div><div class=\"line\">-S 是socket类型的文件</div><div class=\"line\">-p 是命名管道，也就是先入先出(fifo)队列</div><div class=\"line\">-b 是块设备文件（比如某个可挂载的磁盘）</div><div class=\"line\">-c 是字符设备文件（比如某个I/O设备）</div><div class=\"line\">-u 文件或者目录设置了setuid位</div><div class=\"line\">-g 文件或者目录设置了setgid位</div><div class=\"line\">-k 文件或者目录设置了sticky位</div><div class=\"line\">-t 文件句柄是TTY设备</div><div class=\"line\">-T 看起来像文本文件</div><div class=\"line\">-B 看起来像二进制文件</div><div class=\"line\">-M 最后一次被修改后至今的天数</div><div class=\"line\">-A 最后一次被访问后至今的天数</div><div class=\"line\">-C 最后一次文件节点编号(inode)被变更后至今的天数</div></pre></td></tr></table></figure></p>\n<p>测试统一文件的多项属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (-r $file and -w $file)&#123;</div><div class=\"line\">…..</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以改写成如下语句，以提高性能<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (-r $file and -w )&#123;</div><div class=\"line\">…..</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>符号表示虚拟文件句柄，它会告诉perl用上次查询过的文件来做当前测试。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">stat和lstat函数</div><div class=\"line\">stat函数返回一个有<span class=\"number\">13</span>个元素组成的列表。</div><div class=\"line\">dev <span class=\"number\">0</span> 文件所在的设备编号</div><div class=\"line\">ino <span class=\"number\">1</span> 文件的inode标号</div><div class=\"line\">mode <span class=\"number\">2</span> 文件模式（权限、类型）</div><div class=\"line\">nlink <span class=\"number\">3</span> 文件或者目录的连接数</div><div class=\"line\">uid <span class=\"number\">4</span> 文件的用户ID</div><div class=\"line\">gid <span class=\"number\">5</span> 文件的组ID</div><div class=\"line\">rdev <span class=\"number\">6</span> 设备识别码（只用于特殊文件）</div><div class=\"line\">size <span class=\"number\">7</span> 文件总的自己数</div><div class=\"line\">atime <span class=\"number\">8</span> 文件最后访问时间</div><div class=\"line\">mtime <span class=\"number\">9</span> 文件最后更改时间</div><div class=\"line\">ctime <span class=\"number\">10</span> inode更改的时间</div><div class=\"line\">blksize <span class=\"number\">11</span> 文件系统I/O首选块的大小</div><div class=\"line\">blocks <span class=\"number\">12</span> 实际分配的文件块数</div><div class=\"line\">localtime函数</div><div class=\"line\">($sec,$min,$hour,$mday,$mon,$year_off,$wday,$yday,$isdat) = localtime;</div><div class=\"line\">$sec 秒，<span class=\"number\">0</span> ~ <span class=\"number\">59</span></div><div class=\"line\">$min 分，<span class=\"number\">0</span> ~ <span class=\"number\">59</span></div><div class=\"line\">$hour 时，<span class=\"number\">0</span> ~ <span class=\"number\">23</span></div><div class=\"line\">$mday 月份中的日期， <span class=\"number\">1</span> ~ <span class=\"number\">2</span> <span class=\"number\">8</span>、<span class=\"number\">2</span> <span class=\"number\">9</span>、<span class=\"number\">3</span> <span class=\"number\">0</span>或<span class=\"number\">3</span> <span class=\"number\">1</span></div><div class=\"line\">$mon 年份中的月份， <span class=\"number\">0</span> ~ <span class=\"number\">11</span>（这里请特别要小心）</div><div class=\"line\">$year_off <span class=\"number\">1900</span>年以来的年份。将<span class=\"number\">1900</span>加上这个数字，得出正确的<span class=\"number\">4</span>位数年份</div><div class=\"line\">$wday 星期几，<span class=\"number\">0</span> ~ <span class=\"number\">6</span></div><div class=\"line\">$yday 一年中的第几天，<span class=\"number\">0</span> ~ <span class=\"number\">364</span>或<span class=\"number\">365</span></div><div class=\"line\">$isdst 如果夏令时有效，则为真</div><div class=\"line\">perl目录操作</div><div class=\"line\">chdir改变工作目录</div><div class=\"line\">chdir ‘/etc’ or die “can’t chdir to /etc: $!\\n”;</div></pre></td></tr></table></figure></p>\n<p>在程序内部使用通配符匹配文件<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">my @files=glob ‘. ‘; #匹配多个模式需要用空格隔开，也可以采用my @files=&lt;*&gt;;的方式</div><div class=\"line\">print “@files\\n”;</div><div class=\"line\">opendir 打开目录</div><div class=\"line\">readdir 读取目录下的文件名</div><div class=\"line\">closedir 关闭打卡的目录句柄</div><div class=\"line\">测试代码：</div><div class=\"line\">use File::Spec::Functions;</div><div class=\"line\">my $dir=’/etc’;</div><div class=\"line\">opendir DIR,$dir or die “can’t open /etc directory: $!\\n”;</div><div class=\"line\">foreach my $file (readdir DIR)&#123;</div><div class=\"line\">if ($file=~/^./)&#123;</div><div class=\"line\">next;</div><div class=\"line\">&#125;</div><div class=\"line\">$file=catfile($dir,$file);</div><div class=\"line\">print “we found $file in /etc directory\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">closedir DIR;</div><div class=\"line\">unlink删除文件，返回成功删除文件的数目，unlink不能用来删除目录</div><div class=\"line\">rename重命名文件</div><div class=\"line\">测试代码：</div><div class=\"line\">for my $file (glob ‘*.old’)&#123;</div><div class=\"line\">my $new_file=$file;</div><div class=\"line\">$new_file=~s/old/new/;</div><div class=\"line\">if (-z $new_file)&#123;</div><div class=\"line\">print “$new_file is exists ,please check it out\\n”;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">rename $file,$new_file or warn “rename $file faild,please check it out\\n”;</div><div class=\"line\">print “rename $file success ,don’t worry\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建和删除目录<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir 创建目录</div><div class=\"line\">my $dir=’aaa’;</div><div class=\"line\">my $permissions=”<span class=\"number\">0755</span>”;</div><div class=\"line\">mkdir ‘aaa’,oct($permissions) or die “can’t create directory aaa: $!\\n”;</div><div class=\"line\">rmdir删除目录，每次只能删除一个目录，而且删除时目录必须为空，不然会导致失败!</div><div class=\"line\">chmod修改文件或者目录权限</div><div class=\"line\">chmod <span class=\"number\">0755</span>,’test’;</div><div class=\"line\">chown修改文件或者目录的属主或者属组,返回受影响的文件数量</div><div class=\"line\">测试代码:</div><div class=\"line\">my $user=<span class=\"number\">52</span>;</div><div class=\"line\">my $group=<span class=\"number\">52</span>;</div><div class=\"line\">chown $user,$group,’bbb’;</div><div class=\"line\">defined(my $user1=getpwnam ‘puppet’) or die “bad user: $!\\n”;</div><div class=\"line\">defined(my $group1=getpwnam ‘puppet’) or die ‘bad group: $!\\n’;</div><div class=\"line\">chown $user1,$group1,’bbb.new’;</div><div class=\"line\">utime修改文件的时间戳(最近的更改和访问时间)</div><div class=\"line\">测试代码：</div><div class=\"line\">my $now=time;</div><div class=\"line\">my $ago=$now<span class=\"number\">-246060</span>;</div><div class=\"line\">utime $now,$ago,’bbb’;</div><div class=\"line\">字符串和排序</div><div class=\"line\">用index查找子字符串</div><div class=\"line\">my $string=<span class=\"string\">'hah aaa bbbcc aa ddd'</span>;</div><div class=\"line\">my $part=index($string,<span class=\"string\">'aa'</span>);</div><div class=\"line\">print <span class=\"string\">\"$part\\n\"</span>;</div></pre></td></tr></table></figure></p>\n<p>排序<br>按照数字排序&lt;=&gt;;<br>按照字符排序cmp;<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">my @some_numbers=qw&#123;<span class=\"number\">1</span> <span class=\"number\">10</span> <span class=\"number\">23</span> <span class=\"number\">100</span> <span class=\"number\">34</span> <span class=\"number\">45</span>&#125;;</div><div class=\"line\">my @some_chars=qw&#123;aa cc bb dd dc bc&#125;;</div><div class=\"line\">sub by_number&#123;</div><div class=\"line\">$a&lt;=&gt;$b;</div><div class=\"line\">&#125;</div><div class=\"line\">sub by_char&#123;</div><div class=\"line\">$a cmp $b;</div><div class=\"line\">&#125;</div><div class=\"line\">my @test=sort by_number @some_numbers;</div><div class=\"line\">my @test2=sort by_char @some_chars;</div><div class=\"line\">print “@test\\n”;</div><div class=\"line\">print “@test2\\n”;</div><div class=\"line\">sub sort_test&#123;</div><div class=\"line\">substr($test1&#123;$a&#125;,<span class=\"number\">2</span>,<span class=\"number\">6</span>) &lt;=&gt; substr($test1&#123;$b&#125;,<span class=\"number\">2</span>,<span class=\"number\">6</span>)</div><div class=\"line\">or substr($test1&#123;$a&#125;,<span class=\"number\">0</span>,<span class=\"number\">1</span>) cmp substr($test1&#123;$b&#125;,<span class=\"number\">0</span>,<span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行外部命令<br>IPC::System::Simple<br>system systemx<br>capture capturex<br>错误扑捉：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span></div><div class=\"line\">my $aaa1=$ARGV[<span class=\"number\">0</span>];</div><div class=\"line\">my $aaa2=$ARGV[<span class=\"number\">1</span>];</div><div class=\"line\">my $test=<span class=\"built_in\">eval</span>&#123;$aaa1/$aaa2&#125; || ‘aaa’;</div><div class=\"line\">print “I couldn’t divide by \\$aaa2: $@” <span class=\"keyword\">if</span> $@;</div><div class=\"line\">print “$test”;</div></pre></td></tr></table></figure></p>\n<p>有4中类型的错误eval捕捉不到：</p>\n<ul>\n<li>1、代码语法错误</li>\n<li>2、perl解析器本省的崩溃错误</li>\n<li>3、告警类错误</li>\n<li>4、每次调用exit的时候</li>\n</ul>\n","excerpt":"<p> perl内部并不存在整数，在perl内部总是按照双精度浮点数的要求来保存数字并进行运算的。</p>\n<h3 id=\"如果要使perl支持unicode字符，需要添加-use-utf8\"><a href=\"#如果要使perl支持unicode字符，需要添加-use-utf8\" class=\"headerlink\" title=\"如果要使perl支持unicode字符，需要添加 use utf8;\"></a>如果要使perl支持unicode字符，需要添加 use utf8;</h3><p>\\l 将下一个字母转换为小写<br>\\L 将它后面的所有字母都换为小写，直到\\E为止<br>\\u 将下一个字母转换为大写","more":"<br>\\U 将它后面的所有字母都换为大写，直到\\E为止<br>\\Q 相当于把它到\\E之间的非单词字符加上反斜杠<br>\\E 结束\\L、\\U、\\Q开始的作用范围</p>\n<h3 id=\"per的告警信息：\"><a href=\"#per的告警信息：\" class=\"headerlink\" title=\"per的告警信息：\"></a>per的告警信息：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use warnings;</div></pre></td></tr></table></figure>\n<p>或者使用 perl -w运行脚本<br>或者加上 <code>#!/usr/bin/perl -w</code><br>如果看不懂告警，就是用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use diagnostics;</div></pre></td></tr></table></figure></p>\n<h3 id=\"打印更详细的信息\"><a href=\"#打印更详细的信息\" class=\"headerlink\" title=\"打印更详细的信息\"></a>打印更详细的信息</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$#aaa表示aaa数组的最后一个元素的索引值</div></pre></td></tr></table></figure>\n<p>关于perl中布尔值的判断</p>\n<ul>\n<li>1、如果是数字，0为假；所有其他的为真</li>\n<li>2、如果是字符串，空字符串为假，所有其他的字符串为真</li>\n<li>3、如果既不是数字也不是字符串，那就先换成数字或者字符串再进行判断。<h3 id=\"使用defined函数来判断变量是否定义\"><a href=\"#使用defined函数来判断变量是否定义\" class=\"headerlink\" title=\"使用defined函数来判断变量是否定义\"></a>使用defined函数来判断变量是否定义</h3><h4 id=\"数组定义：\"><a href=\"#数组定义：\" class=\"headerlink\" title=\"数组定义：\"></a>数组定义：</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">my @p1=(‘aaa’,’bbb’,’ccc’);</div><div class=\"line\">my @p2=(1..100);</div><div class=\"line\">my @p3=qw(aaa bbb ccc);</div><div class=\"line\">my @p4=qw! aaa bbb ccc !;</div><div class=\"line\">$end=$#p1;</div><div class=\"line\">$number=$#p1+1;</div><div class=\"line\">$last=$p1[$#p1];</div><div class=\"line\">$last=$p1[-1];</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>pop取出数组中的最后的一个元素并将其作为返回值返回。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$last=pop(@p1);</div></pre></td></tr></table></figure></p>\n<p>push添加元素到数组的最后<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">push(@p1,’jaj’);</div><div class=\"line\">push @p1,’aaaa’;</div><div class=\"line\">push @p1,@p2;</div></pre></td></tr></table></figure></p>\n<p>shift取出数字第一个元素并将其作为返回值返回<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$first=shift(@p1);</div></pre></td></tr></table></figure></p>\n<p>unshift添加元素到数组的最左边<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">unshift(@p1,’jaj’);</div><div class=\"line\">unshift @p1,@p2;</div></pre></td></tr></table></figure></p>\n<p>splice可以实现从中间操作数组；<br>foreach 来循环遍历数组中的值<br>reverse反转数组<br>sort 对数组进行排序<br>sort(@p1) 正向排序<br>reverse sort(@p1) 逆向排序<br>chomp(@p1);<br>chomp(@line =);<br>可以使用state操作符来声明持久性私有变量<br>state $sum=0;<br>state @numbers;<br>打印数组：<br>print @array<br>print “@array”<br>@ARGV是存放所有参数的数组<br>&lt;&gt;砖石操作符，把输入参数当作文件处理<br>文件操作符（文件句柄）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">open CONFIG, ‘test’;</div><div class=\"line\">open CONFIG, ‘&lt;test’;</div><div class=\"line\">open CONFIG, ‘&gt;test’;</div><div class=\"line\">open CONFIG, ‘&gt;&gt;test’;</div></pre></td></tr></table></figure></p>\n<p>关闭文件句柄：<br>close CONFIG;<br>读取或者写入的时候指定文件的字符编码<br>open CONFIG, ‘&lt;:encoding(UTF-8)’, ‘test’;<br>open CONFIG, ‘&gt;&gt;:encoding(UTF-8)’, ‘test’;<br>打印perl能处理的字符编码清单<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">perl -MEncode -le “print <span class=\"keyword\">for</span> Encode-&gt;encodings(‘:all’)”</div></pre></td></tr></table></figure></p>\n<p>判断文件句柄是否成功的代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">my $success=open CONFIG, ‘&gt;&gt;’, test’;</div><div class=\"line\"><span class=\"keyword\">if</span>( !$success )&#123; print “create file faild”;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>( ! open CONFIG, ‘&gt;&gt;’, ‘test’ )&#123;</div><div class=\"line\">die “Can’t create config file: $!”;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>( @ARGV&lt;<span class=\"number\">2</span> )&#123;</div><div class=\"line\">die “Not enough <span class=\"built_in\">arguments</span>\\n”;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>自动检查致命错误<br>use autodie;<br>可以将文件句柄设置成变量，这样文件句柄可以作为子程序的参数传递，或者放在数组和hash中排序，或者严格控制其作用域。<br>打印往文件句柄中写入数据的时候不需要加入逗号！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash</div><div class=\"line\">申明hash</div><div class=\"line\">my %test=(‘foo’=&gt;<span class=\"number\">35</span>,’bar’=&gt;<span class=\"number\">39</span>,’carl’=&gt;<span class=\"number\">34</span>,’zhang’=&gt;<span class=\"number\">89</span>);</div><div class=\"line\">my %test=(‘foo’,<span class=\"number\">35</span>,’bar’,<span class=\"number\">39</span>,’carl’,<span class=\"number\">34</span>,’zhang’,<span class=\"number\">89</span>);</div><div class=\"line\">访问哈希元素</div><div class=\"line\">$hash&#123;$key&#125;;</div><div class=\"line\">哈希元素赋值</div><div class=\"line\">$hash&#123;‘test’&#125;=’carlzhang’;</div><div class=\"line\">访问整个hash</div><div class=\"line\">my @any_array=%array;</div><div class=\"line\">print “@any_array\\n”;</div><div class=\"line\">hash转换</div><div class=\"line\">my %test_hash=reverse %hash;</div><div class=\"line\">hash函数</div><div class=\"line\">keys函数能返回hash的所有键列表</div><div class=\"line\">values函数能返回hash所有的值列表</div><div class=\"line\">my %test=(‘foo’=&gt;<span class=\"number\">35</span>,’bar’=&gt;<span class=\"number\">39</span>,’carl’=&gt;<span class=\"number\">34</span>,’zhang’=&gt;<span class=\"number\">89</span>);</div><div class=\"line\">my @test_key=keys%test;</div><div class=\"line\">my @test_value=values%test;</div><div class=\"line\">print “test_key is: @test_key\\n”;</div><div class=\"line\">print “test_value is: @test_value\\n”;</div><div class=\"line\">使用each函数遍历hash</div><div class=\"line\">my %test=(‘foo’=&gt;<span class=\"number\">35</span>,’bar’=&gt;<span class=\"number\">39</span>,’carl’=&gt;<span class=\"number\">34</span>,’zhang’=&gt;<span class=\"number\">89</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>( my($test_key,$test_value)=each %test)&#123;</div><div class=\"line\">print “$test_key=&gt;$test_value\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">my %test=(‘foo’=&gt;<span class=\"number\">35</span>,’bar’=&gt;<span class=\"number\">39</span>,’carl’=&gt;<span class=\"number\">34</span>,’zhang’=&gt;<span class=\"number\">89</span>);</div><div class=\"line\">foreach my $test_key (sort keys %test)&#123;</div><div class=\"line\">my $test_value=$test&#123;$test_key&#125;;</div><div class=\"line\">print “$test_key=&gt;$test_value\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">判断键值是否存在：</div><div class=\"line\"><span class=\"keyword\">if</span> ( exists $test&#123;‘foo’&#125;)&#123;</div><div class=\"line\">print “key fool is <span class=\"keyword\">in</span> test hash\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">删除hash中的某个元素</div><div class=\"line\"><span class=\"keyword\">delete</span> $test&#123;‘foo’&#125;;</div><div class=\"line\">%ENV环境变量</div><div class=\"line\">my @test=%ENV;</div><div class=\"line\">foreach $test_key (keys %ENV)&#123;</div><div class=\"line\">print “$test_key=&gt;$ENV&#123;$test_key&#125;\\n”;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>模式匹配：<br>m/string/;<br>m%string%;<br>/string/;<br>使用/i忽略带小写<br>/string/i<br>用/s匹配任意字符<br>/test.aaa/s 会匹配test和aaa之间的所有内容，包括换行符<br>用/x加入空白符，有了/x，perl会忽略空格和正则表达式中的perl风格的注释。<br>\\A表示字符串开头<br>\\z表示要匹配的字符串绝对末尾<br>\\b匹配单词边界<br>\\B不匹配单词边界<br>捕获<br>使用?:来指定不捕获小括号内的东东<br>使用?来命名捕获的内容，使用$+{LABEL}来提取捕获的内容<br>贪婪匹配 ? +? {1,}? {4,20}? ??<br>$^I 读取文件后对文件进行备份<br>perl模块<br>perldoc CGI 查看模块的用法<br>cpan -a 列出安装的模块<br>模块的安装：<br>perl Makefile.PL<br>make<br>make install<br>可以在perl Makefile.PL后面通过<code>INSTALL_BASE</code>指定安装的路径<br>File::Basename和File::Spec的使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">use File::Basename;</div><div class=\"line\">use File::Spec;</div><div class=\"line\">my $name=”/usr/local/bin/perl”;</div><div class=\"line\">my $filename=basename $name;</div><div class=\"line\">my $dirname=dirname $name;</div><div class=\"line\">my $new_name=File::Spec-&gt;catfile($dirname,$filename);</div><div class=\"line\">print “filename is $filename\\n”;</div><div class=\"line\">print “dirname is $dirname\\n”;</div><div class=\"line\">print “newname is $new_name\\n”;</div></pre></td></tr></table></figure></p>\n<p>文件操作<br>文件测试操作符<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">-r 文件或者目录对当前用户或组来说是可读的</div><div class=\"line\">-w 文件或者目录对当前用户或组来说是可写的</div><div class=\"line\">-x 文件或者目录对当前用户或组来说是可执行的</div><div class=\"line\">-o 文件或目录由当前用户拥有</div><div class=\"line\">-R 文件或者目录对实际的用户或者组是可读的</div><div class=\"line\">-W 文件或者目录对实际的用户或者组是可写的</div><div class=\"line\">-X 文件或者目录对实际的用户或者组是可执行的</div><div class=\"line\">-O 文件或者目录由实际的用户拥有</div><div class=\"line\">-e 文件或者目录是存在的</div><div class=\"line\">-z 文件存在且没有内容（对目录来说永远为假）</div><div class=\"line\">-s 文件或者目录存在而且有内容（返回值是以字节为单位的文件大小）</div><div class=\"line\">-f 是普通文件</div><div class=\"line\">-d 是目录</div><div class=\"line\">-l 是符号链接</div><div class=\"line\">-S 是socket类型的文件</div><div class=\"line\">-p 是命名管道，也就是先入先出(fifo)队列</div><div class=\"line\">-b 是块设备文件（比如某个可挂载的磁盘）</div><div class=\"line\">-c 是字符设备文件（比如某个I/O设备）</div><div class=\"line\">-u 文件或者目录设置了setuid位</div><div class=\"line\">-g 文件或者目录设置了setgid位</div><div class=\"line\">-k 文件或者目录设置了sticky位</div><div class=\"line\">-t 文件句柄是TTY设备</div><div class=\"line\">-T 看起来像文本文件</div><div class=\"line\">-B 看起来像二进制文件</div><div class=\"line\">-M 最后一次被修改后至今的天数</div><div class=\"line\">-A 最后一次被访问后至今的天数</div><div class=\"line\">-C 最后一次文件节点编号(inode)被变更后至今的天数</div></pre></td></tr></table></figure></p>\n<p>测试统一文件的多项属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (-r $file and -w $file)&#123;</div><div class=\"line\">…..</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以改写成如下语句，以提高性能<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (-r $file and -w )&#123;</div><div class=\"line\">…..</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>符号表示虚拟文件句柄，它会告诉perl用上次查询过的文件来做当前测试。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">stat和lstat函数</div><div class=\"line\">stat函数返回一个有<span class=\"number\">13</span>个元素组成的列表。</div><div class=\"line\">dev <span class=\"number\">0</span> 文件所在的设备编号</div><div class=\"line\">ino <span class=\"number\">1</span> 文件的inode标号</div><div class=\"line\">mode <span class=\"number\">2</span> 文件模式（权限、类型）</div><div class=\"line\">nlink <span class=\"number\">3</span> 文件或者目录的连接数</div><div class=\"line\">uid <span class=\"number\">4</span> 文件的用户ID</div><div class=\"line\">gid <span class=\"number\">5</span> 文件的组ID</div><div class=\"line\">rdev <span class=\"number\">6</span> 设备识别码（只用于特殊文件）</div><div class=\"line\">size <span class=\"number\">7</span> 文件总的自己数</div><div class=\"line\">atime <span class=\"number\">8</span> 文件最后访问时间</div><div class=\"line\">mtime <span class=\"number\">9</span> 文件最后更改时间</div><div class=\"line\">ctime <span class=\"number\">10</span> inode更改的时间</div><div class=\"line\">blksize <span class=\"number\">11</span> 文件系统I/O首选块的大小</div><div class=\"line\">blocks <span class=\"number\">12</span> 实际分配的文件块数</div><div class=\"line\">localtime函数</div><div class=\"line\">($sec,$min,$hour,$mday,$mon,$year_off,$wday,$yday,$isdat) = localtime;</div><div class=\"line\">$sec 秒，<span class=\"number\">0</span> ~ <span class=\"number\">59</span></div><div class=\"line\">$min 分，<span class=\"number\">0</span> ~ <span class=\"number\">59</span></div><div class=\"line\">$hour 时，<span class=\"number\">0</span> ~ <span class=\"number\">23</span></div><div class=\"line\">$mday 月份中的日期， <span class=\"number\">1</span> ~ <span class=\"number\">2</span> <span class=\"number\">8</span>、<span class=\"number\">2</span> <span class=\"number\">9</span>、<span class=\"number\">3</span> <span class=\"number\">0</span>或<span class=\"number\">3</span> <span class=\"number\">1</span></div><div class=\"line\">$mon 年份中的月份， <span class=\"number\">0</span> ~ <span class=\"number\">11</span>（这里请特别要小心）</div><div class=\"line\">$year_off <span class=\"number\">1900</span>年以来的年份。将<span class=\"number\">1900</span>加上这个数字，得出正确的<span class=\"number\">4</span>位数年份</div><div class=\"line\">$wday 星期几，<span class=\"number\">0</span> ~ <span class=\"number\">6</span></div><div class=\"line\">$yday 一年中的第几天，<span class=\"number\">0</span> ~ <span class=\"number\">364</span>或<span class=\"number\">365</span></div><div class=\"line\">$isdst 如果夏令时有效，则为真</div><div class=\"line\">perl目录操作</div><div class=\"line\">chdir改变工作目录</div><div class=\"line\">chdir ‘/etc’ or die “can’t chdir to /etc: $!\\n”;</div></pre></td></tr></table></figure></p>\n<p>在程序内部使用通配符匹配文件<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">my @files=glob ‘. ‘; #匹配多个模式需要用空格隔开，也可以采用my @files=&lt;*&gt;;的方式</div><div class=\"line\">print “@files\\n”;</div><div class=\"line\">opendir 打开目录</div><div class=\"line\">readdir 读取目录下的文件名</div><div class=\"line\">closedir 关闭打卡的目录句柄</div><div class=\"line\">测试代码：</div><div class=\"line\">use File::Spec::Functions;</div><div class=\"line\">my $dir=’/etc’;</div><div class=\"line\">opendir DIR,$dir or die “can’t open /etc directory: $!\\n”;</div><div class=\"line\">foreach my $file (readdir DIR)&#123;</div><div class=\"line\">if ($file=~/^./)&#123;</div><div class=\"line\">next;</div><div class=\"line\">&#125;</div><div class=\"line\">$file=catfile($dir,$file);</div><div class=\"line\">print “we found $file in /etc directory\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">closedir DIR;</div><div class=\"line\">unlink删除文件，返回成功删除文件的数目，unlink不能用来删除目录</div><div class=\"line\">rename重命名文件</div><div class=\"line\">测试代码：</div><div class=\"line\">for my $file (glob ‘*.old’)&#123;</div><div class=\"line\">my $new_file=$file;</div><div class=\"line\">$new_file=~s/old/new/;</div><div class=\"line\">if (-z $new_file)&#123;</div><div class=\"line\">print “$new_file is exists ,please check it out\\n”;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">rename $file,$new_file or warn “rename $file faild,please check it out\\n”;</div><div class=\"line\">print “rename $file success ,don’t worry\\n”;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建和删除目录<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir 创建目录</div><div class=\"line\">my $dir=’aaa’;</div><div class=\"line\">my $permissions=”<span class=\"number\">0755</span>”;</div><div class=\"line\">mkdir ‘aaa’,oct($permissions) or die “can’t create directory aaa: $!\\n”;</div><div class=\"line\">rmdir删除目录，每次只能删除一个目录，而且删除时目录必须为空，不然会导致失败!</div><div class=\"line\">chmod修改文件或者目录权限</div><div class=\"line\">chmod <span class=\"number\">0755</span>,’test’;</div><div class=\"line\">chown修改文件或者目录的属主或者属组,返回受影响的文件数量</div><div class=\"line\">测试代码:</div><div class=\"line\">my $user=<span class=\"number\">52</span>;</div><div class=\"line\">my $group=<span class=\"number\">52</span>;</div><div class=\"line\">chown $user,$group,’bbb’;</div><div class=\"line\">defined(my $user1=getpwnam ‘puppet’) or die “bad user: $!\\n”;</div><div class=\"line\">defined(my $group1=getpwnam ‘puppet’) or die ‘bad group: $!\\n’;</div><div class=\"line\">chown $user1,$group1,’bbb.new’;</div><div class=\"line\">utime修改文件的时间戳(最近的更改和访问时间)</div><div class=\"line\">测试代码：</div><div class=\"line\">my $now=time;</div><div class=\"line\">my $ago=$now<span class=\"number\">-246060</span>;</div><div class=\"line\">utime $now,$ago,’bbb’;</div><div class=\"line\">字符串和排序</div><div class=\"line\">用index查找子字符串</div><div class=\"line\">my $string=<span class=\"string\">'hah aaa bbbcc aa ddd'</span>;</div><div class=\"line\">my $part=index($string,<span class=\"string\">'aa'</span>);</div><div class=\"line\">print <span class=\"string\">\"$part\\n\"</span>;</div></pre></td></tr></table></figure></p>\n<p>排序<br>按照数字排序&lt;=&gt;;<br>按照字符排序cmp;<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">my @some_numbers=qw&#123;<span class=\"number\">1</span> <span class=\"number\">10</span> <span class=\"number\">23</span> <span class=\"number\">100</span> <span class=\"number\">34</span> <span class=\"number\">45</span>&#125;;</div><div class=\"line\">my @some_chars=qw&#123;aa cc bb dd dc bc&#125;;</div><div class=\"line\">sub by_number&#123;</div><div class=\"line\">$a&lt;=&gt;$b;</div><div class=\"line\">&#125;</div><div class=\"line\">sub by_char&#123;</div><div class=\"line\">$a cmp $b;</div><div class=\"line\">&#125;</div><div class=\"line\">my @test=sort by_number @some_numbers;</div><div class=\"line\">my @test2=sort by_char @some_chars;</div><div class=\"line\">print “@test\\n”;</div><div class=\"line\">print “@test2\\n”;</div><div class=\"line\">sub sort_test&#123;</div><div class=\"line\">substr($test1&#123;$a&#125;,<span class=\"number\">2</span>,<span class=\"number\">6</span>) &lt;=&gt; substr($test1&#123;$b&#125;,<span class=\"number\">2</span>,<span class=\"number\">6</span>)</div><div class=\"line\">or substr($test1&#123;$a&#125;,<span class=\"number\">0</span>,<span class=\"number\">1</span>) cmp substr($test1&#123;$b&#125;,<span class=\"number\">0</span>,<span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行外部命令<br>IPC::System::Simple<br>system systemx<br>capture capturex<br>错误扑捉：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span></div><div class=\"line\">my $aaa1=$ARGV[<span class=\"number\">0</span>];</div><div class=\"line\">my $aaa2=$ARGV[<span class=\"number\">1</span>];</div><div class=\"line\">my $test=<span class=\"built_in\">eval</span>&#123;$aaa1/$aaa2&#125; || ‘aaa’;</div><div class=\"line\">print “I couldn’t divide by \\$aaa2: $@” <span class=\"keyword\">if</span> $@;</div><div class=\"line\">print “$test”;</div></pre></td></tr></table></figure></p>\n<p>有4中类型的错误eval捕捉不到：</p>\n<ul>\n<li>1、代码语法错误</li>\n<li>2、perl解析器本省的崩溃错误</li>\n<li>3、告警类错误</li>\n<li>4、每次调用exit的时候</li>\n</ul>"},{"title":"Spring Boot 日志管理和收集","date":"2016-11-14T03:53:29.000Z","_content":"日志对于应用程序的重要性不言而喻，社区也有各种各样的日志框架。\n\nSpring Boot从实现上不一依赖于任何日志框架的实现，只有对于common-logging API的依赖，对应的抽象实现是 LoggingSystem 。\n\n依靠这一层的抽象，对于日志等级的配置可以完全在Spring Boot中实现，比如 application.properties 中\n<!-- more -->\n\n```js\nlogging.level.org.springframework.web=INFO\nlogging.level.org.hibernate=DEBUG\n```\n对于具体的日志框架实现可以选择 Java Util Logging, Log4J, Log4J2 或者 Logback。从mvn库的依赖和下载数量来看Logback的使用数量确实有较大的优势。\n\n对于具体实现部分的配置还是由实现框架本身管理，比如Logback对应的logback.xml文件。\n\n大部分日志的输出一般会对应两部分，一部分是stdout，一部分是日志文件。\n\n对于大规模部署的云原生应用，直接输出到stdout，然后从docker中收集日志也是一个不错的选择的。\n\n市面上日志聚合和搜索平台实在太多，有部分需要从代码层面做出修改，但是最简单的办法还是从日志实现本身入手。比如 \nloggly 提供了对于logback的支持。\n\n只需要在配置加上对应的appender即可。\n\n```js\n<configuration>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <appender name=\"loggly\" class=\"ch.qos.logback.ext.loggly.LogglyAppender\">\n        <endpointUrl>http://logs-01.loggly.com/inputs/[your secret key]/tag/logback</endpointUrl>\n        <pattern>%d{\"ISO8601\", UTC} %p %t %c{0}.%M - %m%n</pattern>\n    </appender>\n    <appender name=\"loggly-async\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <appender-ref ref=\"loggly\" />\n    </appender>\n    <root level=\"info\">\n        <appender-ref ref=\"loggly-async\" />\n    </root>\n    <root level=\"ERROR\">\n        <appender-ref ref=\"STDOUT\"/>\n    </root>\n</configuration>\n```\n效果如下图 \nDashBoard \nSearch\n\n日志对于应用程序的重要性不言而喻，社区也有各种各样的日志框架。\n\nSpring Boot从实现上不一依赖于任何日志框架的实现，只有对于common-logging API的依赖，对应的抽象实现是 LoggingSystem 。\n\n依靠这一层的抽象，对于日志等级的配置可以完全在Spring Boot中实现，比如 application.properties 中\n```js\nlogging.level.org.springframework.web=INFO\nlogging.level.org.hibernate=DEBUG\n```\n","source":"_posts/spring-boot-log.md","raw":"title: 'Spring Boot 日志管理和收集'\ndate: 2016-11-14 11:53:29\ncategories: 技术\ntags: [java,springboot,logs]\n---\n日志对于应用程序的重要性不言而喻，社区也有各种各样的日志框架。\n\nSpring Boot从实现上不一依赖于任何日志框架的实现，只有对于common-logging API的依赖，对应的抽象实现是 LoggingSystem 。\n\n依靠这一层的抽象，对于日志等级的配置可以完全在Spring Boot中实现，比如 application.properties 中\n<!-- more -->\n\n```js\nlogging.level.org.springframework.web=INFO\nlogging.level.org.hibernate=DEBUG\n```\n对于具体的日志框架实现可以选择 Java Util Logging, Log4J, Log4J2 或者 Logback。从mvn库的依赖和下载数量来看Logback的使用数量确实有较大的优势。\n\n对于具体实现部分的配置还是由实现框架本身管理，比如Logback对应的logback.xml文件。\n\n大部分日志的输出一般会对应两部分，一部分是stdout，一部分是日志文件。\n\n对于大规模部署的云原生应用，直接输出到stdout，然后从docker中收集日志也是一个不错的选择的。\n\n市面上日志聚合和搜索平台实在太多，有部分需要从代码层面做出修改，但是最简单的办法还是从日志实现本身入手。比如 \nloggly 提供了对于logback的支持。\n\n只需要在配置加上对应的appender即可。\n\n```js\n<configuration>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <appender name=\"loggly\" class=\"ch.qos.logback.ext.loggly.LogglyAppender\">\n        <endpointUrl>http://logs-01.loggly.com/inputs/[your secret key]/tag/logback</endpointUrl>\n        <pattern>%d{\"ISO8601\", UTC} %p %t %c{0}.%M - %m%n</pattern>\n    </appender>\n    <appender name=\"loggly-async\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <appender-ref ref=\"loggly\" />\n    </appender>\n    <root level=\"info\">\n        <appender-ref ref=\"loggly-async\" />\n    </root>\n    <root level=\"ERROR\">\n        <appender-ref ref=\"STDOUT\"/>\n    </root>\n</configuration>\n```\n效果如下图 \nDashBoard \nSearch\n\n日志对于应用程序的重要性不言而喻，社区也有各种各样的日志框架。\n\nSpring Boot从实现上不一依赖于任何日志框架的实现，只有对于common-logging API的依赖，对应的抽象实现是 LoggingSystem 。\n\n依靠这一层的抽象，对于日志等级的配置可以完全在Spring Boot中实现，比如 application.properties 中\n```js\nlogging.level.org.springframework.web=INFO\nlogging.level.org.hibernate=DEBUG\n```\n","slug":"spring-boot-log","published":1,"updated":"2016-12-22T07:24:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3n001b2u6b65v8mau2","content":"<p>日志对于应用程序的重要性不言而喻，社区也有各种各样的日志框架。</p>\n<p>Spring Boot从实现上不一依赖于任何日志框架的实现，只有对于common-logging API的依赖，对应的抽象实现是 LoggingSystem 。</p>\n<p>依靠这一层的抽象，对于日志等级的配置可以完全在Spring Boot中实现，比如 application.properties 中<br><a id=\"more\"></a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">logging.level.org.springframework.web=INFO</div><div class=\"line\">logging.level.org.hibernate=DEBUG</div></pre></td></tr></table></figure>\n<p>对于具体的日志框架实现可以选择 Java Util Logging, Log4J, Log4J2 或者 Logback。从mvn库的依赖和下载数量来看Logback的使用数量确实有较大的优势。</p>\n<p>对于具体实现部分的配置还是由实现框架本身管理，比如Logback对应的logback.xml文件。</p>\n<p>大部分日志的输出一般会对应两部分，一部分是stdout，一部分是日志文件。</p>\n<p>对于大规模部署的云原生应用，直接输出到stdout，然后从docker中收集日志也是一个不错的选择的。</p>\n<p>市面上日志聚合和搜索平台实在太多，有部分需要从代码层面做出修改，但是最简单的办法还是从日志实现本身入手。比如<br>loggly 提供了对于logback的支持。</p>\n<p>只需要在配置加上对应的appender即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;</div><div class=\"line\">        &lt;encoder&gt;</div><div class=\"line\">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">        &lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    &lt;appender name=\"loggly\" class=\"ch.qos.logback.ext.loggly.LogglyAppender\"&gt;</div><div class=\"line\">        &lt;endpointUrl&gt;http://logs-01.loggly.com/inputs/[your secret key]/tag/logback&lt;/endpointUrl&gt;</div><div class=\"line\">        &lt;pattern&gt;%d&#123;\"ISO8601\", UTC&#125; %p %t %c&#123;0&#125;.%M - %m%n&lt;/pattern&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    &lt;appender name=\"loggly-async\" class=\"ch.qos.logback.classic.AsyncAppender\"&gt;</div><div class=\"line\">        &lt;appender-ref ref=\"loggly\" /&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    &lt;root level=\"info\"&gt;</div><div class=\"line\">        &lt;appender-ref ref=\"loggly-async\" /&gt;</div><div class=\"line\">    &lt;/root&gt;</div><div class=\"line\">    &lt;root level=\"ERROR\"&gt;</div><div class=\"line\">        &lt;appender-ref ref=\"STDOUT\"/&gt;</div><div class=\"line\">    &lt;/root&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>效果如下图<br>DashBoard<br>Search</p>\n<p>日志对于应用程序的重要性不言而喻，社区也有各种各样的日志框架。</p>\n<p>Spring Boot从实现上不一依赖于任何日志框架的实现，只有对于common-logging API的依赖，对应的抽象实现是 LoggingSystem 。</p>\n<p>依靠这一层的抽象，对于日志等级的配置可以完全在Spring Boot中实现，比如 application.properties 中<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">logging.level.org.springframework.web=INFO</div><div class=\"line\">logging.level.org.hibernate=DEBUG</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>日志对于应用程序的重要性不言而喻，社区也有各种各样的日志框架。</p>\n<p>Spring Boot从实现上不一依赖于任何日志框架的实现，只有对于common-logging API的依赖，对应的抽象实现是 LoggingSystem 。</p>\n<p>依靠这一层的抽象，对于日志等级的配置可以完全在Spring Boot中实现，比如 application.properties 中<br>","more":"</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">logging.level.org.springframework.web=INFO</div><div class=\"line\">logging.level.org.hibernate=DEBUG</div></pre></td></tr></table></figure>\n<p>对于具体的日志框架实现可以选择 Java Util Logging, Log4J, Log4J2 或者 Logback。从mvn库的依赖和下载数量来看Logback的使用数量确实有较大的优势。</p>\n<p>对于具体实现部分的配置还是由实现框架本身管理，比如Logback对应的logback.xml文件。</p>\n<p>大部分日志的输出一般会对应两部分，一部分是stdout，一部分是日志文件。</p>\n<p>对于大规模部署的云原生应用，直接输出到stdout，然后从docker中收集日志也是一个不错的选择的。</p>\n<p>市面上日志聚合和搜索平台实在太多，有部分需要从代码层面做出修改，但是最简单的办法还是从日志实现本身入手。比如<br>loggly 提供了对于logback的支持。</p>\n<p>只需要在配置加上对应的appender即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;</div><div class=\"line\">        &lt;encoder&gt;</div><div class=\"line\">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">        &lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    &lt;appender name=\"loggly\" class=\"ch.qos.logback.ext.loggly.LogglyAppender\"&gt;</div><div class=\"line\">        &lt;endpointUrl&gt;http://logs-01.loggly.com/inputs/[your secret key]/tag/logback&lt;/endpointUrl&gt;</div><div class=\"line\">        &lt;pattern&gt;%d&#123;\"ISO8601\", UTC&#125; %p %t %c&#123;0&#125;.%M - %m%n&lt;/pattern&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    &lt;appender name=\"loggly-async\" class=\"ch.qos.logback.classic.AsyncAppender\"&gt;</div><div class=\"line\">        &lt;appender-ref ref=\"loggly\" /&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    &lt;root level=\"info\"&gt;</div><div class=\"line\">        &lt;appender-ref ref=\"loggly-async\" /&gt;</div><div class=\"line\">    &lt;/root&gt;</div><div class=\"line\">    &lt;root level=\"ERROR\"&gt;</div><div class=\"line\">        &lt;appender-ref ref=\"STDOUT\"/&gt;</div><div class=\"line\">    &lt;/root&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>效果如下图<br>DashBoard<br>Search</p>\n<p>日志对于应用程序的重要性不言而喻，社区也有各种各样的日志框架。</p>\n<p>Spring Boot从实现上不一依赖于任何日志框架的实现，只有对于common-logging API的依赖，对应的抽象实现是 LoggingSystem 。</p>\n<p>依靠这一层的抽象，对于日志等级的配置可以完全在Spring Boot中实现，比如 application.properties 中<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">logging.level.org.springframework.web=INFO</div><div class=\"line\">logging.level.org.hibernate=DEBUG</div></pre></td></tr></table></figure></p>"},{"title":"SSH框架总结（框架分析+环境搭建+实例源码下载）","date":"2015-02-06T06:58:57.000Z","_content":"首先，SSH不是一个框架，而是多个框架（struts+spring+hibernate）的集成，是目前较流行的一种Web应用程序开源集成框架，用于构建灵活、易于扩展的多层Web应用程序。\n \n集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层（实体层）。\n \nStruts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，控制业务跳转，利用Hibernate框架对持久层提供支持。Spring一方面作为一个轻量级的IoC容器，负责查找、定位、创建和管理对象及对象之间的依赖关系，另一方面能使Struts和Hibernate更好地工作。\n<!-- more -->\n![](http://img.my.csdn.net/uploads/201304/15/1366010139_2255.png)\n由SSH构建系统的基本业务流程是：\n1、在表示层中，首先通过JSP页面实现交互界面，负责传送请求(Request)和接收响应(Response)，然后Struts根据配置文件(struts-config.xml)将ActionServlet接收到的Request委派给相应的Action处理。\n2、在业务层中，管理服务组件的Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。\n3、在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。\n \n采用上述开发模型，不仅实现了视图、控制器与模型的彻底分离，而且还实现了业务逻辑层与持久层的分离。这样无论前端如何变化，模型层只需很少的改动，并且数据库的变化也不会对前端有所影响，大大提高了系统的可复用性。而且由于不同层之间耦合度小，有利于团队成员并行工作，大大提高了开发效率。\n \n \n下面我们再详细看一下组成SSH的这三个框架\n一、Spring\n1、什么是Spring？\n简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。\n \n2、Spring的特性\n![](http://img.my.csdn.net/uploads/201304/15/1366009800_5913.png)\n具体自己百度吧\n所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码\n \n3、为什么使用Spring？\nSpring的以上特性使得开发人员使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。\n \n二、Struts\n1、什么是Struts？\n它通过采用 Java Servlet/JSP 技术，实现了基于Java EEWeb应用的MVC设计模式的应用框架，是MVC经典设计模式中的一个经典产品。\n \n2、Struts1的核心构成\n![](http://img.my.csdn.net/uploads/201304/15/1366011574_3130.png)\n在 Struts1 中，由一个名为 ActionServlet 的 Servlet 充当 控制器(Controller)的角色，根据描述模型、视图、控制器对应关系的 struts-config.xml 的配置文件，转发视图(View)的请求，组装响应数据模型（Model）。\n \n在 MVC 的模型（Model）部分，经常划分为两个主要子系统（系统的内部数据状态与改变数据状态的逻辑动作），这两个概念子系统分别具体对应 Struts 1里的 ActionForm 与 Action 两个需要继承实现超类。在这里，Struts 1可以与各种标准的数据访问技术结合在一起，包括Enterprise Java Beans（EJB）, JDBC 与 JNDI。\n \n在 Struts 1的视图（View） 端，除了使用标准的JavaServer Pages（JSP）以外，还提供了大量的标签库使用，同时也可以与其他表现层组件技术（产品）进行整合，比如 Velocity Templates，XSLT 等。\n \n通过应用 Struts 的框架，最终用户可以把大部分的关注点放在自己的业务逻辑（Action）与 映射关系的配置文件（struts-config.xml）中。\n \n3、Struts1的基本执行流程\n详见《STRUTS基本工作流程》\n \n4、什么是struts2\nStruts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品\n \n5、strut2的体系结构\n![]()\n","source":"_posts/ssh-c.md","raw":"title: SSH框架总结（框架分析+环境搭建+实例源码下载）\ndate: 2015-02-06 14:58:57\ncategories: 技术\ntag: ssh\n----\n首先，SSH不是一个框架，而是多个框架（struts+spring+hibernate）的集成，是目前较流行的一种Web应用程序开源集成框架，用于构建灵活、易于扩展的多层Web应用程序。\n \n集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层（实体层）。\n \nStruts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，控制业务跳转，利用Hibernate框架对持久层提供支持。Spring一方面作为一个轻量级的IoC容器，负责查找、定位、创建和管理对象及对象之间的依赖关系，另一方面能使Struts和Hibernate更好地工作。\n<!-- more -->\n![](http://img.my.csdn.net/uploads/201304/15/1366010139_2255.png)\n由SSH构建系统的基本业务流程是：\n1、在表示层中，首先通过JSP页面实现交互界面，负责传送请求(Request)和接收响应(Response)，然后Struts根据配置文件(struts-config.xml)将ActionServlet接收到的Request委派给相应的Action处理。\n2、在业务层中，管理服务组件的Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。\n3、在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。\n \n采用上述开发模型，不仅实现了视图、控制器与模型的彻底分离，而且还实现了业务逻辑层与持久层的分离。这样无论前端如何变化，模型层只需很少的改动，并且数据库的变化也不会对前端有所影响，大大提高了系统的可复用性。而且由于不同层之间耦合度小，有利于团队成员并行工作，大大提高了开发效率。\n \n \n下面我们再详细看一下组成SSH的这三个框架\n一、Spring\n1、什么是Spring？\n简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。\n \n2、Spring的特性\n![](http://img.my.csdn.net/uploads/201304/15/1366009800_5913.png)\n具体自己百度吧\n所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码\n \n3、为什么使用Spring？\nSpring的以上特性使得开发人员使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。\n \n二、Struts\n1、什么是Struts？\n它通过采用 Java Servlet/JSP 技术，实现了基于Java EEWeb应用的MVC设计模式的应用框架，是MVC经典设计模式中的一个经典产品。\n \n2、Struts1的核心构成\n![](http://img.my.csdn.net/uploads/201304/15/1366011574_3130.png)\n在 Struts1 中，由一个名为 ActionServlet 的 Servlet 充当 控制器(Controller)的角色，根据描述模型、视图、控制器对应关系的 struts-config.xml 的配置文件，转发视图(View)的请求，组装响应数据模型（Model）。\n \n在 MVC 的模型（Model）部分，经常划分为两个主要子系统（系统的内部数据状态与改变数据状态的逻辑动作），这两个概念子系统分别具体对应 Struts 1里的 ActionForm 与 Action 两个需要继承实现超类。在这里，Struts 1可以与各种标准的数据访问技术结合在一起，包括Enterprise Java Beans（EJB）, JDBC 与 JNDI。\n \n在 Struts 1的视图（View） 端，除了使用标准的JavaServer Pages（JSP）以外，还提供了大量的标签库使用，同时也可以与其他表现层组件技术（产品）进行整合，比如 Velocity Templates，XSLT 等。\n \n通过应用 Struts 的框架，最终用户可以把大部分的关注点放在自己的业务逻辑（Action）与 映射关系的配置文件（struts-config.xml）中。\n \n3、Struts1的基本执行流程\n详见《STRUTS基本工作流程》\n \n4、什么是struts2\nStruts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品\n \n5、strut2的体系结构\n![]()\n","slug":"ssh-c","published":1,"updated":"2016-12-12T10:23:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3q001f2u6b9qpvge83","content":"<p>首先，SSH不是一个框架，而是多个框架（struts+spring+hibernate）的集成，是目前较流行的一种Web应用程序开源集成框架，用于构建灵活、易于扩展的多层Web应用程序。</p>\n<p>集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层（实体层）。</p>\n<p>Struts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，控制业务跳转，利用Hibernate框架对持久层提供支持。Spring一方面作为一个轻量级的IoC容器，负责查找、定位、创建和管理对象及对象之间的依赖关系，另一方面能使Struts和Hibernate更好地工作。<br><a id=\"more\"></a><br><img src=\"http://img.my.csdn.net/uploads/201304/15/1366010139_2255.png\" alt=\"\"><br>由SSH构建系统的基本业务流程是：<br>1、在表示层中，首先通过JSP页面实现交互界面，负责传送请求(Request)和接收响应(Response)，然后Struts根据配置文件(struts-config.xml)将ActionServlet接收到的Request委派给相应的Action处理。<br>2、在业务层中，管理服务组件的Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。<br>3、在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。</p>\n<p>采用上述开发模型，不仅实现了视图、控制器与模型的彻底分离，而且还实现了业务逻辑层与持久层的分离。这样无论前端如何变化，模型层只需很少的改动，并且数据库的变化也不会对前端有所影响，大大提高了系统的可复用性。而且由于不同层之间耦合度小，有利于团队成员并行工作，大大提高了开发效率。</p>\n<p>下面我们再详细看一下组成SSH的这三个框架<br>一、Spring<br>1、什么是Spring？<br>简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。</p>\n<p>2、Spring的特性<br><img src=\"http://img.my.csdn.net/uploads/201304/15/1366009800_5913.png\" alt=\"\"><br>具体自己百度吧<br>所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码</p>\n<p>3、为什么使用Spring？<br>Spring的以上特性使得开发人员使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。</p>\n<p>二、Struts<br>1、什么是Struts？<br>它通过采用 Java Servlet/JSP 技术，实现了基于Java EEWeb应用的MVC设计模式的应用框架，是MVC经典设计模式中的一个经典产品。</p>\n<p>2、Struts1的核心构成<br><img src=\"http://img.my.csdn.net/uploads/201304/15/1366011574_3130.png\" alt=\"\"><br>在 Struts1 中，由一个名为 ActionServlet 的 Servlet 充当 控制器(Controller)的角色，根据描述模型、视图、控制器对应关系的 struts-config.xml 的配置文件，转发视图(View)的请求，组装响应数据模型（Model）。</p>\n<p>在 MVC 的模型（Model）部分，经常划分为两个主要子系统（系统的内部数据状态与改变数据状态的逻辑动作），这两个概念子系统分别具体对应 Struts 1里的 ActionForm 与 Action 两个需要继承实现超类。在这里，Struts 1可以与各种标准的数据访问技术结合在一起，包括Enterprise Java Beans（EJB）, JDBC 与 JNDI。</p>\n<p>在 Struts 1的视图（View） 端，除了使用标准的JavaServer Pages（JSP）以外，还提供了大量的标签库使用，同时也可以与其他表现层组件技术（产品）进行整合，比如 Velocity Templates，XSLT 等。</p>\n<p>通过应用 Struts 的框架，最终用户可以把大部分的关注点放在自己的业务逻辑（Action）与 映射关系的配置文件（struts-config.xml）中。</p>\n<p>3、Struts1的基本执行流程<br>详见《STRUTS基本工作流程》</p>\n<p>4、什么是struts2<br>Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品</p>\n<p>5、strut2的体系结构<br><img src=\"\" alt=\"\"></p>\n","excerpt":"<p>首先，SSH不是一个框架，而是多个框架（struts+spring+hibernate）的集成，是目前较流行的一种Web应用程序开源集成框架，用于构建灵活、易于扩展的多层Web应用程序。</p>\n<p>集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层（实体层）。</p>\n<p>Struts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，控制业务跳转，利用Hibernate框架对持久层提供支持。Spring一方面作为一个轻量级的IoC容器，负责查找、定位、创建和管理对象及对象之间的依赖关系，另一方面能使Struts和Hibernate更好地工作。<br>","more":"<br><img src=\"http://img.my.csdn.net/uploads/201304/15/1366010139_2255.png\" alt=\"\"><br>由SSH构建系统的基本业务流程是：<br>1、在表示层中，首先通过JSP页面实现交互界面，负责传送请求(Request)和接收响应(Response)，然后Struts根据配置文件(struts-config.xml)将ActionServlet接收到的Request委派给相应的Action处理。<br>2、在业务层中，管理服务组件的Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。<br>3、在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。</p>\n<p>采用上述开发模型，不仅实现了视图、控制器与模型的彻底分离，而且还实现了业务逻辑层与持久层的分离。这样无论前端如何变化，模型层只需很少的改动，并且数据库的变化也不会对前端有所影响，大大提高了系统的可复用性。而且由于不同层之间耦合度小，有利于团队成员并行工作，大大提高了开发效率。</p>\n<p>下面我们再详细看一下组成SSH的这三个框架<br>一、Spring<br>1、什么是Spring？<br>简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。</p>\n<p>2、Spring的特性<br><img src=\"http://img.my.csdn.net/uploads/201304/15/1366009800_5913.png\" alt=\"\"><br>具体自己百度吧<br>所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码</p>\n<p>3、为什么使用Spring？<br>Spring的以上特性使得开发人员使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。</p>\n<p>二、Struts<br>1、什么是Struts？<br>它通过采用 Java Servlet/JSP 技术，实现了基于Java EEWeb应用的MVC设计模式的应用框架，是MVC经典设计模式中的一个经典产品。</p>\n<p>2、Struts1的核心构成<br><img src=\"http://img.my.csdn.net/uploads/201304/15/1366011574_3130.png\" alt=\"\"><br>在 Struts1 中，由一个名为 ActionServlet 的 Servlet 充当 控制器(Controller)的角色，根据描述模型、视图、控制器对应关系的 struts-config.xml 的配置文件，转发视图(View)的请求，组装响应数据模型（Model）。</p>\n<p>在 MVC 的模型（Model）部分，经常划分为两个主要子系统（系统的内部数据状态与改变数据状态的逻辑动作），这两个概念子系统分别具体对应 Struts 1里的 ActionForm 与 Action 两个需要继承实现超类。在这里，Struts 1可以与各种标准的数据访问技术结合在一起，包括Enterprise Java Beans（EJB）, JDBC 与 JNDI。</p>\n<p>在 Struts 1的视图（View） 端，除了使用标准的JavaServer Pages（JSP）以外，还提供了大量的标签库使用，同时也可以与其他表现层组件技术（产品）进行整合，比如 Velocity Templates，XSLT 等。</p>\n<p>通过应用 Struts 的框架，最终用户可以把大部分的关注点放在自己的业务逻辑（Action）与 映射关系的配置文件（struts-config.xml）中。</p>\n<p>3、Struts1的基本执行流程<br>详见《STRUTS基本工作流程》</p>\n<p>4、什么是struts2<br>Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品</p>\n<p>5、strut2的体系结构<br><img src=\"\" alt=\"\"></p>"},{"title":"JAVA 通过SSH访问Windows（或Linux）服务器","date":"2015-01-15T01:53:29.000Z","_content":"问题：工作中每次制作版本，需要远程登录到windows桌面去手动执行perl脚本，然后将执行结果取回到本地。来来回回瞎折腾每次都会浪费很多时间。\n思考：是否能在本地通过java去访问远程windows客户端，自动执行相应脚本并且自动返回相应结果。\n解决思路：开源包Ganymed.jar http://www.cleondris.ch/opensource/ssh2/ 网上已经有很多关于这个开源项目的使用说明了，比如这里，和这里。\n<!-- more -->\n\n大笑本人的解决办法：\n一、由于是远程连接Windows，所以需要在Windows客户端安装SSH的客户端（FreeSSHd，上文已提到。其他也有很多优秀的SSH客户端，我就不提了）。需要注意的几点：\n①FreeSSHd这玩意儿不支持中文，各种乱码。。尼玛。。\n②默认端口是21。\n③建用户用SHA1建就好，输入用户名密码搞定（为了使用权限，我使用的是NT，域用户登录）。\n④本人用Xshell测试与SSH的连接。\n二、Java代码：\n\n[java] view plaincopyprint?\npackage\tcom.sxy.remote;\t \n\nimport java.io.BufferedReader;\t\nimport java.io.IOException;  \nimport java.io.InputStream;  \nimport java.io.InputStreamReader;  \nimport com.sxy.view.MainForm;  \nimport ch.ethz.ssh2.Connection;\t \nimport ch.ethz.ssh2.Session;  \nimport ch.ethz.ssh2.StreamGobbler;  \n\npublic class Remote {  \n\n/** \n* @author sxy 2012年11月7日20:17:35 \n*/  \n\nprivate Connection conn=null;  \n\n/** \n* 初始化\t\n* @param hostName \n* @param hostPort \n*/  \npublic Remote(String hostName,int hostPort)   \n{  \nMainForm.getInstance().setConnection(hostName, hostPort);  \nconn=MainForm.getInstance().getConnection();  \nconn.addConnectionMonitor(new RemoteMonitor(hostName,hostPort));  \n}  \n\n/**\t\n* 连接服务器\t\n* @param userName \n* @param passWord \n* @return \n* @throws Exception \n*/\t\npublic Boolean connect(String userName,String passWord) throws Exception  \n{\t  \nconn.connect();\t \nreturn conn.authenticateWithPassword(userName, passWord);  \n}  \n\n/** \n*执行命令 \n* @param conn \n* @param command \n*\t@return\t\n*/  \npublic static String execComand(Connection conn,String command)\t \n{  \nStringBuffer response=new StringBuffer();  \n\nif(conn!=null)  \n{  \ntry   \n{  \nSession sess=conn.openSession();  \nsess.execCommand(command);  \n\nInputStream stdout = new StreamGobbler(sess.getStdout());  \n@SuppressWarnings(\"resource\")\t \nBufferedReader br = new BufferedReader(new InputStreamReader(stdout));  \n\nwhile(true)  \n{  \nString line\t= br.readLine();  \nif(line==null)\t \n{  \nbreak;  \n}\t \nresponse.append(line+\"\\n\");\t \n}\t  \n\nInteger execResult=sess.getExitStatus();  \nSystem.out.println(execResult==null?\"执行结果：Null\":(execResult.intValue()==0?\"执行结果：成功\":\"执行结果：失败\"));  \nsess.close();\t \n}\t  \ncatch\t(IOException e)\t \n{\t \ne.printStackTrace();  \n}\t\t\n}  \n\nreturn response.toString();\t \n}  \n}  \n三、调用：\n[java] view plaincopyprint?\npackage\tcom.sxy.test;\nimport com.sxy.remote.Remote;\nimport com.sxy.view.BaseFrame;\nimport com.sxy.view.MainForm;\npublic class TestConnection {\n/** \n* 测试 \n* @param args \n*/  \npublic static void main(String[] args)\t \n{  \nBaseFrame bf=MainForm.getInstance();  \n\ntry\t \n{\t\t  \nString hostName=\"127.0.0.1\";  \nint\tport=222;  \nString userName=\"sxy\";\t\nString passWord=\"jjj\";  \n\nif(new Remote(hostName,port).connect(userName, passWord))  \n{  \nSystem.out.println(\"登录成功啦\");  \n}  \nelse  \n{\t \nSystem.out.println(\"登录失败\");\t\n}  \n\nString command=\"C:\\\\Users\\\\sxy\\\\Desktop\\\\test.bat 参数1\t参数2\";\t  \nString response=Remote.execComand(bf.getConnection(), command);  \nSystem.out.println(response);  \n\nbf.getConnection().close();\t \n}\t\ncatch (Exception e)\t  \n{  \ne.printStackTrace();  \n}\t  \n}  \n}\n其实还可以调用远程端的一个.class文件，通过该文件去执行bat文件。\n[java] view plaincopyprint?\nString command=”java -classpath\t.;C:\\Users\\sxy\\Desktop Test 参数1 参数2”;\nTest.class：\n[java] view plaincopyprint?\nimport java.io.IOException;\npublic class Test {\n/** \n* @param\targs \n*/\t\npublic static void main(String[] args) {  \n// TODO\tAuto-generated method stub  \n\n//System.out.println(\"参数1:\"+args[0]+\"参数2:\"+args[1]);  \n\nString tesingBatPath=\"C:\\\\Users\\\\sxy\\\\Desktop\\\\123.BAT \"+args[0]+\"\t\"+args[1];  \ntry   \n{\t\nRuntime.getRuntime().exec(\"cmd\t/c start \"+tesingBatPath);  \nSystem.out.println(tesingBatPath+\"\t  执行成功\");  \n}\t \ncatch (IOException\te1)  \n{\t\ne1.printStackTrace();\t\n}  \n\n}  \n}\n","source":"_posts/ssh-linux-windows.md","raw":"title: JAVA 通过SSH访问Windows（或Linux）服务器\ndate: 2015-01-15 09:53:29\ncategories: 技术\ntags: ssh\n---\n问题：工作中每次制作版本，需要远程登录到windows桌面去手动执行perl脚本，然后将执行结果取回到本地。来来回回瞎折腾每次都会浪费很多时间。\n思考：是否能在本地通过java去访问远程windows客户端，自动执行相应脚本并且自动返回相应结果。\n解决思路：开源包Ganymed.jar http://www.cleondris.ch/opensource/ssh2/ 网上已经有很多关于这个开源项目的使用说明了，比如这里，和这里。\n<!-- more -->\n\n大笑本人的解决办法：\n一、由于是远程连接Windows，所以需要在Windows客户端安装SSH的客户端（FreeSSHd，上文已提到。其他也有很多优秀的SSH客户端，我就不提了）。需要注意的几点：\n①FreeSSHd这玩意儿不支持中文，各种乱码。。尼玛。。\n②默认端口是21。\n③建用户用SHA1建就好，输入用户名密码搞定（为了使用权限，我使用的是NT，域用户登录）。\n④本人用Xshell测试与SSH的连接。\n二、Java代码：\n\n[java] view plaincopyprint?\npackage\tcom.sxy.remote;\t \n\nimport java.io.BufferedReader;\t\nimport java.io.IOException;  \nimport java.io.InputStream;  \nimport java.io.InputStreamReader;  \nimport com.sxy.view.MainForm;  \nimport ch.ethz.ssh2.Connection;\t \nimport ch.ethz.ssh2.Session;  \nimport ch.ethz.ssh2.StreamGobbler;  \n\npublic class Remote {  \n\n/** \n* @author sxy 2012年11月7日20:17:35 \n*/  \n\nprivate Connection conn=null;  \n\n/** \n* 初始化\t\n* @param hostName \n* @param hostPort \n*/  \npublic Remote(String hostName,int hostPort)   \n{  \nMainForm.getInstance().setConnection(hostName, hostPort);  \nconn=MainForm.getInstance().getConnection();  \nconn.addConnectionMonitor(new RemoteMonitor(hostName,hostPort));  \n}  \n\n/**\t\n* 连接服务器\t\n* @param userName \n* @param passWord \n* @return \n* @throws Exception \n*/\t\npublic Boolean connect(String userName,String passWord) throws Exception  \n{\t  \nconn.connect();\t \nreturn conn.authenticateWithPassword(userName, passWord);  \n}  \n\n/** \n*执行命令 \n* @param conn \n* @param command \n*\t@return\t\n*/  \npublic static String execComand(Connection conn,String command)\t \n{  \nStringBuffer response=new StringBuffer();  \n\nif(conn!=null)  \n{  \ntry   \n{  \nSession sess=conn.openSession();  \nsess.execCommand(command);  \n\nInputStream stdout = new StreamGobbler(sess.getStdout());  \n@SuppressWarnings(\"resource\")\t \nBufferedReader br = new BufferedReader(new InputStreamReader(stdout));  \n\nwhile(true)  \n{  \nString line\t= br.readLine();  \nif(line==null)\t \n{  \nbreak;  \n}\t \nresponse.append(line+\"\\n\");\t \n}\t  \n\nInteger execResult=sess.getExitStatus();  \nSystem.out.println(execResult==null?\"执行结果：Null\":(execResult.intValue()==0?\"执行结果：成功\":\"执行结果：失败\"));  \nsess.close();\t \n}\t  \ncatch\t(IOException e)\t \n{\t \ne.printStackTrace();  \n}\t\t\n}  \n\nreturn response.toString();\t \n}  \n}  \n三、调用：\n[java] view plaincopyprint?\npackage\tcom.sxy.test;\nimport com.sxy.remote.Remote;\nimport com.sxy.view.BaseFrame;\nimport com.sxy.view.MainForm;\npublic class TestConnection {\n/** \n* 测试 \n* @param args \n*/  \npublic static void main(String[] args)\t \n{  \nBaseFrame bf=MainForm.getInstance();  \n\ntry\t \n{\t\t  \nString hostName=\"127.0.0.1\";  \nint\tport=222;  \nString userName=\"sxy\";\t\nString passWord=\"jjj\";  \n\nif(new Remote(hostName,port).connect(userName, passWord))  \n{  \nSystem.out.println(\"登录成功啦\");  \n}  \nelse  \n{\t \nSystem.out.println(\"登录失败\");\t\n}  \n\nString command=\"C:\\\\Users\\\\sxy\\\\Desktop\\\\test.bat 参数1\t参数2\";\t  \nString response=Remote.execComand(bf.getConnection(), command);  \nSystem.out.println(response);  \n\nbf.getConnection().close();\t \n}\t\ncatch (Exception e)\t  \n{  \ne.printStackTrace();  \n}\t  \n}  \n}\n其实还可以调用远程端的一个.class文件，通过该文件去执行bat文件。\n[java] view plaincopyprint?\nString command=”java -classpath\t.;C:\\Users\\sxy\\Desktop Test 参数1 参数2”;\nTest.class：\n[java] view plaincopyprint?\nimport java.io.IOException;\npublic class Test {\n/** \n* @param\targs \n*/\t\npublic static void main(String[] args) {  \n// TODO\tAuto-generated method stub  \n\n//System.out.println(\"参数1:\"+args[0]+\"参数2:\"+args[1]);  \n\nString tesingBatPath=\"C:\\\\Users\\\\sxy\\\\Desktop\\\\123.BAT \"+args[0]+\"\t\"+args[1];  \ntry   \n{\t\nRuntime.getRuntime().exec(\"cmd\t/c start \"+tesingBatPath);  \nSystem.out.println(tesingBatPath+\"\t  执行成功\");  \n}\t \ncatch (IOException\te1)  \n{\t\ne1.printStackTrace();\t\n}  \n\n}  \n}\n","slug":"ssh-linux-windows","published":1,"updated":"2016-12-12T10:23:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3s001h2u6brgd73bdq","content":"<p>问题：工作中每次制作版本，需要远程登录到windows桌面去手动执行perl脚本，然后将执行结果取回到本地。来来回回瞎折腾每次都会浪费很多时间。<br>思考：是否能在本地通过java去访问远程windows客户端，自动执行相应脚本并且自动返回相应结果。<br>解决思路：开源包Ganymed.jar <a href=\"http://www.cleondris.ch/opensource/ssh2/\" target=\"_blank\" rel=\"external\">http://www.cleondris.ch/opensource/ssh2/</a> 网上已经有很多关于这个开源项目的使用说明了，比如这里，和这里。<br><a id=\"more\"></a></p>\n<p>大笑本人的解决办法：<br>一、由于是远程连接Windows，所以需要在Windows客户端安装SSH的客户端（FreeSSHd，上文已提到。其他也有很多优秀的SSH客户端，我就不提了）。需要注意的几点：<br>①FreeSSHd这玩意儿不支持中文，各种乱码。。尼玛。。<br>②默认端口是21。<br>③建用户用SHA1建就好，输入用户名密码搞定（为了使用权限，我使用的是NT，域用户登录）。<br>④本人用Xshell测试与SSH的连接。<br>二、Java代码：</p>\n<p>[java] view plaincopyprint?<br>package    com.sxy.remote;     </p>\n<p>import java.io.BufferedReader;<br>import java.io.IOException;<br>import java.io.InputStream;<br>import java.io.InputStreamReader;<br>import com.sxy.view.MainForm;<br>import ch.ethz.ssh2.Connection;<br>import ch.ethz.ssh2.Session;<br>import ch.ethz.ssh2.StreamGobbler;  </p>\n<p>public class Remote {  </p>\n<p>/** </p>\n<ul>\n<li>@author sxy 2012年11月7日20:17:35<br>*/  </li>\n</ul>\n<p>private Connection conn=null;  </p>\n<p>/** </p>\n<ul>\n<li>初始化    </li>\n<li>@param hostName </li>\n<li>@param hostPort<br>*/<br>public Remote(String hostName,int hostPort)<br>{<br>MainForm.getInstance().setConnection(hostName, hostPort);<br>conn=MainForm.getInstance().getConnection();<br>conn.addConnectionMonitor(new RemoteMonitor(hostName,hostPort));<br>}  </li>\n</ul>\n<p>/**    </p>\n<ul>\n<li>连接服务器    </li>\n<li>@param userName </li>\n<li>@param passWord </li>\n<li>@return </li>\n<li>@throws Exception<br>*/<br>public Boolean connect(String userName,String passWord) throws Exception<br>{<br>conn.connect();<br>return conn.authenticateWithPassword(userName, passWord);<br>}  </li>\n</ul>\n<p>/<em>* \n</em>执行命令 </p>\n<ul>\n<li>@param conn </li>\n<li>@param command </li>\n<li>@return<br>*/<br>public static String execComand(Connection conn,String command)<br>{<br>StringBuffer response=new StringBuffer();  </li>\n</ul>\n<p>if(conn!=null)<br>{<br>try<br>{<br>Session sess=conn.openSession();<br>sess.execCommand(command);  </p>\n<p>InputStream stdout = new StreamGobbler(sess.getStdout());<br>@SuppressWarnings(“resource”)<br>BufferedReader br = new BufferedReader(new InputStreamReader(stdout));  </p>\n<p>while(true)<br>{<br>String line    = br.readLine();<br>if(line==null)<br>{<br>break;<br>}<br>response.append(line+”\\n”);<br>}      </p>\n<p>Integer execResult=sess.getExitStatus();<br>System.out.println(execResult==null?”执行结果：Null”:(execResult.intValue()==0?”执行结果：成功”:”执行结果：失败”));<br>sess.close();<br>}<br>catch    (IOException e)<br>{<br>e.printStackTrace();<br>}<br>}  </p>\n<p>return response.toString();<br>}<br>}<br>三、调用：<br>[java] view plaincopyprint?<br>package    com.sxy.test;<br>import com.sxy.remote.Remote;<br>import com.sxy.view.BaseFrame;<br>import com.sxy.view.MainForm;<br>public class TestConnection {<br>/** </p>\n<ul>\n<li>测试 </li>\n<li>@param args<br>*/<br>public static void main(String[] args)<br>{<br>BaseFrame bf=MainForm.getInstance();  </li>\n</ul>\n<p>try<br>{<br>String hostName=”127.0.0.1”;<br>int    port=222;<br>String userName=”sxy”;<br>String passWord=”jjj”;  </p>\n<p>if(new Remote(hostName,port).connect(userName, passWord))<br>{<br>System.out.println(“登录成功啦”);<br>}<br>else<br>{<br>System.out.println(“登录失败”);<br>}  </p>\n<p>String command=”C:\\Users\\sxy\\Desktop\\test.bat 参数1    参数2”;<br>String response=Remote.execComand(bf.getConnection(), command);<br>System.out.println(response);  </p>\n<p>bf.getConnection().close();<br>}<br>catch (Exception e)<br>{<br>e.printStackTrace();<br>}<br>}<br>}<br>其实还可以调用远程端的一个.class文件，通过该文件去执行bat文件。<br>[java] view plaincopyprint?<br>String command=”java -classpath    .;C:\\Users\\sxy\\Desktop Test 参数1 参数2”;<br>Test.class：<br>[java] view plaincopyprint?<br>import java.io.IOException;<br>public class Test {<br>/** </p>\n<ul>\n<li>@param    args<br>*/<br>public static void main(String[] args) {<br>// TODO    Auto-generated method stub  </li>\n</ul>\n<p>//System.out.println(“参数1:”+args[0]+”参数2:”+args[1]);  </p>\n<p>String tesingBatPath=”C:\\Users\\sxy\\Desktop\\123.BAT “+args[0]+”    “+args[1];<br>try<br>{<br>Runtime.getRuntime().exec(“cmd    /c start “+tesingBatPath);<br>System.out.println(tesingBatPath+”      执行成功”);<br>}<br>catch (IOException    e1)<br>{<br>e1.printStackTrace();<br>}  </p>\n<p>}<br>}</p>\n","excerpt":"<p>问题：工作中每次制作版本，需要远程登录到windows桌面去手动执行perl脚本，然后将执行结果取回到本地。来来回回瞎折腾每次都会浪费很多时间。<br>思考：是否能在本地通过java去访问远程windows客户端，自动执行相应脚本并且自动返回相应结果。<br>解决思路：开源包Ganymed.jar <a href=\"http://www.cleondris.ch/opensource/ssh2/\">http://www.cleondris.ch/opensource/ssh2/</a> 网上已经有很多关于这个开源项目的使用说明了，比如这里，和这里。<br>","more":"</p>\n<p>大笑本人的解决办法：<br>一、由于是远程连接Windows，所以需要在Windows客户端安装SSH的客户端（FreeSSHd，上文已提到。其他也有很多优秀的SSH客户端，我就不提了）。需要注意的几点：<br>①FreeSSHd这玩意儿不支持中文，各种乱码。。尼玛。。<br>②默认端口是21。<br>③建用户用SHA1建就好，输入用户名密码搞定（为了使用权限，我使用的是NT，域用户登录）。<br>④本人用Xshell测试与SSH的连接。<br>二、Java代码：</p>\n<p>[java] view plaincopyprint?<br>package    com.sxy.remote;     </p>\n<p>import java.io.BufferedReader;<br>import java.io.IOException;<br>import java.io.InputStream;<br>import java.io.InputStreamReader;<br>import com.sxy.view.MainForm;<br>import ch.ethz.ssh2.Connection;<br>import ch.ethz.ssh2.Session;<br>import ch.ethz.ssh2.StreamGobbler;  </p>\n<p>public class Remote {  </p>\n<p>/** </p>\n<ul>\n<li>@author sxy 2012年11月7日20:17:35<br>*/  </li>\n</ul>\n<p>private Connection conn=null;  </p>\n<p>/** </p>\n<ul>\n<li>初始化    </li>\n<li>@param hostName </li>\n<li>@param hostPort<br>*/<br>public Remote(String hostName,int hostPort)<br>{<br>MainForm.getInstance().setConnection(hostName, hostPort);<br>conn=MainForm.getInstance().getConnection();<br>conn.addConnectionMonitor(new RemoteMonitor(hostName,hostPort));<br>}  </li>\n</ul>\n<p>/**    </p>\n<ul>\n<li>连接服务器    </li>\n<li>@param userName </li>\n<li>@param passWord </li>\n<li>@return </li>\n<li>@throws Exception<br>*/<br>public Boolean connect(String userName,String passWord) throws Exception<br>{<br>conn.connect();<br>return conn.authenticateWithPassword(userName, passWord);<br>}  </li>\n</ul>\n<p>/<em>* \n</em>执行命令 </p>\n<ul>\n<li>@param conn </li>\n<li>@param command </li>\n<li>@return<br>*/<br>public static String execComand(Connection conn,String command)<br>{<br>StringBuffer response=new StringBuffer();  </li>\n</ul>\n<p>if(conn!=null)<br>{<br>try<br>{<br>Session sess=conn.openSession();<br>sess.execCommand(command);  </p>\n<p>InputStream stdout = new StreamGobbler(sess.getStdout());<br>@SuppressWarnings(“resource”)<br>BufferedReader br = new BufferedReader(new InputStreamReader(stdout));  </p>\n<p>while(true)<br>{<br>String line    = br.readLine();<br>if(line==null)<br>{<br>break;<br>}<br>response.append(line+”\\n”);<br>}      </p>\n<p>Integer execResult=sess.getExitStatus();<br>System.out.println(execResult==null?”执行结果：Null”:(execResult.intValue()==0?”执行结果：成功”:”执行结果：失败”));<br>sess.close();<br>}<br>catch    (IOException e)<br>{<br>e.printStackTrace();<br>}<br>}  </p>\n<p>return response.toString();<br>}<br>}<br>三、调用：<br>[java] view plaincopyprint?<br>package    com.sxy.test;<br>import com.sxy.remote.Remote;<br>import com.sxy.view.BaseFrame;<br>import com.sxy.view.MainForm;<br>public class TestConnection {<br>/** </p>\n<ul>\n<li>测试 </li>\n<li>@param args<br>*/<br>public static void main(String[] args)<br>{<br>BaseFrame bf=MainForm.getInstance();  </li>\n</ul>\n<p>try<br>{<br>String hostName=”127.0.0.1”;<br>int    port=222;<br>String userName=”sxy”;<br>String passWord=”jjj”;  </p>\n<p>if(new Remote(hostName,port).connect(userName, passWord))<br>{<br>System.out.println(“登录成功啦”);<br>}<br>else<br>{<br>System.out.println(“登录失败”);<br>}  </p>\n<p>String command=”C:\\Users\\sxy\\Desktop\\test.bat 参数1    参数2”;<br>String response=Remote.execComand(bf.getConnection(), command);<br>System.out.println(response);  </p>\n<p>bf.getConnection().close();<br>}<br>catch (Exception e)<br>{<br>e.printStackTrace();<br>}<br>}<br>}<br>其实还可以调用远程端的一个.class文件，通过该文件去执行bat文件。<br>[java] view plaincopyprint?<br>String command=”java -classpath    .;C:\\Users\\sxy\\Desktop Test 参数1 参数2”;<br>Test.class：<br>[java] view plaincopyprint?<br>import java.io.IOException;<br>public class Test {<br>/** </p>\n<ul>\n<li>@param    args<br>*/<br>public static void main(String[] args) {<br>// TODO    Auto-generated method stub  </li>\n</ul>\n<p>//System.out.println(“参数1:”+args[0]+”参数2:”+args[1]);  </p>\n<p>String tesingBatPath=”C:\\Users\\sxy\\Desktop\\123.BAT “+args[0]+”    “+args[1];<br>try<br>{<br>Runtime.getRuntime().exec(“cmd    /c start “+tesingBatPath);<br>System.out.println(tesingBatPath+”      执行成功”);<br>}<br>catch (IOException    e1)<br>{<br>e1.printStackTrace();<br>}  </p>\n<p>}<br>}</p>"},{"title":"ubuntu 16.04 amdgpu/radeon开源驱动怎么安装","date":"2016-11-19T01:53:29.000Z","_content":"AMD发布新版本时fglrx-updates驱动就会自动升级，但其实并不总是这样,因为Ubuntu的源的更新老是会有延迟。所以，你可以自己安装指定版本的专有驱动。\n　　准备开始吧，在终端敲入以下命令：\n　　``sudo apt-get install build-essential cdbs dh-make dkms execstack dh-modaliases linux-heade``\n　　如果你的Ubuntu是64位版本，你还需要这个命令：\n　　`sudo apt-get install lib32gcc1`\n<!-- more -->\n　　这两条命令为下一步创建驱动包部署了必需的环境。\n　　然后，去AMD的驱动页面，下载适合你显卡的驱动以及32或是64位的Ubuntu版本。下载完毕后，从 .zip文件中解压出 .run 文件，打开 .run文件的属性并将其设置为可执行。\n　　下一步，打开终端，使用 cd 命令进入 .run文件所在文件夹（比如 cd Downloads/ ），然后运行以下命令：\n　　`sudo sh ./amd-catalyst-version-here-and-such.run –buildpkg Ubuntu/raring`\n　　当然了你得把相应文件名替换进去。如果你使用的不是Ubuntu13.04，你需要用适当的名字替换掉 raring 。\n\n　　当这句命令完毕时你就得到了几个 .deb文件。接下来运行\n\n　　`sudo dpkg -i fglrx*.deb`\n　　这个命令会安装所有创建出来的包。完成后，你还得运行一个命令来正确安装新驱动：\n　　`sudo amdconfig –initial -f`\n　　现在重启电脑，一切搞定！如果你想升级驱动，只要重复以上步骤就好了，从下载驱动开始，到`sudo dpkg -i fglrx*.deb`。\n","source":"_posts/ubuntu-amd.md","raw":"title: ubuntu 16.04 amdgpu/radeon开源驱动怎么安装 \ndate: 2016-11-19 09:53:29\ncategories: 技术\ntags:\n - ubuntu\n - linux\n---\nAMD发布新版本时fglrx-updates驱动就会自动升级，但其实并不总是这样,因为Ubuntu的源的更新老是会有延迟。所以，你可以自己安装指定版本的专有驱动。\n　　准备开始吧，在终端敲入以下命令：\n　　``sudo apt-get install build-essential cdbs dh-make dkms execstack dh-modaliases linux-heade``\n　　如果你的Ubuntu是64位版本，你还需要这个命令：\n　　`sudo apt-get install lib32gcc1`\n<!-- more -->\n　　这两条命令为下一步创建驱动包部署了必需的环境。\n　　然后，去AMD的驱动页面，下载适合你显卡的驱动以及32或是64位的Ubuntu版本。下载完毕后，从 .zip文件中解压出 .run 文件，打开 .run文件的属性并将其设置为可执行。\n　　下一步，打开终端，使用 cd 命令进入 .run文件所在文件夹（比如 cd Downloads/ ），然后运行以下命令：\n　　`sudo sh ./amd-catalyst-version-here-and-such.run –buildpkg Ubuntu/raring`\n　　当然了你得把相应文件名替换进去。如果你使用的不是Ubuntu13.04，你需要用适当的名字替换掉 raring 。\n\n　　当这句命令完毕时你就得到了几个 .deb文件。接下来运行\n\n　　`sudo dpkg -i fglrx*.deb`\n　　这个命令会安装所有创建出来的包。完成后，你还得运行一个命令来正确安装新驱动：\n　　`sudo amdconfig –initial -f`\n　　现在重启电脑，一切搞定！如果你想升级驱动，只要重复以上步骤就好了，从下载驱动开始，到`sudo dpkg -i fglrx*.deb`。\n","slug":"ubuntu-amd","published":1,"updated":"2016-12-13T07:52:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3v001k2u6bblgimyz5","content":"<p>AMD发布新版本时fglrx-updates驱动就会自动升级，但其实并不总是这样,因为Ubuntu的源的更新老是会有延迟。所以，你可以自己安装指定版本的专有驱动。<br>　　准备开始吧，在终端敲入以下命令：<br>　　<code>sudo apt-get install build-essential cdbs dh-make dkms execstack dh-modaliases linux-heade</code><br>　　如果你的Ubuntu是64位版本，你还需要这个命令：<br>　　<code>sudo apt-get install lib32gcc1</code><br><a id=\"more\"></a><br>　　这两条命令为下一步创建驱动包部署了必需的环境。<br>　　然后，去AMD的驱动页面，下载适合你显卡的驱动以及32或是64位的Ubuntu版本。下载完毕后，从 .zip文件中解压出 .run 文件，打开 .run文件的属性并将其设置为可执行。<br>　　下一步，打开终端，使用 cd 命令进入 .run文件所在文件夹（比如 cd Downloads/ ），然后运行以下命令：<br>　　<code>sudo sh ./amd-catalyst-version-here-and-such.run –buildpkg Ubuntu/raring</code><br>　　当然了你得把相应文件名替换进去。如果你使用的不是Ubuntu13.04，你需要用适当的名字替换掉 raring 。</p>\n<p>　　当这句命令完毕时你就得到了几个 .deb文件。接下来运行</p>\n<p>　　<code>sudo dpkg -i fglrx*.deb</code><br>　　这个命令会安装所有创建出来的包。完成后，你还得运行一个命令来正确安装新驱动：<br>　　<code>sudo amdconfig –initial -f</code><br>　　现在重启电脑，一切搞定！如果你想升级驱动，只要重复以上步骤就好了，从下载驱动开始，到<code>sudo dpkg -i fglrx*.deb</code>。</p>\n","excerpt":"<p>AMD发布新版本时fglrx-updates驱动就会自动升级，但其实并不总是这样,因为Ubuntu的源的更新老是会有延迟。所以，你可以自己安装指定版本的专有驱动。<br>　　准备开始吧，在终端敲入以下命令：<br>　　<code>sudo apt-get install build-essential cdbs dh-make dkms execstack dh-modaliases linux-heade</code><br>　　如果你的Ubuntu是64位版本，你还需要这个命令：<br>　　<code>sudo apt-get install lib32gcc1</code><br>","more":"<br>　　这两条命令为下一步创建驱动包部署了必需的环境。<br>　　然后，去AMD的驱动页面，下载适合你显卡的驱动以及32或是64位的Ubuntu版本。下载完毕后，从 .zip文件中解压出 .run 文件，打开 .run文件的属性并将其设置为可执行。<br>　　下一步，打开终端，使用 cd 命令进入 .run文件所在文件夹（比如 cd Downloads/ ），然后运行以下命令：<br>　　<code>sudo sh ./amd-catalyst-version-here-and-such.run –buildpkg Ubuntu/raring</code><br>　　当然了你得把相应文件名替换进去。如果你使用的不是Ubuntu13.04，你需要用适当的名字替换掉 raring 。</p>\n<p>　　当这句命令完毕时你就得到了几个 .deb文件。接下来运行</p>\n<p>　　<code>sudo dpkg -i fglrx*.deb</code><br>　　这个命令会安装所有创建出来的包。完成后，你还得运行一个命令来正确安装新驱动：<br>　　<code>sudo amdconfig –initial -f</code><br>　　现在重启电脑，一切搞定！如果你想升级驱动，只要重复以上步骤就好了，从下载驱动开始，到<code>sudo dpkg -i fglrx*.deb</code>。</p>"},{"title":"如何将Windows 10 Build 9926版开始菜单改成之前的可调整大小的菜单","date":"2015-01-26T06:58:57.000Z","_content":"Windows 10 Build 9926对之前的开始菜单进行了更改，似乎现在的开始菜单更加方便和实用。\n\n不过你如果想改为之前的可以调整Metro程序大小的那种开始菜单，也可以，只需要导入一个注册表键值即可。\n\n国外开发者@Bavo Luysterborg在Twitter上分享通过修改注册表的方式来找回之前的开始菜单。\n<!-- more -->\n![d](http://imgcdn.landiannews.com/2015/01/14368-3.jpg)\n![](http://imgcdn.landiannews.com/2015/01/14368-1.jpg)\n方法如下：\n\n1.开始—运行—输入regedit  （即注册表）\n\n2.依次展开：HKEY_CURRENT_USER---Software----Microsoft---Windows----CurrentVersion----Explorer----Advanced\n\n3.鼠标放到Advanced上右键新建DWORD（32位），命名为EnableXamlStartMenu\n\n4.打开任务管理器–找到Windows 资源管理器并右键重新启动即可，如果你不知道如何重启资源管理器，那么直接重启电脑也可。\n\n为了各位方便使用，鸭子哥已经将该键值单独写入一个注册表文件，你可以点击下面的链接下载，下载后直接打开合并至注册表即可：\n\nAdvanced：http://xiazai.landiannews.com/files/2015/01/Advanced.reg\n\n或者，你也可以手动新建一个txt文本，复制粘贴以下内容并保存，将txt改成reg合并到注册表即可：\n\nWindows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced]\n\"EnableXamlStartMenu\"=dword:00000000\n\n如果你不想用了，可以再次到达这个路径并删除EnableXamlStartMenu这个键值并重启资源管理器即可。\n","source":"_posts/windows10-1.md","raw":"title: 如何将Windows 10 Build 9926版开始菜单改成之前的可调整大小的菜单\ndate: 2015-01-26 14:58:57\ncategories: 技术\ntags: windown10\n---\nWindows 10 Build 9926对之前的开始菜单进行了更改，似乎现在的开始菜单更加方便和实用。\n\n不过你如果想改为之前的可以调整Metro程序大小的那种开始菜单，也可以，只需要导入一个注册表键值即可。\n\n国外开发者@Bavo Luysterborg在Twitter上分享通过修改注册表的方式来找回之前的开始菜单。\n<!-- more -->\n![d](http://imgcdn.landiannews.com/2015/01/14368-3.jpg)\n![](http://imgcdn.landiannews.com/2015/01/14368-1.jpg)\n方法如下：\n\n1.开始—运行—输入regedit  （即注册表）\n\n2.依次展开：HKEY_CURRENT_USER---Software----Microsoft---Windows----CurrentVersion----Explorer----Advanced\n\n3.鼠标放到Advanced上右键新建DWORD（32位），命名为EnableXamlStartMenu\n\n4.打开任务管理器–找到Windows 资源管理器并右键重新启动即可，如果你不知道如何重启资源管理器，那么直接重启电脑也可。\n\n为了各位方便使用，鸭子哥已经将该键值单独写入一个注册表文件，你可以点击下面的链接下载，下载后直接打开合并至注册表即可：\n\nAdvanced：http://xiazai.landiannews.com/files/2015/01/Advanced.reg\n\n或者，你也可以手动新建一个txt文本，复制粘贴以下内容并保存，将txt改成reg合并到注册表即可：\n\nWindows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced]\n\"EnableXamlStartMenu\"=dword:00000000\n\n如果你不想用了，可以再次到达这个路径并删除EnableXamlStartMenu这个键值并重启资源管理器即可。\n","slug":"windows10-1","published":1,"updated":"2016-12-12T10:23:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc3y001n2u6bmu6enoyf","content":"<p>Windows 10 Build 9926对之前的开始菜单进行了更改，似乎现在的开始菜单更加方便和实用。</p>\n<p>不过你如果想改为之前的可以调整Metro程序大小的那种开始菜单，也可以，只需要导入一个注册表键值即可。</p>\n<p>国外开发者@Bavo Luysterborg在Twitter上分享通过修改注册表的方式来找回之前的开始菜单。<br><a id=\"more\"></a><br><img src=\"http://imgcdn.landiannews.com/2015/01/14368-3.jpg\" alt=\"d\"><br><img src=\"http://imgcdn.landiannews.com/2015/01/14368-1.jpg\" alt=\"\"><br>方法如下：</p>\n<p>1.开始—运行—输入regedit  （即注册表）</p>\n<p>2.依次展开：HKEY_CURRENT_USER—Software—-Microsoft—Windows—-CurrentVersion—-Explorer—-Advanced</p>\n<p>3.鼠标放到Advanced上右键新建DWORD（32位），命名为EnableXamlStartMenu</p>\n<p>4.打开任务管理器–找到Windows 资源管理器并右键重新启动即可，如果你不知道如何重启资源管理器，那么直接重启电脑也可。</p>\n<p>为了各位方便使用，鸭子哥已经将该键值单独写入一个注册表文件，你可以点击下面的链接下载，下载后直接打开合并至注册表即可：</p>\n<p>Advanced：<a href=\"http://xiazai.landiannews.com/files/2015/01/Advanced.reg\" target=\"_blank\" rel=\"external\">http://xiazai.landiannews.com/files/2015/01/Advanced.reg</a></p>\n<p>或者，你也可以手动新建一个txt文本，复制粘贴以下内容并保存，将txt改成reg合并到注册表即可：</p>\n<p>Windows Registry Editor Version 5.00</p>\n<p>[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced]<br>“EnableXamlStartMenu”=dword:00000000</p>\n<p>如果你不想用了，可以再次到达这个路径并删除EnableXamlStartMenu这个键值并重启资源管理器即可。</p>\n","excerpt":"<p>Windows 10 Build 9926对之前的开始菜单进行了更改，似乎现在的开始菜单更加方便和实用。</p>\n<p>不过你如果想改为之前的可以调整Metro程序大小的那种开始菜单，也可以，只需要导入一个注册表键值即可。</p>\n<p>国外开发者@Bavo Luysterborg在Twitter上分享通过修改注册表的方式来找回之前的开始菜单。<br>","more":"<br><img src=\"http://imgcdn.landiannews.com/2015/01/14368-3.jpg\" alt=\"d\"><br><img src=\"http://imgcdn.landiannews.com/2015/01/14368-1.jpg\" alt=\"\"><br>方法如下：</p>\n<p>1.开始—运行—输入regedit  （即注册表）</p>\n<p>2.依次展开：HKEY_CURRENT_USER—Software—-Microsoft—Windows—-CurrentVersion—-Explorer—-Advanced</p>\n<p>3.鼠标放到Advanced上右键新建DWORD（32位），命名为EnableXamlStartMenu</p>\n<p>4.打开任务管理器–找到Windows 资源管理器并右键重新启动即可，如果你不知道如何重启资源管理器，那么直接重启电脑也可。</p>\n<p>为了各位方便使用，鸭子哥已经将该键值单独写入一个注册表文件，你可以点击下面的链接下载，下载后直接打开合并至注册表即可：</p>\n<p>Advanced：<a href=\"http://xiazai.landiannews.com/files/2015/01/Advanced.reg\">http://xiazai.landiannews.com/files/2015/01/Advanced.reg</a></p>\n<p>或者，你也可以手动新建一个txt文本，复制粘贴以下内容并保存，将txt改成reg合并到注册表即可：</p>\n<p>Windows Registry Editor Version 5.00</p>\n<p>[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced]<br>“EnableXamlStartMenu”=dword:00000000</p>\n<p>如果你不想用了，可以再次到达这个路径并删除EnableXamlStartMenu这个键值并重启资源管理器即可。</p>"},{"title":"每天对自己说一句话","date":"2013-12-14T08:53:29.000Z","_content":"1.无论生活多么的艰辛，都要坚持下去，因为不坚持就看不到所谓的希望。---- 2013-12-14 16:57:29\n2.心胸开阔，眼看远方，心系家人，做好自己。---- 2013-12-15 09:37:33\n3.当不开心的时候，笑一笑，心里的不开心就过去了。---- 2013-12-16 11:30:28\n4.阳光每天都会有，只要没有遮住光芒的云朵在，一起都会好起来。 ---- 2013-12-17 14:24:26\n5.时间会冲淡一切事情，也会沉淀心里的悲伤，所谓的化悲伤为力量。---- 2013-12-18 12:34:12<!-- more -->\n6.不要在生气的时候说很多的话，不要在难过的时候做决定，不要在开心的时候许下承诺。---- 2013-12-19 13:33:45\n7.反省自己所做的每件事情，才知道自己有多么的愚蠢。---- 2013-12-20 09:46:12\n8.当一切都很不公平时,这便是一切的开始了.  ----- 2015-06-09 15:49:09\n9.无论现在的生活怎么惨淡，也不要用健康换取财富，因为财富总会来临，只要不停的努力。 ---- 2016-12-21 17:49:12\n10.\n","source":"_posts/word-of-the-day.md","raw":"title: 每天对自己说一句话\ndate: 2013-12-14 16:53:29\ncategories: 随感\ntags: days\n---\n1.无论生活多么的艰辛，都要坚持下去，因为不坚持就看不到所谓的希望。---- 2013-12-14 16:57:29\n2.心胸开阔，眼看远方，心系家人，做好自己。---- 2013-12-15 09:37:33\n3.当不开心的时候，笑一笑，心里的不开心就过去了。---- 2013-12-16 11:30:28\n4.阳光每天都会有，只要没有遮住光芒的云朵在，一起都会好起来。 ---- 2013-12-17 14:24:26\n5.时间会冲淡一切事情，也会沉淀心里的悲伤，所谓的化悲伤为力量。---- 2013-12-18 12:34:12<!-- more -->\n6.不要在生气的时候说很多的话，不要在难过的时候做决定，不要在开心的时候许下承诺。---- 2013-12-19 13:33:45\n7.反省自己所做的每件事情，才知道自己有多么的愚蠢。---- 2013-12-20 09:46:12\n8.当一切都很不公平时,这便是一切的开始了.  ----- 2015-06-09 15:49:09\n9.无论现在的生活怎么惨淡，也不要用健康换取财富，因为财富总会来临，只要不停的努力。 ---- 2016-12-21 17:49:12\n10.\n","slug":"word-of-the-day","published":1,"updated":"2016-12-21T09:45:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc41001r2u6bxn48uem1","content":"<p>1.无论生活多么的艰辛，都要坚持下去，因为不坚持就看不到所谓的希望。—- 2013-12-14 16:57:29<br>2.心胸开阔，眼看远方，心系家人，做好自己。—- 2013-12-15 09:37:33<br>3.当不开心的时候，笑一笑，心里的不开心就过去了。—- 2013-12-16 11:30:28<br>4.阳光每天都会有，只要没有遮住光芒的云朵在，一起都会好起来。 —- 2013-12-17 14:24:26<br>5.时间会冲淡一切事情，也会沉淀心里的悲伤，所谓的化悲伤为力量。—- 2013-12-18 12:34:12<a id=\"more\"></a><br>6.不要在生气的时候说很多的话，不要在难过的时候做决定，不要在开心的时候许下承诺。—- 2013-12-19 13:33:45<br>7.反省自己所做的每件事情，才知道自己有多么的愚蠢。—- 2013-12-20 09:46:12<br>8.当一切都很不公平时,这便是一切的开始了.  —– 2015-06-09 15:49:09<br>9.无论现在的生活怎么惨淡，也不要用健康换取财富，因为财富总会来临，只要不停的努力。 —- 2016-12-21 17:49:12<br>10.</p>\n","excerpt":"<p>1.无论生活多么的艰辛，都要坚持下去，因为不坚持就看不到所谓的希望。—- 2013-12-14 16:57:29<br>2.心胸开阔，眼看远方，心系家人，做好自己。—- 2013-12-15 09:37:33<br>3.当不开心的时候，笑一笑，心里的不开心就过去了。—- 2013-12-16 11:30:28<br>4.阳光每天都会有，只要没有遮住光芒的云朵在，一起都会好起来。 —- 2013-12-17 14:24:26<br>5.时间会冲淡一切事情，也会沉淀心里的悲伤，所谓的化悲伤为力量。—- 2013-12-18 12:34:12","more":"<br>6.不要在生气的时候说很多的话，不要在难过的时候做决定，不要在开心的时候许下承诺。—- 2013-12-19 13:33:45<br>7.反省自己所做的每件事情，才知道自己有多么的愚蠢。—- 2013-12-20 09:46:12<br>8.当一切都很不公平时,这便是一切的开始了.  —– 2015-06-09 15:49:09<br>9.无论现在的生活怎么惨淡，也不要用健康换取财富，因为财富总会来临，只要不停的努力。 —- 2016-12-21 17:49:12<br>10.</p>"},{"title":"关于Ubuntu16.04中WPS不能输入中文的问题","date":"2016-12-13T04:30:40.000Z","_content":"### 问题： Ubuntu16.04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。 \n### 原因： 环境变量未正确设置。 \n<!-- more -->\n### 解决办法:\n\n## WPS文字\n * 打开终端输入：\n```js\n\tsudo vim /usr/bin/wps\n```\n* 添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：\n```js\n\texport XMODIFIERS=\"@im=fcitx\"\n \texport QT_IM_MODULE=\"fcitx\"\n```\n\n\n## WPS表格\n * 打开终端输入：\n```js\n        sudo vim /usr/bin/et\n```\n * 添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：\n```js\n        export XMODIFIERS=\"@im=fcitx\"\n        export QT_IM_MODULE=\"fcitx\"\n```\n\n## WPS演示\n * 打开终端输入：\n```js\n        sudo vim /usr/bin/wpp\n```\n * 添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：\n```js\n        export XMODIFIERS=\"@im=fcitx\"\n        export QT_IM_MODULE=\"fcitx\"\n```\n\n修改完后保存，打开相应的程序切换输入法就可以输入中文了。\n","source":"_posts/wps-can-not-input-chinese.md","raw":"title:  关于Ubuntu16.04中WPS不能输入中文的问题 \ndate: 2016-12-13 12:30:40\ncategories: 技术\ntags: wps\n---\n### 问题： Ubuntu16.04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。 \n### 原因： 环境变量未正确设置。 \n<!-- more -->\n### 解决办法:\n\n## WPS文字\n * 打开终端输入：\n```js\n\tsudo vim /usr/bin/wps\n```\n* 添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：\n```js\n\texport XMODIFIERS=\"@im=fcitx\"\n \texport QT_IM_MODULE=\"fcitx\"\n```\n\n\n## WPS表格\n * 打开终端输入：\n```js\n        sudo vim /usr/bin/et\n```\n * 添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：\n```js\n        export XMODIFIERS=\"@im=fcitx\"\n        export QT_IM_MODULE=\"fcitx\"\n```\n\n## WPS演示\n * 打开终端输入：\n```js\n        sudo vim /usr/bin/wpp\n```\n * 添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：\n```js\n        export XMODIFIERS=\"@im=fcitx\"\n        export QT_IM_MODULE=\"fcitx\"\n```\n\n修改完后保存，打开相应的程序切换输入法就可以输入中文了。\n","slug":"wps-can-not-input-chinese","published":1,"updated":"2016-12-13T01:30:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dgwc42001t2u6b2xs31tvv","content":"<h3 id=\"问题：-Ubuntu16-04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。\"><a href=\"#问题：-Ubuntu16-04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。\" class=\"headerlink\" title=\"问题： Ubuntu16.04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。\"></a>问题： Ubuntu16.04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。</h3><h3 id=\"原因：-环境变量未正确设置。\"><a href=\"#原因：-环境变量未正确设置。\" class=\"headerlink\" title=\"原因： 环境变量未正确设置。\"></a>原因： 环境变量未正确设置。</h3><a id=\"more\"></a>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法:\"></a>解决办法:</h3><h2 id=\"WPS文字\"><a href=\"#WPS文字\" class=\"headerlink\" title=\"WPS文字\"></a>WPS文字</h2><ul>\n<li>打开终端输入：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /usr/bin/wps</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> XMODIFIERS=<span class=\"string\">\"@im=fcitx\"</span></div><div class=\"line\">\t<span class=\"keyword\">export</span> QT_IM_MODULE=<span class=\"string\">\"fcitx\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"WPS表格\"><a href=\"#WPS表格\" class=\"headerlink\" title=\"WPS表格\"></a>WPS表格</h2><ul>\n<li><p>打开终端输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /usr/bin/et</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> XMODIFIERS=<span class=\"string\">\"@im=fcitx\"</span></div><div class=\"line\"><span class=\"keyword\">export</span> QT_IM_MODULE=<span class=\"string\">\"fcitx\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"WPS演示\"><a href=\"#WPS演示\" class=\"headerlink\" title=\"WPS演示\"></a>WPS演示</h2><ul>\n<li><p>打开终端输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /usr/bin/wpp</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> XMODIFIERS=<span class=\"string\">\"@im=fcitx\"</span></div><div class=\"line\"><span class=\"keyword\">export</span> QT_IM_MODULE=<span class=\"string\">\"fcitx\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改完后保存，打开相应的程序切换输入法就可以输入中文了。</p>\n","excerpt":"<h3 id=\"问题：-Ubuntu16-04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。\"><a href=\"#问题：-Ubuntu16-04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。\" class=\"headerlink\" title=\"问题： Ubuntu16.04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。\"></a>问题： Ubuntu16.04自带的libre对于office的格式兼容性太差，只好安装了WPS。但是WPS文字、表格、演示均不能输入中文。</h3><h3 id=\"原因：-环境变量未正确设置。\"><a href=\"#原因：-环境变量未正确设置。\" class=\"headerlink\" title=\"原因： 环境变量未正确设置。\"></a>原因： 环境变量未正确设置。</h3>","more":"<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法:\"></a>解决办法:</h3><h2 id=\"WPS文字\"><a href=\"#WPS文字\" class=\"headerlink\" title=\"WPS文字\"></a>WPS文字</h2><ul>\n<li>打开终端输入：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /usr/bin/wps</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> XMODIFIERS=<span class=\"string\">\"@im=fcitx\"</span></div><div class=\"line\">\t<span class=\"keyword\">export</span> QT_IM_MODULE=<span class=\"string\">\"fcitx\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"WPS表格\"><a href=\"#WPS表格\" class=\"headerlink\" title=\"WPS表格\"></a>WPS表格</h2><ul>\n<li><p>打开终端输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /usr/bin/et</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> XMODIFIERS=<span class=\"string\">\"@im=fcitx\"</span></div><div class=\"line\"><span class=\"keyword\">export</span> QT_IM_MODULE=<span class=\"string\">\"fcitx\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"WPS演示\"><a href=\"#WPS演示\" class=\"headerlink\" title=\"WPS演示\"></a>WPS演示</h2><ul>\n<li><p>打开终端输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /usr/bin/wpp</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加一下文字到打开的文本中（添加到“#!/bin/bash”下面）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> XMODIFIERS=<span class=\"string\">\"@im=fcitx\"</span></div><div class=\"line\"><span class=\"keyword\">export</span> QT_IM_MODULE=<span class=\"string\">\"fcitx\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改完后保存，打开相应的程序切换输入法就可以输入中文了。</p>"},{"title":"AJAX工作原理","date":"2017-01-05T07:53:29.000Z","_content":"\n地址：http://blog.xieliqun.com/2016/08/08/ajax/\n\n> AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n\n----------\n### 一、ajax所包含的技术\n 大家都知道ajax并非一种新的技术，而是几种原有技术的结合体。它由下列技术组合而成。\n-  使用CSS和XHTML来表示。\n- 使用DOM模型来交互和动态显示。\n- 使用XMLHttpRequest来和服务器进行异步通信。\n- 使用javascript来绑定和调用。\n<!-- more -->\n在上面几中技术中，除了XmlHttpRequest对象以外，其它所有的技术都是基于web标准并且已经得到了广泛使用的，XMLHttpRequest虽然目前还没有被W3C所采纳，但是它已经是一个事实的标准，因为目前几乎所有的主流浏览器都支持它。\n\n### 二、怎样创建ajax\n\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。原生创建ajax可分为以下四步。\n\n#### 1、创建XMLHttpRequest对象\n所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。\n创建 XMLHttpRequest 对象的语法：\n```javascript\nvar xhr = new XMLHttpRequest();\n```\n老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：\n```javascript\nvar xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n```\n为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：\n```javascript\nvar xhr;\nif(XMLHttpRequest){\n\txhr = new XMLHttpRequest();\n}else{\n\txhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n}\n```\n\n#### 2、准备请求\n初始化该XMLHttpRequest对象，接受三个参数：\n```javascript\nxhr.open(method,url,async);\n```\n第一个参数表示请求类型的字符串，其值可以是GET或者POST。\nGET请求：\n```javascript\nxhr.open(\"GET\",demo.php?name=tsrot&age=24,true);\n```\nPOST请求：\n```javascript\nxhr.open(\"POST\",demo.php,true);\n```\n第二个参数是要作为请求发送目标的URL。\n第三个参数是true或false，表示请求是以异步还是同步的模式发出。（默认为true，一般不建议为false）\n- false：同步模式发出的请求会暂停所有javascript代码的执行，知道服务器获得响应为止，如果浏览器在连接网络时或者在下载文件时出了故障，页面就会一直挂起。 \n- true：异步模式发出的请求，请求对象收发数据的同时，浏览器可以继续加载页面，执行其他javascript代码\n\n#### 3、发送请求\n```javascript\nxhr.send();\n```\n一般情况下，使用Ajax提交的参数多是些简单的字符串，可以直接使用GET方法将要提交的参数写到open方法的url参数中，此时send方法的参数为null或为空。\n\nGET请求：\n```javascript\nxhr.open(\"GET\",demo.php?name=tsrot&age=24,true);\nxhr.send(null);\n```\nPOST请求：\n如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：\n```javascript\nxhr.open(\"POST\",demo.php,true);\nxhr.setRequestHeder(\"Content-Type\",\"application/x-www-form-urlencoded;charset=UTF-8\");\nxhr.send(\"name=\"+userName+\"&age=\"+userAge);\n```\n\n#### 4、处理响应\n```javascript\nxhr.onreadystatechange = function(){\n\tif(xhr.readyState == 4 && xhr.status == 200){\n\t\tconsole.log(xhr.responseText);\n\t}\n}\n```\nonreadystatechange 事件：\n当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。\n\nreadyState属性：\n0：已经创建对象，但还没有调用open()方法。\n1：已经调用open()方法，但还没有发送请求。\n2：请求已经发送，标题和状态已经收到，并可用。\n3：接收到来自服务器的响应。\n4：接收完请求数据，表示已经完成请求。\n\nstatus属性：\n200:\"OK\"\n404: 未找到页面\n\nresponseText：获得字符串形式的响应数据\nresponseXML：获得 XML 形式的响应数据\n返回值一般为json字符串，可以用JSON.parse(xhr.responseText)转化为JSON对象。\n\n#### 5、完整例子\ndemo.html\n```javascript\nvar xhr;\nif(XMLHttpRequest){\n\txhr = new XMLHttpRequest();\n}else{\n\txhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n};\n\nxhr.open(\"GET\",\"./data.json\",true);\nxhr.send();\n\nxhr.onreadystatechange = function(){\n\tif(xhr.readyState == 4 && xhr.status == 200){\n\t\tconsole.log(JSON.parse(xhr.responseText).name);\n\t}\n}\n```\ndata.json\n```json\n{\n\t\"name\":\"tsrot\",\n\t\"age\":24\n}\n```\n\n### 三、ajax应用场景\n\n- 场景 1. 数据验证\n- 场景 2. 按需取数据\n- 场景 3. 自动更新页面\n\n\n### 四、ajax优缺点\n\n优点：\n1、页面无刷新，用户体验好。\n2、异步通信，更加快的响应能力。\n3、减少冗余请求，减轻了服务器负担\n4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。\n\n缺点：\n1、ajax干掉了back按钮，即对浏览器后退机制的破坏。\n2、存在一定的安全问题。\n3、对搜索引擎的支持比较弱。\n4、破坏了程序的异常机制。\n5、无法用URL直接访问。\n","source":"_posts/study-notes/AJAX工作原理.md","raw":"title: AJAX工作原理\ndate: 2017-1-5 15:53:29\n---\n\n地址：http://blog.xieliqun.com/2016/08/08/ajax/\n\n> AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n\n----------\n### 一、ajax所包含的技术\n 大家都知道ajax并非一种新的技术，而是几种原有技术的结合体。它由下列技术组合而成。\n-  使用CSS和XHTML来表示。\n- 使用DOM模型来交互和动态显示。\n- 使用XMLHttpRequest来和服务器进行异步通信。\n- 使用javascript来绑定和调用。\n<!-- more -->\n在上面几中技术中，除了XmlHttpRequest对象以外，其它所有的技术都是基于web标准并且已经得到了广泛使用的，XMLHttpRequest虽然目前还没有被W3C所采纳，但是它已经是一个事实的标准，因为目前几乎所有的主流浏览器都支持它。\n\n### 二、怎样创建ajax\n\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。原生创建ajax可分为以下四步。\n\n#### 1、创建XMLHttpRequest对象\n所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。\n创建 XMLHttpRequest 对象的语法：\n```javascript\nvar xhr = new XMLHttpRequest();\n```\n老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：\n```javascript\nvar xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n```\n为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：\n```javascript\nvar xhr;\nif(XMLHttpRequest){\n\txhr = new XMLHttpRequest();\n}else{\n\txhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n}\n```\n\n#### 2、准备请求\n初始化该XMLHttpRequest对象，接受三个参数：\n```javascript\nxhr.open(method,url,async);\n```\n第一个参数表示请求类型的字符串，其值可以是GET或者POST。\nGET请求：\n```javascript\nxhr.open(\"GET\",demo.php?name=tsrot&age=24,true);\n```\nPOST请求：\n```javascript\nxhr.open(\"POST\",demo.php,true);\n```\n第二个参数是要作为请求发送目标的URL。\n第三个参数是true或false，表示请求是以异步还是同步的模式发出。（默认为true，一般不建议为false）\n- false：同步模式发出的请求会暂停所有javascript代码的执行，知道服务器获得响应为止，如果浏览器在连接网络时或者在下载文件时出了故障，页面就会一直挂起。 \n- true：异步模式发出的请求，请求对象收发数据的同时，浏览器可以继续加载页面，执行其他javascript代码\n\n#### 3、发送请求\n```javascript\nxhr.send();\n```\n一般情况下，使用Ajax提交的参数多是些简单的字符串，可以直接使用GET方法将要提交的参数写到open方法的url参数中，此时send方法的参数为null或为空。\n\nGET请求：\n```javascript\nxhr.open(\"GET\",demo.php?name=tsrot&age=24,true);\nxhr.send(null);\n```\nPOST请求：\n如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：\n```javascript\nxhr.open(\"POST\",demo.php,true);\nxhr.setRequestHeder(\"Content-Type\",\"application/x-www-form-urlencoded;charset=UTF-8\");\nxhr.send(\"name=\"+userName+\"&age=\"+userAge);\n```\n\n#### 4、处理响应\n```javascript\nxhr.onreadystatechange = function(){\n\tif(xhr.readyState == 4 && xhr.status == 200){\n\t\tconsole.log(xhr.responseText);\n\t}\n}\n```\nonreadystatechange 事件：\n当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。\n\nreadyState属性：\n0：已经创建对象，但还没有调用open()方法。\n1：已经调用open()方法，但还没有发送请求。\n2：请求已经发送，标题和状态已经收到，并可用。\n3：接收到来自服务器的响应。\n4：接收完请求数据，表示已经完成请求。\n\nstatus属性：\n200:\"OK\"\n404: 未找到页面\n\nresponseText：获得字符串形式的响应数据\nresponseXML：获得 XML 形式的响应数据\n返回值一般为json字符串，可以用JSON.parse(xhr.responseText)转化为JSON对象。\n\n#### 5、完整例子\ndemo.html\n```javascript\nvar xhr;\nif(XMLHttpRequest){\n\txhr = new XMLHttpRequest();\n}else{\n\txhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n};\n\nxhr.open(\"GET\",\"./data.json\",true);\nxhr.send();\n\nxhr.onreadystatechange = function(){\n\tif(xhr.readyState == 4 && xhr.status == 200){\n\t\tconsole.log(JSON.parse(xhr.responseText).name);\n\t}\n}\n```\ndata.json\n```json\n{\n\t\"name\":\"tsrot\",\n\t\"age\":24\n}\n```\n\n### 三、ajax应用场景\n\n- 场景 1. 数据验证\n- 场景 2. 按需取数据\n- 场景 3. 自动更新页面\n\n\n### 四、ajax优缺点\n\n优点：\n1、页面无刷新，用户体验好。\n2、异步通信，更加快的响应能力。\n3、减少冗余请求，减轻了服务器负担\n4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。\n\n缺点：\n1、ajax干掉了back按钮，即对浏览器后退机制的破坏。\n2、存在一定的安全问题。\n3、对搜索引擎的支持比较弱。\n4、破坏了程序的异常机制。\n5、无法用URL直接访问。\n","slug":"study-notes/AJAX工作原理","published":1,"updated":"2019-05-05T06:12:21.905Z","_id":"cj0dgwc6r003i2u6b3uka3oi9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/08/ajax/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/08/ajax/</a></p>\n<blockquote>\n<p>AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>\n</blockquote>\n<hr>\n<h3 id=\"一、ajax所包含的技术\"><a href=\"#一、ajax所包含的技术\" class=\"headerlink\" title=\"一、ajax所包含的技术\"></a>一、ajax所包含的技术</h3><p> 大家都知道ajax并非一种新的技术，而是几种原有技术的结合体。它由下列技术组合而成。</p>\n<ul>\n<li>使用CSS和XHTML来表示。</li>\n<li>使用DOM模型来交互和动态显示。</li>\n<li>使用XMLHttpRequest来和服务器进行异步通信。</li>\n<li>使用javascript来绑定和调用。<a id=\"more\"></a>\n在上面几中技术中，除了XmlHttpRequest对象以外，其它所有的技术都是基于web标准并且已经得到了广泛使用的，XMLHttpRequest虽然目前还没有被W3C所采纳，但是它已经是一个事实的标准，因为目前几乎所有的主流浏览器都支持它。</li>\n</ul>\n<h3 id=\"二、怎样创建ajax\"><a href=\"#二、怎样创建ajax\" class=\"headerlink\" title=\"二、怎样创建ajax\"></a>二、怎样创建ajax</h3><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。原生创建ajax可分为以下四步。</p>\n<h4 id=\"1、创建XMLHttpRequest对象\"><a href=\"#1、创建XMLHttpRequest对象\" class=\"headerlink\" title=\"1、创建XMLHttpRequest对象\"></a>1、创建XMLHttpRequest对象</h4><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。<br>创建 XMLHttpRequest 对象的语法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></p>\n<p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(XMLHttpRequest)&#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2、准备请求\"><a href=\"#2、准备请求\" class=\"headerlink\" title=\"2、准备请求\"></a>2、准备请求</h4><p>初始化该XMLHttpRequest对象，接受三个参数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(method,url,<span class=\"keyword\">async</span>);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数表示请求类型的字符串，其值可以是GET或者POST。<br>GET请求：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,demo.php?name=tsrot&amp;age=<span class=\"number\">24</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>POST请求：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>,demo.php,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>第二个参数是要作为请求发送目标的URL。<br>第三个参数是true或false，表示请求是以异步还是同步的模式发出。（默认为true，一般不建议为false）</p>\n<ul>\n<li>false：同步模式发出的请求会暂停所有javascript代码的执行，知道服务器获得响应为止，如果浏览器在连接网络时或者在下载文件时出了故障，页面就会一直挂起。 </li>\n<li>true：异步模式发出的请求，请求对象收发数据的同时，浏览器可以继续加载页面，执行其他javascript代码</li>\n</ul>\n<h4 id=\"3、发送请求\"><a href=\"#3、发送请求\" class=\"headerlink\" title=\"3、发送请求\"></a>3、发送请求</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>一般情况下，使用Ajax提交的参数多是些简单的字符串，可以直接使用GET方法将要提交的参数写到open方法的url参数中，此时send方法的参数为null或为空。</p>\n<p>GET请求：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,demo.php?name=tsrot&amp;age=<span class=\"number\">24</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></p>\n<p>POST请求：<br>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>,demo.php,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeder(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span>);</span><br><span class=\"line\">xhr.send(<span class=\"string\">\"name=\"</span>+userName+<span class=\"string\">\"&amp;age=\"</span>+userAge);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4、处理响应\"><a href=\"#4、处理响应\" class=\"headerlink\" title=\"4、处理响应\"></a>4、处理响应</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(xhr.responseText);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>onreadystatechange 事件：<br>当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。</p>\n<p>readyState属性：<br>0：已经创建对象，但还没有调用open()方法。<br>1：已经调用open()方法，但还没有发送请求。<br>2：请求已经发送，标题和状态已经收到，并可用。<br>3：接收到来自服务器的响应。<br>4：接收完请求数据，表示已经完成请求。</p>\n<p>status属性：<br>200:”OK”<br>404: 未找到页面</p>\n<p>responseText：获得字符串形式的响应数据<br>responseXML：获得 XML 形式的响应数据<br>返回值一般为json字符串，可以用JSON.parse(xhr.responseText)转化为JSON对象。</p>\n<h4 id=\"5、完整例子\"><a href=\"#5、完整例子\" class=\"headerlink\" title=\"5、完整例子\"></a>5、完整例子</h4><p>demo.html<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(XMLHttpRequest)&#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"./data.json\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(xhr.responseText).name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>data.json<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、ajax应用场景\"><a href=\"#三、ajax应用场景\" class=\"headerlink\" title=\"三、ajax应用场景\"></a>三、ajax应用场景</h3><ul>\n<li>场景 1. 数据验证</li>\n<li>场景 2. 按需取数据</li>\n<li>场景 3. 自动更新页面</li>\n</ul>\n<h3 id=\"四、ajax优缺点\"><a href=\"#四、ajax优缺点\" class=\"headerlink\" title=\"四、ajax优缺点\"></a>四、ajax优缺点</h3><p>优点：<br>1、页面无刷新，用户体验好。<br>2、异步通信，更加快的响应能力。<br>3、减少冗余请求，减轻了服务器负担<br>4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</p>\n<p>缺点：<br>1、ajax干掉了back按钮，即对浏览器后退机制的破坏。<br>2、存在一定的安全问题。<br>3、对搜索引擎的支持比较弱。<br>4、破坏了程序的异常机制。<br>5、无法用URL直接访问。</p>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/08/ajax/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/08/ajax/</a></p>\n<blockquote>\n<p>AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>\n</blockquote>\n<hr>\n<h3 id=\"一、ajax所包含的技术\"><a href=\"#一、ajax所包含的技术\" class=\"headerlink\" title=\"一、ajax所包含的技术\"></a>一、ajax所包含的技术</h3><p> 大家都知道ajax并非一种新的技术，而是几种原有技术的结合体。它由下列技术组合而成。</p>\n<ul>\n<li>使用CSS和XHTML来表示。</li>\n<li>使用DOM模型来交互和动态显示。</li>\n<li>使用XMLHttpRequest来和服务器进行异步通信。</li>\n<li>使用javascript来绑定和调用。","more":"在上面几中技术中，除了XmlHttpRequest对象以外，其它所有的技术都是基于web标准并且已经得到了广泛使用的，XMLHttpRequest虽然目前还没有被W3C所采纳，但是它已经是一个事实的标准，因为目前几乎所有的主流浏览器都支持它。</li>\n</ul>\n<h3 id=\"二、怎样创建ajax\"><a href=\"#二、怎样创建ajax\" class=\"headerlink\" title=\"二、怎样创建ajax\"></a>二、怎样创建ajax</h3><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。原生创建ajax可分为以下四步。</p>\n<h4 id=\"1、创建XMLHttpRequest对象\"><a href=\"#1、创建XMLHttpRequest对象\" class=\"headerlink\" title=\"1、创建XMLHttpRequest对象\"></a>1、创建XMLHttpRequest对象</h4><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。<br>创建 XMLHttpRequest 对象的语法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></p>\n<p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(XMLHttpRequest)&#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2、准备请求\"><a href=\"#2、准备请求\" class=\"headerlink\" title=\"2、准备请求\"></a>2、准备请求</h4><p>初始化该XMLHttpRequest对象，接受三个参数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(method,url,<span class=\"keyword\">async</span>);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数表示请求类型的字符串，其值可以是GET或者POST。<br>GET请求：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,demo.php?name=tsrot&amp;age=<span class=\"number\">24</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>POST请求：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>,demo.php,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>第二个参数是要作为请求发送目标的URL。<br>第三个参数是true或false，表示请求是以异步还是同步的模式发出。（默认为true，一般不建议为false）</p>\n<ul>\n<li>false：同步模式发出的请求会暂停所有javascript代码的执行，知道服务器获得响应为止，如果浏览器在连接网络时或者在下载文件时出了故障，页面就会一直挂起。 </li>\n<li>true：异步模式发出的请求，请求对象收发数据的同时，浏览器可以继续加载页面，执行其他javascript代码</li>\n</ul>\n<h4 id=\"3、发送请求\"><a href=\"#3、发送请求\" class=\"headerlink\" title=\"3、发送请求\"></a>3、发送请求</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>一般情况下，使用Ajax提交的参数多是些简单的字符串，可以直接使用GET方法将要提交的参数写到open方法的url参数中，此时send方法的参数为null或为空。</p>\n<p>GET请求：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,demo.php?name=tsrot&amp;age=<span class=\"number\">24</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></p>\n<p>POST请求：<br>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>,demo.php,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeder(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span>);</span><br><span class=\"line\">xhr.send(<span class=\"string\">\"name=\"</span>+userName+<span class=\"string\">\"&amp;age=\"</span>+userAge);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4、处理响应\"><a href=\"#4、处理响应\" class=\"headerlink\" title=\"4、处理响应\"></a>4、处理响应</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(xhr.responseText);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>onreadystatechange 事件：<br>当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。</p>\n<p>readyState属性：<br>0：已经创建对象，但还没有调用open()方法。<br>1：已经调用open()方法，但还没有发送请求。<br>2：请求已经发送，标题和状态已经收到，并可用。<br>3：接收到来自服务器的响应。<br>4：接收完请求数据，表示已经完成请求。</p>\n<p>status属性：<br>200:”OK”<br>404: 未找到页面</p>\n<p>responseText：获得字符串形式的响应数据<br>responseXML：获得 XML 形式的响应数据<br>返回值一般为json字符串，可以用JSON.parse(xhr.responseText)转化为JSON对象。</p>\n<h4 id=\"5、完整例子\"><a href=\"#5、完整例子\" class=\"headerlink\" title=\"5、完整例子\"></a>5、完整例子</h4><p>demo.html<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(XMLHttpRequest)&#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"./data.json\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(xhr.responseText).name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>data.json<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、ajax应用场景\"><a href=\"#三、ajax应用场景\" class=\"headerlink\" title=\"三、ajax应用场景\"></a>三、ajax应用场景</h3><ul>\n<li>场景 1. 数据验证</li>\n<li>场景 2. 按需取数据</li>\n<li>场景 3. 自动更新页面</li>\n</ul>\n<h3 id=\"四、ajax优缺点\"><a href=\"#四、ajax优缺点\" class=\"headerlink\" title=\"四、ajax优缺点\"></a>四、ajax优缺点</h3><p>优点：<br>1、页面无刷新，用户体验好。<br>2、异步通信，更加快的响应能力。<br>3、减少冗余请求，减轻了服务器负担<br>4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</p>\n<p>缺点：<br>1、ajax干掉了back按钮，即对浏览器后退机制的破坏。<br>2、存在一定的安全问题。<br>3、对搜索引擎的支持比较弱。<br>4、破坏了程序的异常机制。<br>5、无法用URL直接访问。</p>"},{"title":"JS中的call、apply、bind方法详解","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/08/10/call-apply-bind/\n\n> call()、apply()、bind()都是函数对象的一个方法，它们的作用都是改变函数的调用对象。它的使用极大的简化了代码的调用。\n\n\n\n### 一、方法定义\n\n#### call方法\n语法：`call([thisObj[,arg1[, arg2[,   [,.argN]]]]])`\n定义：调用一个对象的一个方法，以另一个对象替换当前对象。\n说明：call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。\narg1 ... argN为被调用方法的传参。\n\n#### apply方法\n语法：`apply([thisObj[,argArray]])`\n定义：应用某一对象的一个方法，用另一个对象替换当前对象。\n说明：apply的第一个参数thisObj和call方法的一样，第二个参数argArray为一个传参数组。thisObj如果未传，那么 Global 对象被用作 thisObj。\n<!-- more -->\n#### bind方法\n在ECMAScript5中扩展了叫bind的方法（IE6,7,8不支持）\n语法：`bind([thisObj[,arg1[, arg2[,   [,.argN]]]]])`\n定义：应用某一对象的一个方法，用另一个对象替换当前对象。\n说明：bind的thisObj参数也和call方法一样，thisObj如果未传，那么 Global 对象被用作 thisObj。arg1 ... argN可传可不传。如果不传，可以在调用的时候再传。如果传了，调用的时候则可以不传，调用的时候如果你还是传了，则不生效。例如：\n```javascript\nvar person = {\n    name:\"tsrot\",\n    age:24,\n    sayHello:function(age){\n        console.log(this.name);\n        console.log(age);\n    }\n};\nvar son = {\n\tname:\"xieliqun\"\n};\nvar boundFunc = person.sayHello.bind(son);\nboundFunc(25); // xieliqun  25\n```\n\n```javascript\nvar boundFunc = person.sayHello.bind(son,25);\nboundFunc(); // xieliqun  25\n```\n\n```javascript\nvar boundFunc = person.sayHello.bind(son,25);\nboundFunc(30); // xieliqun  25\n```\n\n### 二、call、apply、bind的区别\n1、call的arg传参需一个一个传，apply则直接传一个数组。\n```javascript\nfunction hello(name,age){\n\tconsole.log(name);\n\tconsole.log(age);\n}\nhello.call(this,\"tsrot\",24);\nhello.apply(this,[\"tsrot\",24]);\n```\n2、call和apply直接执行函数，而bind需要再一次调用。\n```javascript\nvar obj = {\n    x: 81,\n};\n  \nvar foo = {\n    getX: function() {\n        return this.x;\n    }\n}\n  \nconsole.log(foo.getX.bind(obj)());  //81\nconsole.log(foo.getX.call(obj));    //81\nconsole.log(foo.getX.apply(obj));   //81\n```\n\n### 三、运用场景\n\n#### 实现继承\n```javascript\nfunction Animal(name) {\n  this.name = name;\n  this.showName = function () {\n    console.log(this.name);\n  }\n}\n\nfunction Cat(name) {\n  Animal.call(this, name); //Cat继承了Animal的showName方法\n}\n\nvar cat = new Cat('Black Cat');\ncat.showName(); //Black Cat\n```\n\n#### 数组追加\n```javascript\nvar array1 = [1 , 2 , 3, 5];  \nvar array2 = [\"xie\" , \"li\" , \"qun\" , \"tsrot\"];  \nArray.prototype.push.apply(array1, array2);\nconsole.log(array1);//[1, 2, 3, 5, \"xie\", \"li\", \"qun\", \"tsrot\"]\n```\n\n#### 获取数组中的最大值和最小值\n```javascript\nvar num = [1,3,5,7,2,-10,11];\nvar maxNum = Math.max.apply(Math, num);\nvar minNum = Math.min.apply(Math, num);\nconsole.log(maxNum); //11\nconsole.log(minNum); //-10\n```\n\n#### 将伪数组转化为数组\n```javascript\nvar fakeArr = {0:'a',1:'b',length:2};\nvar arr1 = Array.prototype.slice.call(fakeArr);\nconsole.log(arr1[0]); //a\nvar arr2 = [].slice.call(fakeArr);\nconsole.log(arr2[0]); //a\n\narr1.push(\"c\");\nconsole.log(arr1); //[\"a\", \"b\", \"c\"]\n```\n\n#### 保存this变量\n```javascript\n// 正常情况下使用变量保存 this 值\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        var _this = this ;\n        $('.someClass').on('click',function(event) {\n            /* Act on the event */\n            console.log(_this.bar);     //1\n        });\n    }\n}\n\n// 使用 bind 进行函数绑定\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        $('.someClass').on('click',function(event) {\n            /* Act on the event */\n            console.log(this.bar);      //1\n        }.bind(this));\n    }\n}\n```\n","source":"_posts/study-notes/JS中的call、apply、bind方法详解.md","raw":"title: JS中的call、apply、bind方法详解\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/08/10/call-apply-bind/\n\n> call()、apply()、bind()都是函数对象的一个方法，它们的作用都是改变函数的调用对象。它的使用极大的简化了代码的调用。\n\n\n\n### 一、方法定义\n\n#### call方法\n语法：`call([thisObj[,arg1[, arg2[,   [,.argN]]]]])`\n定义：调用一个对象的一个方法，以另一个对象替换当前对象。\n说明：call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。\narg1 ... argN为被调用方法的传参。\n\n#### apply方法\n语法：`apply([thisObj[,argArray]])`\n定义：应用某一对象的一个方法，用另一个对象替换当前对象。\n说明：apply的第一个参数thisObj和call方法的一样，第二个参数argArray为一个传参数组。thisObj如果未传，那么 Global 对象被用作 thisObj。\n<!-- more -->\n#### bind方法\n在ECMAScript5中扩展了叫bind的方法（IE6,7,8不支持）\n语法：`bind([thisObj[,arg1[, arg2[,   [,.argN]]]]])`\n定义：应用某一对象的一个方法，用另一个对象替换当前对象。\n说明：bind的thisObj参数也和call方法一样，thisObj如果未传，那么 Global 对象被用作 thisObj。arg1 ... argN可传可不传。如果不传，可以在调用的时候再传。如果传了，调用的时候则可以不传，调用的时候如果你还是传了，则不生效。例如：\n```javascript\nvar person = {\n    name:\"tsrot\",\n    age:24,\n    sayHello:function(age){\n        console.log(this.name);\n        console.log(age);\n    }\n};\nvar son = {\n\tname:\"xieliqun\"\n};\nvar boundFunc = person.sayHello.bind(son);\nboundFunc(25); // xieliqun  25\n```\n\n```javascript\nvar boundFunc = person.sayHello.bind(son,25);\nboundFunc(); // xieliqun  25\n```\n\n```javascript\nvar boundFunc = person.sayHello.bind(son,25);\nboundFunc(30); // xieliqun  25\n```\n\n### 二、call、apply、bind的区别\n1、call的arg传参需一个一个传，apply则直接传一个数组。\n```javascript\nfunction hello(name,age){\n\tconsole.log(name);\n\tconsole.log(age);\n}\nhello.call(this,\"tsrot\",24);\nhello.apply(this,[\"tsrot\",24]);\n```\n2、call和apply直接执行函数，而bind需要再一次调用。\n```javascript\nvar obj = {\n    x: 81,\n};\n  \nvar foo = {\n    getX: function() {\n        return this.x;\n    }\n}\n  \nconsole.log(foo.getX.bind(obj)());  //81\nconsole.log(foo.getX.call(obj));    //81\nconsole.log(foo.getX.apply(obj));   //81\n```\n\n### 三、运用场景\n\n#### 实现继承\n```javascript\nfunction Animal(name) {\n  this.name = name;\n  this.showName = function () {\n    console.log(this.name);\n  }\n}\n\nfunction Cat(name) {\n  Animal.call(this, name); //Cat继承了Animal的showName方法\n}\n\nvar cat = new Cat('Black Cat');\ncat.showName(); //Black Cat\n```\n\n#### 数组追加\n```javascript\nvar array1 = [1 , 2 , 3, 5];  \nvar array2 = [\"xie\" , \"li\" , \"qun\" , \"tsrot\"];  \nArray.prototype.push.apply(array1, array2);\nconsole.log(array1);//[1, 2, 3, 5, \"xie\", \"li\", \"qun\", \"tsrot\"]\n```\n\n#### 获取数组中的最大值和最小值\n```javascript\nvar num = [1,3,5,7,2,-10,11];\nvar maxNum = Math.max.apply(Math, num);\nvar minNum = Math.min.apply(Math, num);\nconsole.log(maxNum); //11\nconsole.log(minNum); //-10\n```\n\n#### 将伪数组转化为数组\n```javascript\nvar fakeArr = {0:'a',1:'b',length:2};\nvar arr1 = Array.prototype.slice.call(fakeArr);\nconsole.log(arr1[0]); //a\nvar arr2 = [].slice.call(fakeArr);\nconsole.log(arr2[0]); //a\n\narr1.push(\"c\");\nconsole.log(arr1); //[\"a\", \"b\", \"c\"]\n```\n\n#### 保存this变量\n```javascript\n// 正常情况下使用变量保存 this 值\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        var _this = this ;\n        $('.someClass').on('click',function(event) {\n            /* Act on the event */\n            console.log(_this.bar);     //1\n        });\n    }\n}\n\n// 使用 bind 进行函数绑定\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        $('.someClass').on('click',function(event) {\n            /* Act on the event */\n            console.log(this.bar);      //1\n        }.bind(this));\n    }\n}\n```\n","slug":"study-notes/JS中的call、apply、bind方法详解","published":1,"updated":"2019-05-05T06:47:58.979Z","_id":"cj0dgwc6s003j2u6bx74yw3lq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/10/call-apply-bind/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/10/call-apply-bind/</a></p>\n<blockquote>\n<p>call()、apply()、bind()都是函数对象的一个方法，它们的作用都是改变函数的调用对象。它的使用极大的简化了代码的调用。</p>\n</blockquote>\n<h3 id=\"一、方法定义\"><a href=\"#一、方法定义\" class=\"headerlink\" title=\"一、方法定义\"></a>一、方法定义</h3><h4 id=\"call方法\"><a href=\"#call方法\" class=\"headerlink\" title=\"call方法\"></a>call方法</h4><p>语法：<code>call([thisObj[,arg1[, arg2[,   [,.argN]]]]])</code><br>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。<br>arg1 … argN为被调用方法的传参。</p>\n<h4 id=\"apply方法\"><a href=\"#apply方法\" class=\"headerlink\" title=\"apply方法\"></a>apply方法</h4><p>语法：<code>apply([thisObj[,argArray]])</code><br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：apply的第一个参数thisObj和call方法的一样，第二个参数argArray为一个传参数组。thisObj如果未传，那么 Global 对象被用作 thisObj。<br><a id=\"more\"></a></p>\n<h4 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h4><p>在ECMAScript5中扩展了叫bind的方法（IE6,7,8不支持）<br>语法：<code>bind([thisObj[,arg1[, arg2[,   [,.argN]]]]])</code><br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：bind的thisObj参数也和call方法一样，thisObj如果未传，那么 Global 对象被用作 thisObj。arg1 … argN可传可不传。如果不传，可以在调用的时候再传。如果传了，调用的时候则可以不传，调用的时候如果你还是传了，则不生效。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">24</span>,</span><br><span class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">age</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> son = &#123;</span><br><span class=\"line\">\tname:<span class=\"string\">\"xieliqun\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(son);</span><br><span class=\"line\">boundFunc(<span class=\"number\">25</span>); <span class=\"comment\">// xieliqun  25</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(son,<span class=\"number\">25</span>);</span><br><span class=\"line\">boundFunc(); <span class=\"comment\">// xieliqun  25</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(son,<span class=\"number\">25</span>);</span><br><span class=\"line\">boundFunc(<span class=\"number\">30</span>); <span class=\"comment\">// xieliqun  25</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、call、apply、bind的区别\"><a href=\"#二、call、apply、bind的区别\" class=\"headerlink\" title=\"二、call、apply、bind的区别\"></a>二、call、apply、bind的区别</h3><p>1、call的arg传参需一个一个传，apply则直接传一个数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello.call(<span class=\"keyword\">this</span>,<span class=\"string\">\"tsrot\"</span>,<span class=\"number\">24</span>);</span><br><span class=\"line\">hello.apply(<span class=\"keyword\">this</span>,[<span class=\"string\">\"tsrot\"</span>,<span class=\"number\">24</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>2、call和apply直接执行函数，而bind需要再一次调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">81</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    getX: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.bind(obj)());  <span class=\"comment\">//81</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.call(obj));    <span class=\"comment\">//81</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.apply(obj));   <span class=\"comment\">//81</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、运用场景\"><a href=\"#三、运用场景\" class=\"headerlink\" title=\"三、运用场景\"></a>三、运用场景</h3><h4 id=\"实现继承\"><a href=\"#实现继承\" class=\"headerlink\" title=\"实现继承\"></a>实现继承</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.showName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, name); <span class=\"comment\">//Cat继承了Animal的showName方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'Black Cat'</span>);</span><br><span class=\"line\">cat.showName(); <span class=\"comment\">//Black Cat</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组追加\"><a href=\"#数组追加\" class=\"headerlink\" title=\"数组追加\"></a>数组追加</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span>, <span class=\"number\">5</span>];  </span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"string\">\"xie\"</span> , <span class=\"string\">\"li\"</span> , <span class=\"string\">\"qun\"</span> , <span class=\"string\">\"tsrot\"</span>];  </span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(array1, array2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1);<span class=\"comment\">//[1, 2, 3, 5, \"xie\", \"li\", \"qun\", \"tsrot\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"获取数组中的最大值和最小值\"><a href=\"#获取数组中的最大值和最小值\" class=\"headerlink\" title=\"获取数组中的最大值和最小值\"></a>获取数组中的最大值和最小值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">-10</span>,<span class=\"number\">11</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, num);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minNum = <span class=\"built_in\">Math</span>.min.apply(<span class=\"built_in\">Math</span>, num);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maxNum); <span class=\"comment\">//11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(minNum); <span class=\"comment\">//-10</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将伪数组转化为数组\"><a href=\"#将伪数组转化为数组\" class=\"headerlink\" title=\"将伪数组转化为数组\"></a>将伪数组转化为数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fakeArr = &#123;<span class=\"number\">0</span>:<span class=\"string\">'a'</span>,<span class=\"number\">1</span>:<span class=\"string\">'b'</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"built_in\">Array</span>.prototype.slice.call(fakeArr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1[<span class=\"number\">0</span>]); <span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [].slice.call(fakeArr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2[<span class=\"number\">0</span>]); <span class=\"comment\">//a</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr1.push(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1); <span class=\"comment\">//[\"a\", \"b\", \"c\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"保存this变量\"><a href=\"#保存this变量\" class=\"headerlink\" title=\"保存this变量\"></a>保存this变量</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常情况下使用变量保存 this 值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span> ;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Act on the event */</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(_this.bar);     <span class=\"comment\">//1</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 bind 进行函数绑定</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Act on the event */</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.bar);      <span class=\"comment\">//1</span></span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/10/call-apply-bind/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/10/call-apply-bind/</a></p>\n<blockquote>\n<p>call()、apply()、bind()都是函数对象的一个方法，它们的作用都是改变函数的调用对象。它的使用极大的简化了代码的调用。</p>\n</blockquote>\n<h3 id=\"一、方法定义\"><a href=\"#一、方法定义\" class=\"headerlink\" title=\"一、方法定义\"></a>一、方法定义</h3><h4 id=\"call方法\"><a href=\"#call方法\" class=\"headerlink\" title=\"call方法\"></a>call方法</h4><p>语法：<code>call([thisObj[,arg1[, arg2[,   [,.argN]]]]])</code><br>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。<br>arg1 … argN为被调用方法的传参。</p>\n<h4 id=\"apply方法\"><a href=\"#apply方法\" class=\"headerlink\" title=\"apply方法\"></a>apply方法</h4><p>语法：<code>apply([thisObj[,argArray]])</code><br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：apply的第一个参数thisObj和call方法的一样，第二个参数argArray为一个传参数组。thisObj如果未传，那么 Global 对象被用作 thisObj。<br>","more":"</p>\n<h4 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h4><p>在ECMAScript5中扩展了叫bind的方法（IE6,7,8不支持）<br>语法：<code>bind([thisObj[,arg1[, arg2[,   [,.argN]]]]])</code><br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：bind的thisObj参数也和call方法一样，thisObj如果未传，那么 Global 对象被用作 thisObj。arg1 … argN可传可不传。如果不传，可以在调用的时候再传。如果传了，调用的时候则可以不传，调用的时候如果你还是传了，则不生效。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">24</span>,</span><br><span class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">age</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> son = &#123;</span><br><span class=\"line\">\tname:<span class=\"string\">\"xieliqun\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(son);</span><br><span class=\"line\">boundFunc(<span class=\"number\">25</span>); <span class=\"comment\">// xieliqun  25</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(son,<span class=\"number\">25</span>);</span><br><span class=\"line\">boundFunc(); <span class=\"comment\">// xieliqun  25</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(son,<span class=\"number\">25</span>);</span><br><span class=\"line\">boundFunc(<span class=\"number\">30</span>); <span class=\"comment\">// xieliqun  25</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、call、apply、bind的区别\"><a href=\"#二、call、apply、bind的区别\" class=\"headerlink\" title=\"二、call、apply、bind的区别\"></a>二、call、apply、bind的区别</h3><p>1、call的arg传参需一个一个传，apply则直接传一个数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello.call(<span class=\"keyword\">this</span>,<span class=\"string\">\"tsrot\"</span>,<span class=\"number\">24</span>);</span><br><span class=\"line\">hello.apply(<span class=\"keyword\">this</span>,[<span class=\"string\">\"tsrot\"</span>,<span class=\"number\">24</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>2、call和apply直接执行函数，而bind需要再一次调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">81</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    getX: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.bind(obj)());  <span class=\"comment\">//81</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.call(obj));    <span class=\"comment\">//81</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.apply(obj));   <span class=\"comment\">//81</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、运用场景\"><a href=\"#三、运用场景\" class=\"headerlink\" title=\"三、运用场景\"></a>三、运用场景</h3><h4 id=\"实现继承\"><a href=\"#实现继承\" class=\"headerlink\" title=\"实现继承\"></a>实现继承</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.showName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, name); <span class=\"comment\">//Cat继承了Animal的showName方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'Black Cat'</span>);</span><br><span class=\"line\">cat.showName(); <span class=\"comment\">//Black Cat</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组追加\"><a href=\"#数组追加\" class=\"headerlink\" title=\"数组追加\"></a>数组追加</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span>, <span class=\"number\">5</span>];  </span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"string\">\"xie\"</span> , <span class=\"string\">\"li\"</span> , <span class=\"string\">\"qun\"</span> , <span class=\"string\">\"tsrot\"</span>];  </span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(array1, array2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1);<span class=\"comment\">//[1, 2, 3, 5, \"xie\", \"li\", \"qun\", \"tsrot\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"获取数组中的最大值和最小值\"><a href=\"#获取数组中的最大值和最小值\" class=\"headerlink\" title=\"获取数组中的最大值和最小值\"></a>获取数组中的最大值和最小值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">-10</span>,<span class=\"number\">11</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, num);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minNum = <span class=\"built_in\">Math</span>.min.apply(<span class=\"built_in\">Math</span>, num);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maxNum); <span class=\"comment\">//11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(minNum); <span class=\"comment\">//-10</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将伪数组转化为数组\"><a href=\"#将伪数组转化为数组\" class=\"headerlink\" title=\"将伪数组转化为数组\"></a>将伪数组转化为数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fakeArr = &#123;<span class=\"number\">0</span>:<span class=\"string\">'a'</span>,<span class=\"number\">1</span>:<span class=\"string\">'b'</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"built_in\">Array</span>.prototype.slice.call(fakeArr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1[<span class=\"number\">0</span>]); <span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [].slice.call(fakeArr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2[<span class=\"number\">0</span>]); <span class=\"comment\">//a</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr1.push(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1); <span class=\"comment\">//[\"a\", \"b\", \"c\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"保存this变量\"><a href=\"#保存this变量\" class=\"headerlink\" title=\"保存this变量\"></a>保存this变量</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常情况下使用变量保存 this 值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span> ;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Act on the event */</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(_this.bar);     <span class=\"comment\">//1</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 bind 进行函数绑定</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Act on the event */</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.bar);      <span class=\"comment\">//1</span></span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Arguments对象作用深度研究","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/08/14/arguments/\n\n> 每个函数都会有一个Arguments对象实例arguments，它引用着函数的实参，可以用数组下标的方式\"[]\"引用arguments的元素。arguments.length为函数实参个数，arguments.callee引用函数自身。\n\n\n----------\n\n### Arguments对象介绍\n\nArguments对象是一个伪数组对象，它有length属性，可以arguments[i]来访问对象中的元素，但它不能用数组的一些方法，例如push，pop，slice等。\n\n#### Arguments的length属性\n\nArguments的length属性，表示function函数实际所传参数的个数。函数名点length可以获取函数期望的传参个数。\n<!-- more -->\n```javascript\nfunction argTest(a,b,c){\n\tvar t = arguments.length; //实际传参个数\n\tvar e = argTest.length;   //期望传参个数\n\t\n\tconsole.log(t);\n\tconsole.log(e);\n}\n\nargTest(11,12);       //t=2,e=3\nargTest(11,12,13);    //t=3,e=3\nargTest(11,12,13,14); //t=4,e=3\n```\n\n\n#### Arguments的参数访问\n\nArguments对象的参数访问可以用arguments[i]来访问函数所传的参数。\n\n```javascript\nfunction argTest(a,b,c){\n\tvar arg = [];\n\tfor(var i=0;i<arguments.length;i++){\n\t\targ.push(arguments[i]);\n\t}\n\tconsole.log(arg);\n}\n\nargTest(11,12);       //[11, 12]\nargTest(11,12,13);    //[11, 12, 13]\nargTest(11,12,13,14); //[11, 12, 13, 14]\n```\n\n#### Arguments的callee调用\n\nArguments的callee属性可以调用函数本身，当函数正在执行时才可调用，可以实现方法的递归调用。\n\n```javascript\nfunction argTest(a,b,c){\n\tvar e = arguments.callee.toString();\n\tconsole.log(e);\n}\n\nargTest(); //打印出函数本身\n```\n\n#### Function对象caller属性\n\nFunction对象的caller属性可以指向当前函数的调用者，当调用者函数正在执行时才可调用，\n\n```javascript\nfunction callerTest(){\n\t\n\tif(callerTest.caller){\n\t\tvar caller = callerTest.caller.toString();\n\t\tconsole.log(caller);\n\t}else{\n\t\tconsole.log(\"no caller\")\n\t}\n}\n\nfunction handler(){\n\tcallerTest();\n}\n\nfunction handlerToHandler(){\n\thandler();\n}\n\ncallerTest();        //no caller\nhandler();           //返回调用者handler函数\nhandlerToHandler();  //返回调用者handler函数\n```\n\n### Arguments的作用\n\n#### 方法重载\n\n方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。\nJavascript并没有重载函数的功能，但是Arguments对象能够模拟重载。\n\n```javascript\n//普通方法实现方法重载\n\nfunction test(a,b,c){\n\tif(a && b && c){\n\t\tconsole.log(a + b + c);\n\t}else if(a && b){\n\t\tconsole.log(a + b);\n\t}else{\n\t\tconsole.log(a);\n\t}\n}\n\ntest();           //undefined\ntest(11,12);      //23\ntest(11,12,13)    //36\n```\n\n```javascript\n//Arguments对象实现方法重载\n\nfunction test(){\n\tvar sum = 0;\n\tfor(var i=0;i<arguments.length;i++){\n\t\tsum += arguments[i];\n\t}\n\tconsole.log(sum);\n}\n\ntest();          //0\ntest(11,12);     //23\ntest(11,12,13);  //36\n```\n\n```javascript\n//ES6实现方法重载\n\nfunction test(...nums){\n\tvar sum = 0;\n\tfor(var i=0;i<nums.length;i++){\n\t\tsum += nums[i];\n\t}\n\tconsole.log(sum);\n}\n\ntest();          //0\ntest(11,12);     //23\ntest(11,12,13);  //36\n```\n\n#### 递归调用\n\n这样的好处就是可以实现匿名函数的递归调用。\n\n```javascript\n//实现一个阶乘函数\n\nfunction factorial(n){\n\tif(n == 1){\n\t\treturn 1;\n\t}else{\n\t\tn * arguments.callee(n-1);\n\t}\n}\n\nfactorial(1); //1\nfactorial(5); //120\n```\n\n#### 不定参问题\n\n比如说，我想判断你传给我的一些数字的大小，取出最大的那个\n\n```javascript\nfunction max(){\n\tvar maxNum = Number.NEGATIVE_INFINITY;;\n\tfor(var i=0;i<arguments.length;i++){\n\t\tif(arguments[i]> maxNum){\n\t\t\tmaxNum = arguments[i];\n\t\t}\n\t}\n\treturn maxNum;\n}\n\nmax(1,2,3,11,4,10); //11\nmax(2,-10,22,11);   //22\n```\n","source":"_posts/study-notes/Arguments对象作用深度研究.md","raw":"title: Arguments对象作用深度研究\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/08/14/arguments/\n\n> 每个函数都会有一个Arguments对象实例arguments，它引用着函数的实参，可以用数组下标的方式\"[]\"引用arguments的元素。arguments.length为函数实参个数，arguments.callee引用函数自身。\n\n\n----------\n\n### Arguments对象介绍\n\nArguments对象是一个伪数组对象，它有length属性，可以arguments[i]来访问对象中的元素，但它不能用数组的一些方法，例如push，pop，slice等。\n\n#### Arguments的length属性\n\nArguments的length属性，表示function函数实际所传参数的个数。函数名点length可以获取函数期望的传参个数。\n<!-- more -->\n```javascript\nfunction argTest(a,b,c){\n\tvar t = arguments.length; //实际传参个数\n\tvar e = argTest.length;   //期望传参个数\n\t\n\tconsole.log(t);\n\tconsole.log(e);\n}\n\nargTest(11,12);       //t=2,e=3\nargTest(11,12,13);    //t=3,e=3\nargTest(11,12,13,14); //t=4,e=3\n```\n\n\n#### Arguments的参数访问\n\nArguments对象的参数访问可以用arguments[i]来访问函数所传的参数。\n\n```javascript\nfunction argTest(a,b,c){\n\tvar arg = [];\n\tfor(var i=0;i<arguments.length;i++){\n\t\targ.push(arguments[i]);\n\t}\n\tconsole.log(arg);\n}\n\nargTest(11,12);       //[11, 12]\nargTest(11,12,13);    //[11, 12, 13]\nargTest(11,12,13,14); //[11, 12, 13, 14]\n```\n\n#### Arguments的callee调用\n\nArguments的callee属性可以调用函数本身，当函数正在执行时才可调用，可以实现方法的递归调用。\n\n```javascript\nfunction argTest(a,b,c){\n\tvar e = arguments.callee.toString();\n\tconsole.log(e);\n}\n\nargTest(); //打印出函数本身\n```\n\n#### Function对象caller属性\n\nFunction对象的caller属性可以指向当前函数的调用者，当调用者函数正在执行时才可调用，\n\n```javascript\nfunction callerTest(){\n\t\n\tif(callerTest.caller){\n\t\tvar caller = callerTest.caller.toString();\n\t\tconsole.log(caller);\n\t}else{\n\t\tconsole.log(\"no caller\")\n\t}\n}\n\nfunction handler(){\n\tcallerTest();\n}\n\nfunction handlerToHandler(){\n\thandler();\n}\n\ncallerTest();        //no caller\nhandler();           //返回调用者handler函数\nhandlerToHandler();  //返回调用者handler函数\n```\n\n### Arguments的作用\n\n#### 方法重载\n\n方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。\nJavascript并没有重载函数的功能，但是Arguments对象能够模拟重载。\n\n```javascript\n//普通方法实现方法重载\n\nfunction test(a,b,c){\n\tif(a && b && c){\n\t\tconsole.log(a + b + c);\n\t}else if(a && b){\n\t\tconsole.log(a + b);\n\t}else{\n\t\tconsole.log(a);\n\t}\n}\n\ntest();           //undefined\ntest(11,12);      //23\ntest(11,12,13)    //36\n```\n\n```javascript\n//Arguments对象实现方法重载\n\nfunction test(){\n\tvar sum = 0;\n\tfor(var i=0;i<arguments.length;i++){\n\t\tsum += arguments[i];\n\t}\n\tconsole.log(sum);\n}\n\ntest();          //0\ntest(11,12);     //23\ntest(11,12,13);  //36\n```\n\n```javascript\n//ES6实现方法重载\n\nfunction test(...nums){\n\tvar sum = 0;\n\tfor(var i=0;i<nums.length;i++){\n\t\tsum += nums[i];\n\t}\n\tconsole.log(sum);\n}\n\ntest();          //0\ntest(11,12);     //23\ntest(11,12,13);  //36\n```\n\n#### 递归调用\n\n这样的好处就是可以实现匿名函数的递归调用。\n\n```javascript\n//实现一个阶乘函数\n\nfunction factorial(n){\n\tif(n == 1){\n\t\treturn 1;\n\t}else{\n\t\tn * arguments.callee(n-1);\n\t}\n}\n\nfactorial(1); //1\nfactorial(5); //120\n```\n\n#### 不定参问题\n\n比如说，我想判断你传给我的一些数字的大小，取出最大的那个\n\n```javascript\nfunction max(){\n\tvar maxNum = Number.NEGATIVE_INFINITY;;\n\tfor(var i=0;i<arguments.length;i++){\n\t\tif(arguments[i]> maxNum){\n\t\t\tmaxNum = arguments[i];\n\t\t}\n\t}\n\treturn maxNum;\n}\n\nmax(1,2,3,11,4,10); //11\nmax(2,-10,22,11);   //22\n```\n","slug":"study-notes/Arguments对象作用深度研究","published":1,"updated":"2019-05-05T06:46:01.792Z","_id":"cj0dgwc6t003k2u6bi7dvwk53","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/14/arguments/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/14/arguments/</a></p>\n<blockquote>\n<p>每个函数都会有一个Arguments对象实例arguments，它引用着函数的实参，可以用数组下标的方式”[]”引用arguments的元素。arguments.length为函数实参个数，arguments.callee引用函数自身。</p>\n</blockquote>\n<hr>\n<h3 id=\"Arguments对象介绍\"><a href=\"#Arguments对象介绍\" class=\"headerlink\" title=\"Arguments对象介绍\"></a>Arguments对象介绍</h3><p>Arguments对象是一个伪数组对象，它有length属性，可以arguments[i]来访问对象中的元素，但它不能用数组的一些方法，例如push，pop，slice等。</p>\n<h4 id=\"Arguments的length属性\"><a href=\"#Arguments的length属性\" class=\"headerlink\" title=\"Arguments的length属性\"></a>Arguments的length属性</h4><p>Arguments的length属性，表示function函数实际所传参数的个数。函数名点length可以获取函数期望的传参个数。<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">argTest</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> t = <span class=\"built_in\">arguments</span>.length; <span class=\"comment\">//实际传参个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> e = argTest.length;   <span class=\"comment\">//期望传参个数</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(t);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>);       <span class=\"comment\">//t=2,e=3</span></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>);    <span class=\"comment\">//t=3,e=3</span></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>); <span class=\"comment\">//t=4,e=3</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Arguments的参数访问\"><a href=\"#Arguments的参数访问\" class=\"headerlink\" title=\"Arguments的参数访问\"></a>Arguments的参数访问</h4><p>Arguments对象的参数访问可以用arguments[i]来访问函数所传的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">argTest</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arg = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</span><br><span class=\"line\">\t\targ.push(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>);       <span class=\"comment\">//[11, 12]</span></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>);    <span class=\"comment\">//[11, 12, 13]</span></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>); <span class=\"comment\">//[11, 12, 13, 14]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Arguments的callee调用\"><a href=\"#Arguments的callee调用\" class=\"headerlink\" title=\"Arguments的callee调用\"></a>Arguments的callee调用</h4><p>Arguments的callee属性可以调用函数本身，当函数正在执行时才可调用，可以实现方法的递归调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">argTest</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> e = <span class=\"built_in\">arguments</span>.callee.toString();</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">argTest(); <span class=\"comment\">//打印出函数本身</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Function对象caller属性\"><a href=\"#Function对象caller属性\" class=\"headerlink\" title=\"Function对象caller属性\"></a>Function对象caller属性</h4><p>Function对象的caller属性可以指向当前函数的调用者，当调用者函数正在执行时才可调用，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callerTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(callerTest.caller)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> caller = callerTest.caller.toString();</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(caller);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"no caller\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tcallerTest();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handlerToHandler</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\thandler();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callerTest();        <span class=\"comment\">//no caller</span></span><br><span class=\"line\">handler();           <span class=\"comment\">//返回调用者handler函数</span></span><br><span class=\"line\">handlerToHandler();  <span class=\"comment\">//返回调用者handler函数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Arguments的作用\"><a href=\"#Arguments的作用\" class=\"headerlink\" title=\"Arguments的作用\"></a>Arguments的作用</h3><h4 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h4><p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。<br>Javascript并没有重载函数的功能，但是Arguments对象能够模拟重载。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通方法实现方法重载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a &amp;&amp; b &amp;&amp; c)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(a + b + c);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a &amp;&amp; b)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();           <span class=\"comment\">//undefined</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>);      <span class=\"comment\">//23</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>)    <span class=\"comment\">//36</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Arguments对象实现方法重载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</span><br><span class=\"line\">\t\tsum += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();          <span class=\"comment\">//0</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>);     <span class=\"comment\">//23</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>);  <span class=\"comment\">//36</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6实现方法重载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">...nums</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">\t\tsum += nums[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();          <span class=\"comment\">//0</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>);     <span class=\"comment\">//23</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>);  <span class=\"comment\">//36</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"递归调用\"><a href=\"#递归调用\" class=\"headerlink\" title=\"递归调用\"></a>递归调用</h4><p>这样的好处就是可以实现匿名函数的递归调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现一个阶乘函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tn * <span class=\"built_in\">arguments</span>.callee(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">1</span>); <span class=\"comment\">//1</span></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>); <span class=\"comment\">//120</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"不定参问题\"><a href=\"#不定参问题\" class=\"headerlink\" title=\"不定参问题\"></a>不定参问题</h4><p>比如说，我想判断你传给我的一些数字的大小，取出最大的那个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Number</span>.NEGATIVE_INFINITY;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[i]&gt; maxNum)&#123;</span><br><span class=\"line\">\t\t\tmaxNum = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> maxNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">max(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">11</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>); <span class=\"comment\">//11</span></span><br><span class=\"line\">max(<span class=\"number\">2</span>,<span class=\"number\">-10</span>,<span class=\"number\">22</span>,<span class=\"number\">11</span>);   <span class=\"comment\">//22</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/14/arguments/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/14/arguments/</a></p>\n<blockquote>\n<p>每个函数都会有一个Arguments对象实例arguments，它引用着函数的实参，可以用数组下标的方式”[]”引用arguments的元素。arguments.length为函数实参个数，arguments.callee引用函数自身。</p>\n</blockquote>\n<hr>\n<h3 id=\"Arguments对象介绍\"><a href=\"#Arguments对象介绍\" class=\"headerlink\" title=\"Arguments对象介绍\"></a>Arguments对象介绍</h3><p>Arguments对象是一个伪数组对象，它有length属性，可以arguments[i]来访问对象中的元素，但它不能用数组的一些方法，例如push，pop，slice等。</p>\n<h4 id=\"Arguments的length属性\"><a href=\"#Arguments的length属性\" class=\"headerlink\" title=\"Arguments的length属性\"></a>Arguments的length属性</h4><p>Arguments的length属性，表示function函数实际所传参数的个数。函数名点length可以获取函数期望的传参个数。<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">argTest</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> t = <span class=\"built_in\">arguments</span>.length; <span class=\"comment\">//实际传参个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> e = argTest.length;   <span class=\"comment\">//期望传参个数</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(t);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>);       <span class=\"comment\">//t=2,e=3</span></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>);    <span class=\"comment\">//t=3,e=3</span></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>); <span class=\"comment\">//t=4,e=3</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Arguments的参数访问\"><a href=\"#Arguments的参数访问\" class=\"headerlink\" title=\"Arguments的参数访问\"></a>Arguments的参数访问</h4><p>Arguments对象的参数访问可以用arguments[i]来访问函数所传的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">argTest</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arg = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</span><br><span class=\"line\">\t\targ.push(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>);       <span class=\"comment\">//[11, 12]</span></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>);    <span class=\"comment\">//[11, 12, 13]</span></span><br><span class=\"line\">argTest(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>); <span class=\"comment\">//[11, 12, 13, 14]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Arguments的callee调用\"><a href=\"#Arguments的callee调用\" class=\"headerlink\" title=\"Arguments的callee调用\"></a>Arguments的callee调用</h4><p>Arguments的callee属性可以调用函数本身，当函数正在执行时才可调用，可以实现方法的递归调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">argTest</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> e = <span class=\"built_in\">arguments</span>.callee.toString();</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">argTest(); <span class=\"comment\">//打印出函数本身</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Function对象caller属性\"><a href=\"#Function对象caller属性\" class=\"headerlink\" title=\"Function对象caller属性\"></a>Function对象caller属性</h4><p>Function对象的caller属性可以指向当前函数的调用者，当调用者函数正在执行时才可调用，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callerTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(callerTest.caller)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> caller = callerTest.caller.toString();</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(caller);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"no caller\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tcallerTest();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handlerToHandler</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\thandler();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callerTest();        <span class=\"comment\">//no caller</span></span><br><span class=\"line\">handler();           <span class=\"comment\">//返回调用者handler函数</span></span><br><span class=\"line\">handlerToHandler();  <span class=\"comment\">//返回调用者handler函数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Arguments的作用\"><a href=\"#Arguments的作用\" class=\"headerlink\" title=\"Arguments的作用\"></a>Arguments的作用</h3><h4 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h4><p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。<br>Javascript并没有重载函数的功能，但是Arguments对象能够模拟重载。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通方法实现方法重载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a &amp;&amp; b &amp;&amp; c)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(a + b + c);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a &amp;&amp; b)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();           <span class=\"comment\">//undefined</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>);      <span class=\"comment\">//23</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>)    <span class=\"comment\">//36</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Arguments对象实现方法重载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</span><br><span class=\"line\">\t\tsum += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();          <span class=\"comment\">//0</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>);     <span class=\"comment\">//23</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>);  <span class=\"comment\">//36</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6实现方法重载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">...nums</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">\t\tsum += nums[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();          <span class=\"comment\">//0</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>);     <span class=\"comment\">//23</span></span><br><span class=\"line\">test(<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>);  <span class=\"comment\">//36</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"递归调用\"><a href=\"#递归调用\" class=\"headerlink\" title=\"递归调用\"></a>递归调用</h4><p>这样的好处就是可以实现匿名函数的递归调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现一个阶乘函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tn * <span class=\"built_in\">arguments</span>.callee(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">1</span>); <span class=\"comment\">//1</span></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>); <span class=\"comment\">//120</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"不定参问题\"><a href=\"#不定参问题\" class=\"headerlink\" title=\"不定参问题\"></a>不定参问题</h4><p>比如说，我想判断你传给我的一些数字的大小，取出最大的那个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Number</span>.NEGATIVE_INFINITY;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[i]&gt; maxNum)&#123;</span><br><span class=\"line\">\t\t\tmaxNum = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> maxNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">max(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">11</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>); <span class=\"comment\">//11</span></span><br><span class=\"line\">max(<span class=\"number\">2</span>,<span class=\"number\">-10</span>,<span class=\"number\">22</span>,<span class=\"number\">11</span>);   <span class=\"comment\">//22</span></span><br></pre></td></tr></table></figure>"},{"title":"JS的原型和原型链","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/08/20/prototype/\n\n> 在JavaScript的使用过程中，我们经常会遇到prototype，可能了解一点，它是一个对象的原型，用来做原型继承的。这样去理解就有点不准确了，今天就让我们深入的去了解它。\n\n\n\n### 了解一些概念\n\n在读这篇文章之前，你应该去在自己的脑海问几个问题：\n1、什么是原型？\n2、什么事原型链？\n3、prototype与\\__proto__有什么不同，有什么联系？\n4、constructor与面两个有什么联系，怎么用？\n\n如果你把上面这四个问题都解决了，那你就真正了解了JS的原型和原型链。接下来，咱们一个一个问题去解决。\n\n<!-- more -->\n### 什么是原型\n\nJavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Object ，Function 是JS自带的函数对象。每个对象都有原型（null和undefined除外），你可以把它理解为对象的默认属性和方法。\n\n你可以把下面的代码在浏览器打印出来看一下。\n\n```javascript\nconsole.log(Object.prototype); //Object{}\n\nvar o = new Object();\nconsole.log(o.prototype);  //undefined\n\nconsole.log(Array.prototype); //[Symbol(Symbol.unscopables): Object]\n\nconsole.log(Function.prototype); //function(){}\n\nfunction hello(){\n\tconsole.log(\"hello\");\n}\nhello.prototype = \"hello world\";\nconsole.log(hello.prototype); //hello world\n```\n\n**Object**：Object是一个函数对象，Object的原型就是一个Object对象，它里面存在着一些对象的方法和属性，例如最常见的toString方法。\n\n**新建对象**：用new Object或者{}建的对象是普通对象，它没有prototype属性，只有\\__proto__属性，它指向Object.prototype。\n\n**Array**：Array也是一个函数对象，它的原型就是Array.prototype，它里面存在着一些数组的方法和属性，例如常见的push，pop等方法。\n\n**Function**：Function也是一个函数对象，但它有点特殊，它的原型就是一个function空函数。\n\n**自定义函数**：它的原型就是你给它指定的那个东西。如果你不指定，那它的原型就是一个Object.prototype。\n\n\n\n### 什么是原型链\n\n在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。\n\nJavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。\n\n```javascript\nvar o = {\n\ta:1,\n\tb:2\n};\nconsole.log(o.toString()); //不报错，o上没有toString方法，但是Object上有\n\nconsole.log(o.push(\"c\")); //报错，o上没有这个方法，Object上也没有这个方法。\n\nconsole.log(o.a); //1\nconsole.log(o.c); //undefined\n```\n当你用new Object或者直接定义一个对象时，它的原型链就是：\no  ==》 Object.prototype ==》 null\n但你访问o上没有的属性或方法时，JS会往Object.prototype上寻找该属性和方法。如果有则直接返回，如果没有，方法则报错，这个方法未定义，属性则返回undefined。\n\n```javascript\nfunction Person(name){\n\tthis.name = name;\n}\nPerson.prototype = {age:24};\n\nvar tsrot = new Person(\"tsrot\");\n\nconsole.log(tsrot.name); //tsrot\nconsole.log(tsrot.age);  //24\nconsole.log(tsrot.toString()); //[object Object]\n```\n当你用构造函数（构造函数我们一般首字母大写）建立一个对象时，它的原型链就是：\ntsrot  ==》 Person.prototype ==》 Object.prototype ==》 null\n如果没有定义Person.prototype这一环，则直接跳到下一环。\n\n\n来点更复杂的。\n```javascript\nfunction Parent(){\n\tthis.name = \"i am parent\";\n}\nParent.prototype = {age:24};\n\nfunction Child(){\n\tthis.name = \"i am child\";\n}\n\nChild.prototype = Object.create(Parent.prototype); //让Child的原型指向Parent的原型\nChild.prototype.constructor = Child; //把child的构造函数指向回来，否则它将指向Parent。虽然在这没什么影响，但要养成代码的严谨性\n\nvar child = new Child();\n\nconsole.log(child.name); //i am child\nconsole.log(child.age);   //24\nconsole.log(child.toString()); //[object Object]\n```\n当你需要父类的属性和方法时，你可以把它的原型指向父类的原型。此时的原型链就是：\nchild ==》 Parent.prototype ==》 Object.prototype ==》 null\n\n```javascript\nvar arr = [1,2,3];\n\nconsole.log(arr); //[1,2,3]\narr.push(4);\nconsole.log(arr); //[1,2,3,4]\n```\n数组也是一个对象，不过它是由Array构造函数new而来的，所以它的原型链就是：\narr ==》 Array.prototype ==》 Object.prototype ==》 null\n\n\n```javascript\nvar fun = function(){\n\tvar hello = \"i am function\";\n}\n\nconsole.log(fun.name); //fun\n```\nfun是一个函数对象，它是由Function构造函数new而来的，所以它的原型链就是：\nfun ==》 Function.prototype  ==》 Object.prototype ==》 null\nfun它没有name属性，但是Function它有，所以这个name就是Function原型上的。\n\n\n\n### prototype与\\__proto__\n\n在Javascript中，每个函数都有一个原型属性prototype指向自身的原型，而由这个函数创建的对象也有一个\\__proto\\__属性指向这个原型，而函数的原型是一个对象（函数点prototype也是一个普通对象，Function.prototype除外,它是函数对象，但它很特殊，他没有prototype属性），所以这个对象也会有一个\\__proto\\__指向自己的原型，这样逐层深入直到Object对象的原型，这样就形成了原型链。普通对象没有prototype，但有\\__proto\\__属性。\n\n```javascript\nfunction f1(){};\n\nconsole.log(f1.prototype) //Object{}\n\nconsole.log(typeof f1.prototype) //Object\n\nconsole.log(typeof Function.prototype) // Function，这个特殊\n\nconsole.log(typeof Object.prototype) //Object\n\nconsole.log(typeof Function.prototype.prototype) //undefined\n```\n\nJS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做\\__proto\\__的内置属性，用于指向创建它的函数对象的原型对象prototype。\n\n**普通对象的\\__proto\\__**\n```javascript\nvar o = {name:\"tsrot\"};\n\nconsole.log(o.__proto__); //Object{}\nconsole.log(o.prototype); //undefined\nconsole.log(o.__proto__ === Object.prototype);  //true\n\n```\n\n**构造对象的\\__proto\\__**\n```javascript\nfunction Parent(){\n\tthis.name = \"i am parent\";\n}\nParent.prototype = {age:24};\n\nfunction Child(){\n\tthis.name = \"i am child\";\n}\n\nChild.prototype = Object.create(Parent.prototype);\nChild.prototype.constructor = Child;\n\nvar child = new Child();\n\nconsole.log(child.__proto__); //Object{}\n\nconsole.log(Child.prototype); //Object{}\n\nconsole.log(child.__proto__ === Child.prototype); //true\n\nconsole.log(Parent.prototype.__proto__ === Object.prototype); //true\n\n```\n\n**数组的\\__proto\\__**\n```javascript\nvar arr = [1,2,3];\n\nconsole.log(arr.__proto__);  //[Symbol(Symbol.unscopables): Object]\n\nconsole.log(Array.prototype); //[Symbol(Symbol.unscopables): Object]\n\nconsole.log(arr.__proto__ === Array.prototype); //true\n\n```\n\n**函数的\\__proto\\__**\n```javascript\nvar fun = function(){\n\tvar hello = \"i am function\"\n}\n\nfun.prototype = {name:\"tsrot\"};\n\nconsole.log(fun.prototype); //Object {name: \"tsrot\"}\n\nconsole.log(fun.__proto__); //function(){}\n\nconsole.log(fun.prototype === fun.__proto__); //false\n\nconsole.log(fun.__proto__ === Function.prototype); //true\n```\n\n\n### constructor属性\n\n原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用：\n\n```javascript\nfunction Person(name){\n\tthis.name = name;\n}\n\nconsole.log(Person.prototype.constructor === Person); //true\n\nconsole.log(Function.prototype.constructor === Function); //true\n\nconsole.log(Object.prototype.constructor === Object); //true\n```\n\n用构造函数创建的对象，它的constructor属性就是它的构造函数。\n```javascript\nfunction Person(name){\n\tthis.name = name;\n}\n\nvar person = new Person();\n\nconsole.log(person.constructor === Person); //true\n\n```\n\n### 参考文章\n1、[JavaScript Prototype Chains](https://www.toptal.com/javascript/javascript-prototypes-scopes-and-performance-what-you-need-to-know)\n2、[Understanding JavaScript Prototypes](https://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/)\n3、[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n","source":"_posts/study-notes/JS的原型和原型链.md","raw":"title: JS的原型和原型链\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/08/20/prototype/\n\n> 在JavaScript的使用过程中，我们经常会遇到prototype，可能了解一点，它是一个对象的原型，用来做原型继承的。这样去理解就有点不准确了，今天就让我们深入的去了解它。\n\n\n\n### 了解一些概念\n\n在读这篇文章之前，你应该去在自己的脑海问几个问题：\n1、什么是原型？\n2、什么事原型链？\n3、prototype与\\__proto__有什么不同，有什么联系？\n4、constructor与面两个有什么联系，怎么用？\n\n如果你把上面这四个问题都解决了，那你就真正了解了JS的原型和原型链。接下来，咱们一个一个问题去解决。\n\n<!-- more -->\n### 什么是原型\n\nJavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Object ，Function 是JS自带的函数对象。每个对象都有原型（null和undefined除外），你可以把它理解为对象的默认属性和方法。\n\n你可以把下面的代码在浏览器打印出来看一下。\n\n```javascript\nconsole.log(Object.prototype); //Object{}\n\nvar o = new Object();\nconsole.log(o.prototype);  //undefined\n\nconsole.log(Array.prototype); //[Symbol(Symbol.unscopables): Object]\n\nconsole.log(Function.prototype); //function(){}\n\nfunction hello(){\n\tconsole.log(\"hello\");\n}\nhello.prototype = \"hello world\";\nconsole.log(hello.prototype); //hello world\n```\n\n**Object**：Object是一个函数对象，Object的原型就是一个Object对象，它里面存在着一些对象的方法和属性，例如最常见的toString方法。\n\n**新建对象**：用new Object或者{}建的对象是普通对象，它没有prototype属性，只有\\__proto__属性，它指向Object.prototype。\n\n**Array**：Array也是一个函数对象，它的原型就是Array.prototype，它里面存在着一些数组的方法和属性，例如常见的push，pop等方法。\n\n**Function**：Function也是一个函数对象，但它有点特殊，它的原型就是一个function空函数。\n\n**自定义函数**：它的原型就是你给它指定的那个东西。如果你不指定，那它的原型就是一个Object.prototype。\n\n\n\n### 什么是原型链\n\n在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。\n\nJavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。\n\n```javascript\nvar o = {\n\ta:1,\n\tb:2\n};\nconsole.log(o.toString()); //不报错，o上没有toString方法，但是Object上有\n\nconsole.log(o.push(\"c\")); //报错，o上没有这个方法，Object上也没有这个方法。\n\nconsole.log(o.a); //1\nconsole.log(o.c); //undefined\n```\n当你用new Object或者直接定义一个对象时，它的原型链就是：\no  ==》 Object.prototype ==》 null\n但你访问o上没有的属性或方法时，JS会往Object.prototype上寻找该属性和方法。如果有则直接返回，如果没有，方法则报错，这个方法未定义，属性则返回undefined。\n\n```javascript\nfunction Person(name){\n\tthis.name = name;\n}\nPerson.prototype = {age:24};\n\nvar tsrot = new Person(\"tsrot\");\n\nconsole.log(tsrot.name); //tsrot\nconsole.log(tsrot.age);  //24\nconsole.log(tsrot.toString()); //[object Object]\n```\n当你用构造函数（构造函数我们一般首字母大写）建立一个对象时，它的原型链就是：\ntsrot  ==》 Person.prototype ==》 Object.prototype ==》 null\n如果没有定义Person.prototype这一环，则直接跳到下一环。\n\n\n来点更复杂的。\n```javascript\nfunction Parent(){\n\tthis.name = \"i am parent\";\n}\nParent.prototype = {age:24};\n\nfunction Child(){\n\tthis.name = \"i am child\";\n}\n\nChild.prototype = Object.create(Parent.prototype); //让Child的原型指向Parent的原型\nChild.prototype.constructor = Child; //把child的构造函数指向回来，否则它将指向Parent。虽然在这没什么影响，但要养成代码的严谨性\n\nvar child = new Child();\n\nconsole.log(child.name); //i am child\nconsole.log(child.age);   //24\nconsole.log(child.toString()); //[object Object]\n```\n当你需要父类的属性和方法时，你可以把它的原型指向父类的原型。此时的原型链就是：\nchild ==》 Parent.prototype ==》 Object.prototype ==》 null\n\n```javascript\nvar arr = [1,2,3];\n\nconsole.log(arr); //[1,2,3]\narr.push(4);\nconsole.log(arr); //[1,2,3,4]\n```\n数组也是一个对象，不过它是由Array构造函数new而来的，所以它的原型链就是：\narr ==》 Array.prototype ==》 Object.prototype ==》 null\n\n\n```javascript\nvar fun = function(){\n\tvar hello = \"i am function\";\n}\n\nconsole.log(fun.name); //fun\n```\nfun是一个函数对象，它是由Function构造函数new而来的，所以它的原型链就是：\nfun ==》 Function.prototype  ==》 Object.prototype ==》 null\nfun它没有name属性，但是Function它有，所以这个name就是Function原型上的。\n\n\n\n### prototype与\\__proto__\n\n在Javascript中，每个函数都有一个原型属性prototype指向自身的原型，而由这个函数创建的对象也有一个\\__proto\\__属性指向这个原型，而函数的原型是一个对象（函数点prototype也是一个普通对象，Function.prototype除外,它是函数对象，但它很特殊，他没有prototype属性），所以这个对象也会有一个\\__proto\\__指向自己的原型，这样逐层深入直到Object对象的原型，这样就形成了原型链。普通对象没有prototype，但有\\__proto\\__属性。\n\n```javascript\nfunction f1(){};\n\nconsole.log(f1.prototype) //Object{}\n\nconsole.log(typeof f1.prototype) //Object\n\nconsole.log(typeof Function.prototype) // Function，这个特殊\n\nconsole.log(typeof Object.prototype) //Object\n\nconsole.log(typeof Function.prototype.prototype) //undefined\n```\n\nJS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做\\__proto\\__的内置属性，用于指向创建它的函数对象的原型对象prototype。\n\n**普通对象的\\__proto\\__**\n```javascript\nvar o = {name:\"tsrot\"};\n\nconsole.log(o.__proto__); //Object{}\nconsole.log(o.prototype); //undefined\nconsole.log(o.__proto__ === Object.prototype);  //true\n\n```\n\n**构造对象的\\__proto\\__**\n```javascript\nfunction Parent(){\n\tthis.name = \"i am parent\";\n}\nParent.prototype = {age:24};\n\nfunction Child(){\n\tthis.name = \"i am child\";\n}\n\nChild.prototype = Object.create(Parent.prototype);\nChild.prototype.constructor = Child;\n\nvar child = new Child();\n\nconsole.log(child.__proto__); //Object{}\n\nconsole.log(Child.prototype); //Object{}\n\nconsole.log(child.__proto__ === Child.prototype); //true\n\nconsole.log(Parent.prototype.__proto__ === Object.prototype); //true\n\n```\n\n**数组的\\__proto\\__**\n```javascript\nvar arr = [1,2,3];\n\nconsole.log(arr.__proto__);  //[Symbol(Symbol.unscopables): Object]\n\nconsole.log(Array.prototype); //[Symbol(Symbol.unscopables): Object]\n\nconsole.log(arr.__proto__ === Array.prototype); //true\n\n```\n\n**函数的\\__proto\\__**\n```javascript\nvar fun = function(){\n\tvar hello = \"i am function\"\n}\n\nfun.prototype = {name:\"tsrot\"};\n\nconsole.log(fun.prototype); //Object {name: \"tsrot\"}\n\nconsole.log(fun.__proto__); //function(){}\n\nconsole.log(fun.prototype === fun.__proto__); //false\n\nconsole.log(fun.__proto__ === Function.prototype); //true\n```\n\n\n### constructor属性\n\n原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用：\n\n```javascript\nfunction Person(name){\n\tthis.name = name;\n}\n\nconsole.log(Person.prototype.constructor === Person); //true\n\nconsole.log(Function.prototype.constructor === Function); //true\n\nconsole.log(Object.prototype.constructor === Object); //true\n```\n\n用构造函数创建的对象，它的constructor属性就是它的构造函数。\n```javascript\nfunction Person(name){\n\tthis.name = name;\n}\n\nvar person = new Person();\n\nconsole.log(person.constructor === Person); //true\n\n```\n\n### 参考文章\n1、[JavaScript Prototype Chains](https://www.toptal.com/javascript/javascript-prototypes-scopes-and-performance-what-you-need-to-know)\n2、[Understanding JavaScript Prototypes](https://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/)\n3、[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n","slug":"study-notes/JS的原型和原型链","published":1,"updated":"2019-05-05T06:48:17.374Z","_id":"cj0dgwc6u003l2u6bw5qjmfgf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/20/prototype/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/20/prototype/</a></p>\n<blockquote>\n<p>在JavaScript的使用过程中，我们经常会遇到prototype，可能了解一点，它是一个对象的原型，用来做原型继承的。这样去理解就有点不准确了，今天就让我们深入的去了解它。</p>\n</blockquote>\n<h3 id=\"了解一些概念\"><a href=\"#了解一些概念\" class=\"headerlink\" title=\"了解一些概念\"></a>了解一些概念</h3><p>在读这篇文章之前，你应该去在自己的脑海问几个问题：<br>1、什么是原型？<br>2、什么事原型链？<br>3、prototype与__proto__有什么不同，有什么联系？<br>4、constructor与面两个有什么联系，怎么用？</p>\n<p>如果你把上面这四个问题都解决了，那你就真正了解了JS的原型和原型链。接下来，咱们一个一个问题去解决。</p>\n<a id=\"more\"></a>\n<h3 id=\"什么是原型\"><a href=\"#什么是原型\" class=\"headerlink\" title=\"什么是原型\"></a>什么是原型</h3><p>JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Object ，Function 是JS自带的函数对象。每个对象都有原型（null和undefined除外），你可以把它理解为对象的默认属性和方法。</p>\n<p>你可以把下面的代码在浏览器打印出来看一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.prototype);  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype); <span class=\"comment\">//[Symbol(Symbol.unscopables): Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.prototype); <span class=\"comment\">//function()&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello.prototype = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hello.prototype); <span class=\"comment\">//hello world</span></span><br></pre></td></tr></table></figure>\n<p><strong>Object</strong>：Object是一个函数对象，Object的原型就是一个Object对象，它里面存在着一些对象的方法和属性，例如最常见的toString方法。</p>\n<p><strong>新建对象</strong>：用new Object或者{}建的对象是普通对象，它没有prototype属性，只有__proto__属性，它指向Object.prototype。</p>\n<p><strong>Array</strong>：Array也是一个函数对象，它的原型就是Array.prototype，它里面存在着一些数组的方法和属性，例如常见的push，pop等方法。</p>\n<p><strong>Function</strong>：Function也是一个函数对象，但它有点特殊，它的原型就是一个function空函数。</p>\n<p><strong>自定义函数</strong>：它的原型就是你给它指定的那个东西。如果你不指定，那它的原型就是一个Object.prototype。</p>\n<h3 id=\"什么是原型链\"><a href=\"#什么是原型链\" class=\"headerlink\" title=\"什么是原型链\"></a>什么是原型链</h3><p>在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。</p>\n<p>JavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tb:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.toString()); <span class=\"comment\">//不报错，o上没有toString方法，但是Object上有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.push(<span class=\"string\">\"c\"</span>)); <span class=\"comment\">//报错，o上没有这个方法，Object上也没有这个方法。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.a); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.c); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>当你用new Object或者直接定义一个对象时，它的原型链就是：<br>o  ==》 Object.prototype ==》 null<br>但你访问o上没有的属性或方法时，JS会往Object.prototype上寻找该属性和方法。如果有则直接返回，如果没有，方法则报错，这个方法未定义，属性则返回undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tsrot = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tsrot\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tsrot.name); <span class=\"comment\">//tsrot</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tsrot.age);  <span class=\"comment\">//24</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tsrot.toString()); <span class=\"comment\">//[object Object]</span></span><br></pre></td></tr></table></figure>\n<p>当你用构造函数（构造函数我们一般首字母大写）建立一个对象时，它的原型链就是：<br>tsrot  ==》 Person.prototype ==》 Object.prototype ==》 null<br>如果没有定义Person.prototype这一环，则直接跳到下一环。</p>\n<p>来点更复杂的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">\"i am parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype = &#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">\"i am child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = <span class=\"built_in\">Object</span>.create(Parent.prototype); <span class=\"comment\">//让Child的原型指向Parent的原型</span></span><br><span class=\"line\">Child.prototype.constructor = Child; <span class=\"comment\">//把child的构造函数指向回来，否则它将指向Parent。虽然在这没什么影响，但要养成代码的严谨性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.name); <span class=\"comment\">//i am child</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.age);   <span class=\"comment\">//24</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.toString()); <span class=\"comment\">//[object Object]</span></span><br></pre></td></tr></table></figure></p>\n<p>当你需要父类的属性和方法时，你可以把它的原型指向父类的原型。此时的原型链就是：<br>child ==》 Parent.prototype ==》 Object.prototype ==》 null</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\">arr.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<p>数组也是一个对象，不过它是由Array构造函数new而来的，所以它的原型链就是：<br>arr ==》 Array.prototype ==》 Object.prototype ==》 null</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hello = <span class=\"string\">\"i am function\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.name); <span class=\"comment\">//fun</span></span><br></pre></td></tr></table></figure>\n<p>fun是一个函数对象，它是由Function构造函数new而来的，所以它的原型链就是：<br>fun ==》 Function.prototype  ==》 Object.prototype ==》 null<br>fun它没有name属性，但是Function它有，所以这个name就是Function原型上的。</p>\n<h3 id=\"prototype与-proto\"><a href=\"#prototype与-proto\" class=\"headerlink\" title=\"prototype与__proto__\"></a>prototype与__proto__</h3><p>在Javascript中，每个函数都有一个原型属性prototype指向自身的原型，而由这个函数创建的对象也有一个__proto__属性指向这个原型，而函数的原型是一个对象（函数点prototype也是一个普通对象，Function.prototype除外,它是函数对象，但它很特殊，他没有prototype属性），所以这个对象也会有一个__proto__指向自己的原型，这样逐层深入直到Object对象的原型，这样就形成了原型链。普通对象没有prototype，但有__proto__属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.prototype) <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> f1.prototype) <span class=\"comment\">//Object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Function</span>.prototype) <span class=\"comment\">// Function，这个特殊</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.prototype) <span class=\"comment\">//Object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Function</span>.prototype.prototype) <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>JS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做__proto__的内置属性，用于指向创建它的函数对象的原型对象prototype。</p>\n<p><strong>普通对象的__proto__</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"tsrot\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.__proto__); <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.prototype); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.__proto__ === <span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>构造对象的__proto__</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">\"i am parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype = &#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">\"i am child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = <span class=\"built_in\">Object</span>.create(Parent.prototype);</span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__); <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Child.prototype); <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__ === Child.prototype); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Parent.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>数组的__proto__</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.__proto__);  <span class=\"comment\">//[Symbol(Symbol.unscopables): Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype); <span class=\"comment\">//[Symbol(Symbol.unscopables): Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.__proto__ === <span class=\"built_in\">Array</span>.prototype); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>函数的__proto__</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hello = <span class=\"string\">\"i am function\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun.prototype = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"tsrot\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.prototype); <span class=\"comment\">//Object &#123;name: \"tsrot\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.__proto__); <span class=\"comment\">//function()&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.prototype === fun.__proto__); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.__proto__ === <span class=\"built_in\">Function</span>.prototype); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"constructor属性\"><a href=\"#constructor属性\" class=\"headerlink\" title=\"constructor属性\"></a>constructor属性</h3><p>原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype.constructor === Person); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.prototype.constructor === <span class=\"built_in\">Function</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.constructor === <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>用构造函数创建的对象，它的constructor属性就是它的构造函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.constructor === Person); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p>1、<a href=\"https://www.toptal.com/javascript/javascript-prototypes-scopes-and-performance-what-you-need-to-know\" target=\"_blank\" rel=\"noopener\">JavaScript Prototype Chains</a><br>2、<a href=\"https://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/\" target=\"_blank\" rel=\"noopener\">Understanding JavaScript Prototypes</a><br>3、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/20/prototype/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/20/prototype/</a></p>\n<blockquote>\n<p>在JavaScript的使用过程中，我们经常会遇到prototype，可能了解一点，它是一个对象的原型，用来做原型继承的。这样去理解就有点不准确了，今天就让我们深入的去了解它。</p>\n</blockquote>\n<h3 id=\"了解一些概念\"><a href=\"#了解一些概念\" class=\"headerlink\" title=\"了解一些概念\"></a>了解一些概念</h3><p>在读这篇文章之前，你应该去在自己的脑海问几个问题：<br>1、什么是原型？<br>2、什么事原型链？<br>3、prototype与__proto__有什么不同，有什么联系？<br>4、constructor与面两个有什么联系，怎么用？</p>\n<p>如果你把上面这四个问题都解决了，那你就真正了解了JS的原型和原型链。接下来，咱们一个一个问题去解决。</p>","more":"<h3 id=\"什么是原型\"><a href=\"#什么是原型\" class=\"headerlink\" title=\"什么是原型\"></a>什么是原型</h3><p>JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Object ，Function 是JS自带的函数对象。每个对象都有原型（null和undefined除外），你可以把它理解为对象的默认属性和方法。</p>\n<p>你可以把下面的代码在浏览器打印出来看一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.prototype);  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype); <span class=\"comment\">//[Symbol(Symbol.unscopables): Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.prototype); <span class=\"comment\">//function()&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello.prototype = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hello.prototype); <span class=\"comment\">//hello world</span></span><br></pre></td></tr></table></figure>\n<p><strong>Object</strong>：Object是一个函数对象，Object的原型就是一个Object对象，它里面存在着一些对象的方法和属性，例如最常见的toString方法。</p>\n<p><strong>新建对象</strong>：用new Object或者{}建的对象是普通对象，它没有prototype属性，只有__proto__属性，它指向Object.prototype。</p>\n<p><strong>Array</strong>：Array也是一个函数对象，它的原型就是Array.prototype，它里面存在着一些数组的方法和属性，例如常见的push，pop等方法。</p>\n<p><strong>Function</strong>：Function也是一个函数对象，但它有点特殊，它的原型就是一个function空函数。</p>\n<p><strong>自定义函数</strong>：它的原型就是你给它指定的那个东西。如果你不指定，那它的原型就是一个Object.prototype。</p>\n<h3 id=\"什么是原型链\"><a href=\"#什么是原型链\" class=\"headerlink\" title=\"什么是原型链\"></a>什么是原型链</h3><p>在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。</p>\n<p>JavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tb:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.toString()); <span class=\"comment\">//不报错，o上没有toString方法，但是Object上有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.push(<span class=\"string\">\"c\"</span>)); <span class=\"comment\">//报错，o上没有这个方法，Object上也没有这个方法。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.a); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.c); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>当你用new Object或者直接定义一个对象时，它的原型链就是：<br>o  ==》 Object.prototype ==》 null<br>但你访问o上没有的属性或方法时，JS会往Object.prototype上寻找该属性和方法。如果有则直接返回，如果没有，方法则报错，这个方法未定义，属性则返回undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tsrot = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tsrot\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tsrot.name); <span class=\"comment\">//tsrot</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tsrot.age);  <span class=\"comment\">//24</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tsrot.toString()); <span class=\"comment\">//[object Object]</span></span><br></pre></td></tr></table></figure>\n<p>当你用构造函数（构造函数我们一般首字母大写）建立一个对象时，它的原型链就是：<br>tsrot  ==》 Person.prototype ==》 Object.prototype ==》 null<br>如果没有定义Person.prototype这一环，则直接跳到下一环。</p>\n<p>来点更复杂的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">\"i am parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype = &#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">\"i am child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = <span class=\"built_in\">Object</span>.create(Parent.prototype); <span class=\"comment\">//让Child的原型指向Parent的原型</span></span><br><span class=\"line\">Child.prototype.constructor = Child; <span class=\"comment\">//把child的构造函数指向回来，否则它将指向Parent。虽然在这没什么影响，但要养成代码的严谨性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.name); <span class=\"comment\">//i am child</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.age);   <span class=\"comment\">//24</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.toString()); <span class=\"comment\">//[object Object]</span></span><br></pre></td></tr></table></figure></p>\n<p>当你需要父类的属性和方法时，你可以把它的原型指向父类的原型。此时的原型链就是：<br>child ==》 Parent.prototype ==》 Object.prototype ==》 null</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\">arr.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<p>数组也是一个对象，不过它是由Array构造函数new而来的，所以它的原型链就是：<br>arr ==》 Array.prototype ==》 Object.prototype ==》 null</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hello = <span class=\"string\">\"i am function\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.name); <span class=\"comment\">//fun</span></span><br></pre></td></tr></table></figure>\n<p>fun是一个函数对象，它是由Function构造函数new而来的，所以它的原型链就是：<br>fun ==》 Function.prototype  ==》 Object.prototype ==》 null<br>fun它没有name属性，但是Function它有，所以这个name就是Function原型上的。</p>\n<h3 id=\"prototype与-proto\"><a href=\"#prototype与-proto\" class=\"headerlink\" title=\"prototype与__proto__\"></a>prototype与__proto__</h3><p>在Javascript中，每个函数都有一个原型属性prototype指向自身的原型，而由这个函数创建的对象也有一个__proto__属性指向这个原型，而函数的原型是一个对象（函数点prototype也是一个普通对象，Function.prototype除外,它是函数对象，但它很特殊，他没有prototype属性），所以这个对象也会有一个__proto__指向自己的原型，这样逐层深入直到Object对象的原型，这样就形成了原型链。普通对象没有prototype，但有__proto__属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.prototype) <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> f1.prototype) <span class=\"comment\">//Object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Function</span>.prototype) <span class=\"comment\">// Function，这个特殊</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.prototype) <span class=\"comment\">//Object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Function</span>.prototype.prototype) <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>JS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做__proto__的内置属性，用于指向创建它的函数对象的原型对象prototype。</p>\n<p><strong>普通对象的__proto__</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"tsrot\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.__proto__); <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.prototype); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.__proto__ === <span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>构造对象的__proto__</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">\"i am parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype = &#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">\"i am child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = <span class=\"built_in\">Object</span>.create(Parent.prototype);</span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__); <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Child.prototype); <span class=\"comment\">//Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__ === Child.prototype); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Parent.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>数组的__proto__</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.__proto__);  <span class=\"comment\">//[Symbol(Symbol.unscopables): Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype); <span class=\"comment\">//[Symbol(Symbol.unscopables): Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.__proto__ === <span class=\"built_in\">Array</span>.prototype); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>函数的__proto__</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hello = <span class=\"string\">\"i am function\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun.prototype = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"tsrot\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.prototype); <span class=\"comment\">//Object &#123;name: \"tsrot\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.__proto__); <span class=\"comment\">//function()&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.prototype === fun.__proto__); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.__proto__ === <span class=\"built_in\">Function</span>.prototype); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"constructor属性\"><a href=\"#constructor属性\" class=\"headerlink\" title=\"constructor属性\"></a>constructor属性</h3><p>原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype.constructor === Person); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.prototype.constructor === <span class=\"built_in\">Function</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.constructor === <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>用构造函数创建的对象，它的constructor属性就是它的构造函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.constructor === Person); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p>1、<a href=\"https://www.toptal.com/javascript/javascript-prototypes-scopes-and-performance-what-you-need-to-know\" target=\"_blank\" rel=\"noopener\">JavaScript Prototype Chains</a><br>2、<a href=\"https://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/\" target=\"_blank\" rel=\"noopener\">Understanding JavaScript Prototypes</a><br>3、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>"},{"title":"JavaScript中this指向","date":"2017-01-05T07:53:29.000Z","_content":"\n> 对于JavaScript初学者来说，this指针的指向问题一直是很混乱的问题。在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了\n> JavaScript 中的 this 关键字，才算是迈入了 JavaScript\n> 这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而\n> JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。\n\n随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，**调用函数的那个对象**。\n\n\n## 1、\t指向window的隐式指向\n```javascript\nfunction sayHello(){\n    this.nama = \"tsrot\";\n    console.log(\"hello \" + this.name);\n}\nsayHello()       //hello tsrot\n```\n<!-- more -->\n此时的变量name相当于window.name，因为调用sayHello函数的对象为window，相当于window.sayHello()。和下面两种情况是一样的：\n```javascript\nvar name = \"tsrot\";\nfunction sayHello(){\n    console.log(\"hello \" + this.name);\n}\nsayHello();        //hello tsrot\n```\n下面的name相当于在window下赋值了两次，谁后面执行就取谁。如果把var name = “xieliqun”放到sayHello（）后面，此时输出的就是 hello xieliqun。\n```javascript\nvar name = \"xieliqun\";\nfunction sayHello(){\n    this.name = \"tsrot\";\n}\nsayHello();       \nconsole.log(\"hello \" + this.name); //hello tsrot\n```\n*注：当函数在DOM上调用时，未传入this，此时，this也指向window。当传入this时，this指向当前DOM input*，例如下面情况：\n```javascript\n<input type=\"button\" value=\"click me\" onclick=\"sayHello()\">\n<script>\n\tfunction sayHello(){\n    \tconsole.log(\"hello \" + this.tagName);   //hello undefined\n    }\n</script>\n```\n```javascript\n<input type=\"button\" value=\"click me\" onclick=\"sayHello(this.tagName)\">\n<script>\n\tfunction sayHello(tagName){\n    \tconsole.log(\"hello \" + tagName);   //hello INPUT\n    }\n</script>\n```\n\n\n----------\n## 2、\t指向当前对象的显式调用\n\n### （1）、作为对象方法的调用\n函数还可以作为某个对象的方法调用，这时this就指这个上级对象。\n```javascript\nfunction sayHello(){\n    console.log(\"hello \" + this.name);\n}\nvar o = {};\no.name = \"tsrot\";\no.hello = sayHello;\no.hello();  //hello tsrot\n```\n### （2）、作为构造函数调用\n所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。\n```javascript\nfunction sayHello(){\n    this.name = \"tsrot\";\n}\nvar o = new sayHello();\nconsole.log(\"hello \" + o.name);  //hello tsrot\n```\n\n----------\n\n\n## 3、\t指向当前对象的隐式调用\n### （1）\tcall、apply调用\ncall（）、apply()都是函数对象的一个方法，它们的作用是改变函数的调用对象，它们的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。\n```javascript\nfunction sayHello(){\n    console.log(\"hello \" + this.name;\n}\nvar o = {};\no.name = \"tsrot\";\no.hello = sayHello;\no.hello.apply();   //hello\n```\napply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。\n如果把最后一行代码修改为\n```javascript\n// o.hello.apply();    //hello\no.hello.apply();      //hello tsrot\n```\n此时this就指向对象o了。\n### （2）\t原生Function方法bind（）调用\n很多人不知道原生js也有bind（）方法，一直以为bind（）的方法只有jQuery有，我也是最近看别人博客知道的。其实原生的bind和jQuery的bind是不同的，原生的bind相当于apply和call。\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\nvar boundFunc = person.sayHello.bind(person,person.sayHello);\nsetTimeout(boundFunc,5000);   //5秒后输出 你好，我是tsrot\n```\n下图代码中person.sayHello,相当于在window.person.sayHello，所以this指向window。\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\n//var boundFunc = person.sayHello.bind(person,person.sayHello);\nsetTimeout(person.sayHello,5000);   //5秒后输出 你好，我是\n```\n用apply和call调用时，函数将立即执行\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\nvar boundFunc = person.sayHello.apply(person,person.sayHello);\nsetTimeout(boundFunc,5000);   //立即输出 你好，我是tsrot\n```\n\n\n----------\n## 4、\t当this在构造函数有return时\n如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return {};\n}\nvar o = new fn();\nconsole.log(o.name);  //undefined\n```\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return function(){};\n}\nvar o = new fn();\nconsole.log(o.name);  //undefined\n```\n当return null和undefined时\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return null;\n}\nvar o = new fn();\nconsole.log(o.name);  //tsrot\n```\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return undefined;\n}\nvar o = new fn();\nconsole.log(o.name);  //tsrot\n```\n","source":"_posts/study-notes/JavaScript中this指向.md","raw":"title: JavaScript中this指向\ndate: 2017-1-5 15:53:29\n---\n\n> 对于JavaScript初学者来说，this指针的指向问题一直是很混乱的问题。在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了\n> JavaScript 中的 this 关键字，才算是迈入了 JavaScript\n> 这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而\n> JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。\n\n随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，**调用函数的那个对象**。\n\n\n## 1、\t指向window的隐式指向\n```javascript\nfunction sayHello(){\n    this.nama = \"tsrot\";\n    console.log(\"hello \" + this.name);\n}\nsayHello()       //hello tsrot\n```\n<!-- more -->\n此时的变量name相当于window.name，因为调用sayHello函数的对象为window，相当于window.sayHello()。和下面两种情况是一样的：\n```javascript\nvar name = \"tsrot\";\nfunction sayHello(){\n    console.log(\"hello \" + this.name);\n}\nsayHello();        //hello tsrot\n```\n下面的name相当于在window下赋值了两次，谁后面执行就取谁。如果把var name = “xieliqun”放到sayHello（）后面，此时输出的就是 hello xieliqun。\n```javascript\nvar name = \"xieliqun\";\nfunction sayHello(){\n    this.name = \"tsrot\";\n}\nsayHello();       \nconsole.log(\"hello \" + this.name); //hello tsrot\n```\n*注：当函数在DOM上调用时，未传入this，此时，this也指向window。当传入this时，this指向当前DOM input*，例如下面情况：\n```javascript\n<input type=\"button\" value=\"click me\" onclick=\"sayHello()\">\n<script>\n\tfunction sayHello(){\n    \tconsole.log(\"hello \" + this.tagName);   //hello undefined\n    }\n</script>\n```\n```javascript\n<input type=\"button\" value=\"click me\" onclick=\"sayHello(this.tagName)\">\n<script>\n\tfunction sayHello(tagName){\n    \tconsole.log(\"hello \" + tagName);   //hello INPUT\n    }\n</script>\n```\n\n\n----------\n## 2、\t指向当前对象的显式调用\n\n### （1）、作为对象方法的调用\n函数还可以作为某个对象的方法调用，这时this就指这个上级对象。\n```javascript\nfunction sayHello(){\n    console.log(\"hello \" + this.name);\n}\nvar o = {};\no.name = \"tsrot\";\no.hello = sayHello;\no.hello();  //hello tsrot\n```\n### （2）、作为构造函数调用\n所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。\n```javascript\nfunction sayHello(){\n    this.name = \"tsrot\";\n}\nvar o = new sayHello();\nconsole.log(\"hello \" + o.name);  //hello tsrot\n```\n\n----------\n\n\n## 3、\t指向当前对象的隐式调用\n### （1）\tcall、apply调用\ncall（）、apply()都是函数对象的一个方法，它们的作用是改变函数的调用对象，它们的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。\n```javascript\nfunction sayHello(){\n    console.log(\"hello \" + this.name;\n}\nvar o = {};\no.name = \"tsrot\";\no.hello = sayHello;\no.hello.apply();   //hello\n```\napply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。\n如果把最后一行代码修改为\n```javascript\n// o.hello.apply();    //hello\no.hello.apply();      //hello tsrot\n```\n此时this就指向对象o了。\n### （2）\t原生Function方法bind（）调用\n很多人不知道原生js也有bind（）方法，一直以为bind（）的方法只有jQuery有，我也是最近看别人博客知道的。其实原生的bind和jQuery的bind是不同的，原生的bind相当于apply和call。\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\nvar boundFunc = person.sayHello.bind(person,person.sayHello);\nsetTimeout(boundFunc,5000);   //5秒后输出 你好，我是tsrot\n```\n下图代码中person.sayHello,相当于在window.person.sayHello，所以this指向window。\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\n//var boundFunc = person.sayHello.bind(person,person.sayHello);\nsetTimeout(person.sayHello,5000);   //5秒后输出 你好，我是\n```\n用apply和call调用时，函数将立即执行\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\nvar boundFunc = person.sayHello.apply(person,person.sayHello);\nsetTimeout(boundFunc,5000);   //立即输出 你好，我是tsrot\n```\n\n\n----------\n## 4、\t当this在构造函数有return时\n如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return {};\n}\nvar o = new fn();\nconsole.log(o.name);  //undefined\n```\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return function(){};\n}\nvar o = new fn();\nconsole.log(o.name);  //undefined\n```\n当return null和undefined时\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return null;\n}\nvar o = new fn();\nconsole.log(o.name);  //tsrot\n```\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return undefined;\n}\nvar o = new fn();\nconsole.log(o.name);  //tsrot\n```\n","slug":"study-notes/JavaScript中this指向","published":1,"updated":"2019-05-05T06:47:39.098Z","_id":"cj0dgwc6v003m2u6b9vhk7fen","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>对于JavaScript初学者来说，this指针的指向问题一直是很混乱的问题。在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了<br>JavaScript 中的 this 关键字，才算是迈入了 JavaScript<br>这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而<br>JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。</p>\n</blockquote>\n<p>随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，<strong>调用函数的那个对象</strong>。</p>\n<h2 id=\"1、-指向window的隐式指向\"><a href=\"#1、-指向window的隐式指向\" class=\"headerlink\" title=\"1、    指向window的隐式指向\"></a>1、    指向window的隐式指向</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nama = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHello()       <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>此时的变量name相当于window.name，因为调用sayHello函数的对象为window，相当于window.sayHello()。和下面两种情况是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHello();        <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p>下面的name相当于在window下赋值了两次，谁后面执行就取谁。如果把var name = “xieliqun”放到sayHello（）后面，此时输出的就是 hello xieliqun。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"xieliqun\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHello();       </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name); <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注：当函数在DOM上调用时，未传入this，此时，this也指向window。当传入this时，this指向当前DOM input</em>，例如下面情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> onclick=<span class=\"string\">\"sayHello()\"</span>&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.tagName);   <span class=\"comment\">//hello undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> onclick=<span class=\"string\">\"sayHello(this.tagName)\"</span>&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">tagName</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + tagName);   <span class=\"comment\">//hello INPUT</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2、-指向当前对象的显式调用\"><a href=\"#2、-指向当前对象的显式调用\" class=\"headerlink\" title=\"2、    指向当前对象的显式调用\"></a>2、    指向当前对象的显式调用</h2><h3 id=\"（1）、作为对象方法的调用\"><a href=\"#（1）、作为对象方法的调用\" class=\"headerlink\" title=\"（1）、作为对象方法的调用\"></a>（1）、作为对象方法的调用</h3><p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">o.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">o.hello = sayHello;</span><br><span class=\"line\">o.hello();  <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"（2）、作为构造函数调用\"><a href=\"#（2）、作为构造函数调用\" class=\"headerlink\" title=\"（2）、作为构造函数调用\"></a>（2）、作为构造函数调用</h3><p>所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> sayHello();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + o.name);  <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"3、-指向当前对象的隐式调用\"><a href=\"#3、-指向当前对象的隐式调用\" class=\"headerlink\" title=\"3、    指向当前对象的隐式调用\"></a>3、    指向当前对象的隐式调用</h2><h3 id=\"（1）-call、apply调用\"><a href=\"#（1）-call、apply调用\" class=\"headerlink\" title=\"（1）    call、apply调用\"></a>（1）    call、apply调用</h3><p>call（）、apply()都是函数对象的一个方法，它们的作用是改变函数的调用对象，它们的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">o.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">o.hello = sayHello;</span><br><span class=\"line\">o.hello.apply();   <span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure></p>\n<p>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。<br>如果把最后一行代码修改为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// o.hello.apply();    //hello</span></span><br><span class=\"line\">o.hello.apply();      <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p>此时this就指向对象o了。</p>\n<h3 id=\"（2）-原生Function方法bind（）调用\"><a href=\"#（2）-原生Function方法bind（）调用\" class=\"headerlink\" title=\"（2）    原生Function方法bind（）调用\"></a>（2）    原生Function方法bind（）调用</h3><p>很多人不知道原生js也有bind（）方法，一直以为bind（）的方法只有jQuery有，我也是最近看别人博客知道的。其实原生的bind和jQuery的bind是不同的，原生的bind相当于apply和call。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(person,person.sayHello);</span><br><span class=\"line\">setTimeout(boundFunc,<span class=\"number\">5000</span>);   <span class=\"comment\">//5秒后输出 你好，我是tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p>下图代码中person.sayHello,相当于在window.person.sayHello，所以this指向window。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//var boundFunc = person.sayHello.bind(person,person.sayHello);</span></span><br><span class=\"line\">setTimeout(person.sayHello,<span class=\"number\">5000</span>);   <span class=\"comment\">//5秒后输出 你好，我是</span></span><br></pre></td></tr></table></figure></p>\n<p>用apply和call调用时，函数将立即执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.apply(person,person.sayHello);</span><br><span class=\"line\">setTimeout(boundFunc,<span class=\"number\">5000</span>);   <span class=\"comment\">//立即输出 你好，我是tsrot</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"4、-当this在构造函数有return时\"><a href=\"#4、-当this在构造函数有return时\" class=\"headerlink\" title=\"4、    当this在构造函数有return时\"></a>4、    当this在构造函数有return时</h2><p>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>当return null和undefined时<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//tsrot</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//tsrot</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>对于JavaScript初学者来说，this指针的指向问题一直是很混乱的问题。在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了<br>JavaScript 中的 this 关键字，才算是迈入了 JavaScript<br>这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而<br>JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。</p>\n</blockquote>\n<p>随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，<strong>调用函数的那个对象</strong>。</p>\n<h2 id=\"1、-指向window的隐式指向\"><a href=\"#1、-指向window的隐式指向\" class=\"headerlink\" title=\"1、    指向window的隐式指向\"></a>1、    指向window的隐式指向</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nama = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHello()       <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure>","more":"<p>此时的变量name相当于window.name，因为调用sayHello函数的对象为window，相当于window.sayHello()。和下面两种情况是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHello();        <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p>下面的name相当于在window下赋值了两次，谁后面执行就取谁。如果把var name = “xieliqun”放到sayHello（）后面，此时输出的就是 hello xieliqun。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"xieliqun\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHello();       </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name); <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注：当函数在DOM上调用时，未传入this，此时，this也指向window。当传入this时，this指向当前DOM input</em>，例如下面情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> onclick=<span class=\"string\">\"sayHello()\"</span>&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.tagName);   <span class=\"comment\">//hello undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> onclick=<span class=\"string\">\"sayHello(this.tagName)\"</span>&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">tagName</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + tagName);   <span class=\"comment\">//hello INPUT</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2、-指向当前对象的显式调用\"><a href=\"#2、-指向当前对象的显式调用\" class=\"headerlink\" title=\"2、    指向当前对象的显式调用\"></a>2、    指向当前对象的显式调用</h2><h3 id=\"（1）、作为对象方法的调用\"><a href=\"#（1）、作为对象方法的调用\" class=\"headerlink\" title=\"（1）、作为对象方法的调用\"></a>（1）、作为对象方法的调用</h3><p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">o.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">o.hello = sayHello;</span><br><span class=\"line\">o.hello();  <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"（2）、作为构造函数调用\"><a href=\"#（2）、作为构造函数调用\" class=\"headerlink\" title=\"（2）、作为构造函数调用\"></a>（2）、作为构造函数调用</h3><p>所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> sayHello();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + o.name);  <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"3、-指向当前对象的隐式调用\"><a href=\"#3、-指向当前对象的隐式调用\" class=\"headerlink\" title=\"3、    指向当前对象的隐式调用\"></a>3、    指向当前对象的隐式调用</h2><h3 id=\"（1）-call、apply调用\"><a href=\"#（1）-call、apply调用\" class=\"headerlink\" title=\"（1）    call、apply调用\"></a>（1）    call、apply调用</h3><p>call（）、apply()都是函数对象的一个方法，它们的作用是改变函数的调用对象，它们的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">o.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">o.hello = sayHello;</span><br><span class=\"line\">o.hello.apply();   <span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure></p>\n<p>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。<br>如果把最后一行代码修改为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// o.hello.apply();    //hello</span></span><br><span class=\"line\">o.hello.apply();      <span class=\"comment\">//hello tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p>此时this就指向对象o了。</p>\n<h3 id=\"（2）-原生Function方法bind（）调用\"><a href=\"#（2）-原生Function方法bind（）调用\" class=\"headerlink\" title=\"（2）    原生Function方法bind（）调用\"></a>（2）    原生Function方法bind（）调用</h3><p>很多人不知道原生js也有bind（）方法，一直以为bind（）的方法只有jQuery有，我也是最近看别人博客知道的。其实原生的bind和jQuery的bind是不同的，原生的bind相当于apply和call。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(person,person.sayHello);</span><br><span class=\"line\">setTimeout(boundFunc,<span class=\"number\">5000</span>);   <span class=\"comment\">//5秒后输出 你好，我是tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p>下图代码中person.sayHello,相当于在window.person.sayHello，所以this指向window。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//var boundFunc = person.sayHello.bind(person,person.sayHello);</span></span><br><span class=\"line\">setTimeout(person.sayHello,<span class=\"number\">5000</span>);   <span class=\"comment\">//5秒后输出 你好，我是</span></span><br></pre></td></tr></table></figure></p>\n<p>用apply和call调用时，函数将立即执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.apply(person,person.sayHello);</span><br><span class=\"line\">setTimeout(boundFunc,<span class=\"number\">5000</span>);   <span class=\"comment\">//立即输出 你好，我是tsrot</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"4、-当this在构造函数有return时\"><a href=\"#4、-当this在构造函数有return时\" class=\"headerlink\" title=\"4、    当this在构造函数有return时\"></a>4、    当this在构造函数有return时</h2><p>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>当return null和undefined时<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//tsrot</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//tsrot</span></span><br></pre></td></tr></table></figure>"},{"title":"React学习资源汇总","date":"2017-01-05T07:53:29.000Z","_content":"博客地址：http://blog.xieliqun.com/2016/11/05/react-study/\n\n\n> React是如今最热门的前端框架，它设计思路独特，性能卓越，逻辑简单，受到了广泛开发者的喜爱。一旦接触她，你就会被她深深吸引。\n> 我断断续续的学了将近两个月，今天终于有时间把自己学习React的一些学习资料总结一下。\n\n**React 官方**\n- 官网地址：http://facebook.github.io/react/\n- Github地址：https://github.com/facebook/react\n\n## 设计思想\n\n学习React之前，我们先了解一下它的设计思想，它与如今其他热门的前端框架有什么不同？它能为我们的开发解决哪些痛点？\n\n1. [React 设计思想](https://github.com/react-guide/react-basic)\n2. [React的设计哲学 - 简单之美](http://www.infoq.com/cn/articles/react-art-of-simplity/) \n3. [颠覆式前端UI开发框架:React](http://www.infoq.com/cn/articles/subversion-front-end-ui-development-framework-react/)\n<!-- more -->\n## 初学者入门\n\n### 文章\n\n可以结合一些简单demo去看文章，例如你在看阮一峰的React 入门实例教程时，可结合他写的入门demo，或官方给的demo。当然你也要边学习边自己去写一些简单demo，去改改别人写的一些React 项目。一定要多动手。\n\n1. [React 入门实例教程-阮一峰](http://www.ruanyifeng.com/blog/2015/03/react.html)：建议先看demo\n2. [一看就懂的ReactJs入门教程（精华版）](http://www.cocoachina.com/webapp/20150721/12692.html)\n3. [React 教程-菜鸟教程](http://www.runoob.com/react/react-tutorial.html)：安装那节好像有点错\n4. [React 入门，5个常用DEMO展示](http://blog.csdn.net/iambinger/article/details/51803606)\n5. [如何学习React](http://www.360doc.com/content/16/0129/07/13518188_531384175.shtml)\n6. [给新手的 React&Webpack 上手教程](https://github.com/theJian/build-a-hn-front-page)\n7. [ReactJS 傻瓜教程](https://zhuanlan.zhihu.com/p/19896745?columnSlug=FrontendMagazine)\n8. [React 最简单的入门应用项目](http://guodavid.tk/2016/08/29/React-Message-board/)\n\n### 入门 demo\n\n1. [官方入门 demo](https://github.com/facebook/react/tree/master/examples)：可结合官方的入门文档\n2. [入门 demo-阮一峰](https://github.com/ruanyf/react-demos)：结合入门文章\n3. [模仿知乎界面的一个简单React demo](https://github.com/tsrot/react-zhihu)：结合 [ReactJS中文基础视频教程-爱酷](http://www.icoolxue.com/album/show/262)\n\n### 入门视频教程\n\n一定要边看边写，不要囫囵吞枣的看一遍就好了。\n\n1. [React入门-慕课网](http://www.imooc.com/learn/504)\n2. [ReactJS中文基础视频教程-爱酷](http://www.icoolxue.com/album/show/262)\n3. [ReactJS中文视频教程](http://react-china.org/t/reactjs/584)\n4. [React教程- 汇智网](http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam)\n\n### 入门实战视频\n\n了解React开发流程，作者的编码思路，写作规范。\n\n1. [React实战--打造画廊应用（上）](http://www.imooc.com/learn/507)\n2. [React实战--打造画廊应用（下）](http://www.imooc.com/learn/652)\n3. [ReactJS中文基础视频教程](http://zexeo.com/course/56753a22b2b8de861c0d281a)\n4. [构建实时聊天应用](http://zexeo.com/course/5672c2bd52b470c02bc28b6c)\n\n## 开发文档\n\n开发其实不用详细去全看，在你做项目时，遇到不懂的就去查看一下文档，我认为这样效率更高一点。当然你有时间也可以一步步去阅读。\n\n1. [官方文档](https://facebook.github.io/react/docs/hello-world.html)\n2. [中文文档](http://reactjs.cn/react/docs/getting-started-zh-CN.html)\n\n## 学习网站\n\n在学习中我们会遇到 一些问题，可以去社区或一些网站寻找答案，下面推荐一些好的React 社区和学习网站。\n\n1. [React中文社区](http://react-china.org/)\n2. [React 中文索引](http://nav.react-china.org/)\n2. [React知识库](http://lib.csdn.net/base/react)\n3. [A quick start to React](https://codepicnic.com/posts/a-quick-start-to-react-0777d5c17d4066b82ab86dff8a46af6f)\n4. [stack overflow](http://stackoverflow.com/questions/tagged/reactjs)\n5. [知乎 React 话题](https://www.zhihu.com/topic/20013159/hot)\n6. [segmentfault React 话题](https://segmentfault.com/t/react.js)\n\n## React技术栈\n\nReact是一款非常优秀的前端框架，你要发挥它完全的性能，你就要结合其他一些技术，例如webpack、redux、react-router等。\n\n1. [React 技术栈系列教程](http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html)\n2. [百度母婴技术团队—基于Reactjs实现webapp](https://github.com/my-fe/wiki/issues/1)\n3. [Building a React Universal Blog App](https://www.sitepoint.com/building-a-react-universal-blog-app-a-step-by-step-guide/)\n4. [React为啥非得使用immutable.js](http://react-china.org/t/react-immutable-js/3770)\n5. [React Server Side Rendering 解决 SPA 应用的 SEO 问题](https://blog.coding.net/blog/React-Server-Side-Rendering-for-SPA-SEO)\n\n6. [webpack官方文档](http://webpack.github.io/docs/)\n7. [Webpack 中文指南](http://webpackdoc.com/)\n8. [webpack一小时快速入门](http://www.w2bc.com/Article/50764)\n9. [使用webpack轻松构建你的第一个react开发框架](http://www.jianshu.com/p/c8a805145046)\n10. [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f#):写的很不错，逐级深入，适合入门，有点长，耐心看完\n\n10. [react-router](https://github.com/ReactTraining/react-router)\n11. [React Router 中文文档](https://react-guide.github.io/react-router-cn/)\n12. [React Router 官方 demo](https://github.com/reactjs/react-router-tutorial/tree/master/lessons)\n\n13. [Redux官网](http://redux.js.org/)\n14. [Redux 中文文档](http://cn.redux.js.org/index.html)\n15. [Redux 官方 demo](https://github.com/reactjs/redux/tree/master/examples)\n16. [Redux 莞式教程](https://github.com/kenberkeley/redux-simple-tutorial)\n17. [Redux 视频教程](https://egghead.io/courses/getting-started-with-redux)\n18. [redux 大法好](http://qiutc.me/post/redux-%E5%A4%A7%E6%B3%95%E5%A5%BD-%E2%80%94%E2%80%94-%E5%85%A5%E9%97%A8%E5%AE%9E%E4%BE%8B-TodoList.html)\n19. [Flux 傻瓜教程](https://zhuanlan.zhihu.com/p/19900243?columnSlug=FrontendMagazine)\n20. [react+redux渲染性能优化原理](http://foio.github.io/react-redux-performance-boost/)\n21. [React开发社区](https://react.ctolib.com/)\n22. [数据流管理架构之 Redux 介绍](http://www.alloyteam.com/2015/09/react-redux/)\n23. [React同构直出优化总结](http://www.alloyteam.com/2016/06/react-isomorphic/)\n24. [前端路由实现与 react-router 源码分析](http://www.alloyteam.com/2016/05/router/)\n25. [如何开发一个 Webpack Loader ( 一 )](http://www.alloyteam.com/2016/01/webpack-loader-1/)\n26. [服务器端渲染实践小结](http://www.alloyteam.com/2015/10/8783/)\n27. [听说你需要这样了解 Redux](https://github.com/rccoder/blog/issues/18)\n28. [学习Redux刷新了我的前端App状态管理观](http://www.jianshu.com/p/94d8f8a36ab0)\n\n## React 开源项目\n\n介绍一些国内外比较好的 React 开源项目。\n\n国内：\n- [阿里的 React 组件库](https://github.com/react-component)\n- [Ant Design](https://github.com/ant-design/ant-design)\n- [简易留言板](https://github.com/tsrot/react-demo)\n- [react-zhihu](https://github.com/tsrot/react-zhihu)\n- [React的扫雷游戏](https://github.com/cjohansen/react-sweeper)\n- [在线聊天室](https://github.com/redsx/CR)\n- [使用React技术栈开发SPA](https://github.com/JasonBai007/reactSPA)\n- [阔论留言评论](https://github.com/NumerHero/kuolun)\n- [React版cnode社区](https://github.com/lzxb/react-cnode)\n\n国外：\n- [Relax](https://github.com/relax/relax)\n- [SoundRedux](https://github.com/andrewngu/sound-redux/)\n- [Gatsby](https://github.com/gatsbyjs/gatsby)\n- [isomorphic500](https://github.com/gpbl/isomorphic500)\n- [NuclearMail](https://github.com/ianobermiller/nuclearmail)\n- [Picard](https://github.com/Automattic/Picard)\n- [React Color](https://github.com/casesandberg/react-color)\n- [Sentry](https://github.com/getsentry/sentry/)\n- [react-hn](https://github.com/insin/react-hn)\n- [Perseus](https://github.com/khan/perseus)\n\n\n\n","source":"_posts/study-notes/React学习资源汇总.md","raw":"title: React学习资源汇总\ndate: 2017-1-5 15:53:29\n---\n博客地址：http://blog.xieliqun.com/2016/11/05/react-study/\n\n\n> React是如今最热门的前端框架，它设计思路独特，性能卓越，逻辑简单，受到了广泛开发者的喜爱。一旦接触她，你就会被她深深吸引。\n> 我断断续续的学了将近两个月，今天终于有时间把自己学习React的一些学习资料总结一下。\n\n**React 官方**\n- 官网地址：http://facebook.github.io/react/\n- Github地址：https://github.com/facebook/react\n\n## 设计思想\n\n学习React之前，我们先了解一下它的设计思想，它与如今其他热门的前端框架有什么不同？它能为我们的开发解决哪些痛点？\n\n1. [React 设计思想](https://github.com/react-guide/react-basic)\n2. [React的设计哲学 - 简单之美](http://www.infoq.com/cn/articles/react-art-of-simplity/) \n3. [颠覆式前端UI开发框架:React](http://www.infoq.com/cn/articles/subversion-front-end-ui-development-framework-react/)\n<!-- more -->\n## 初学者入门\n\n### 文章\n\n可以结合一些简单demo去看文章，例如你在看阮一峰的React 入门实例教程时，可结合他写的入门demo，或官方给的demo。当然你也要边学习边自己去写一些简单demo，去改改别人写的一些React 项目。一定要多动手。\n\n1. [React 入门实例教程-阮一峰](http://www.ruanyifeng.com/blog/2015/03/react.html)：建议先看demo\n2. [一看就懂的ReactJs入门教程（精华版）](http://www.cocoachina.com/webapp/20150721/12692.html)\n3. [React 教程-菜鸟教程](http://www.runoob.com/react/react-tutorial.html)：安装那节好像有点错\n4. [React 入门，5个常用DEMO展示](http://blog.csdn.net/iambinger/article/details/51803606)\n5. [如何学习React](http://www.360doc.com/content/16/0129/07/13518188_531384175.shtml)\n6. [给新手的 React&Webpack 上手教程](https://github.com/theJian/build-a-hn-front-page)\n7. [ReactJS 傻瓜教程](https://zhuanlan.zhihu.com/p/19896745?columnSlug=FrontendMagazine)\n8. [React 最简单的入门应用项目](http://guodavid.tk/2016/08/29/React-Message-board/)\n\n### 入门 demo\n\n1. [官方入门 demo](https://github.com/facebook/react/tree/master/examples)：可结合官方的入门文档\n2. [入门 demo-阮一峰](https://github.com/ruanyf/react-demos)：结合入门文章\n3. [模仿知乎界面的一个简单React demo](https://github.com/tsrot/react-zhihu)：结合 [ReactJS中文基础视频教程-爱酷](http://www.icoolxue.com/album/show/262)\n\n### 入门视频教程\n\n一定要边看边写，不要囫囵吞枣的看一遍就好了。\n\n1. [React入门-慕课网](http://www.imooc.com/learn/504)\n2. [ReactJS中文基础视频教程-爱酷](http://www.icoolxue.com/album/show/262)\n3. [ReactJS中文视频教程](http://react-china.org/t/reactjs/584)\n4. [React教程- 汇智网](http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam)\n\n### 入门实战视频\n\n了解React开发流程，作者的编码思路，写作规范。\n\n1. [React实战--打造画廊应用（上）](http://www.imooc.com/learn/507)\n2. [React实战--打造画廊应用（下）](http://www.imooc.com/learn/652)\n3. [ReactJS中文基础视频教程](http://zexeo.com/course/56753a22b2b8de861c0d281a)\n4. [构建实时聊天应用](http://zexeo.com/course/5672c2bd52b470c02bc28b6c)\n\n## 开发文档\n\n开发其实不用详细去全看，在你做项目时，遇到不懂的就去查看一下文档，我认为这样效率更高一点。当然你有时间也可以一步步去阅读。\n\n1. [官方文档](https://facebook.github.io/react/docs/hello-world.html)\n2. [中文文档](http://reactjs.cn/react/docs/getting-started-zh-CN.html)\n\n## 学习网站\n\n在学习中我们会遇到 一些问题，可以去社区或一些网站寻找答案，下面推荐一些好的React 社区和学习网站。\n\n1. [React中文社区](http://react-china.org/)\n2. [React 中文索引](http://nav.react-china.org/)\n2. [React知识库](http://lib.csdn.net/base/react)\n3. [A quick start to React](https://codepicnic.com/posts/a-quick-start-to-react-0777d5c17d4066b82ab86dff8a46af6f)\n4. [stack overflow](http://stackoverflow.com/questions/tagged/reactjs)\n5. [知乎 React 话题](https://www.zhihu.com/topic/20013159/hot)\n6. [segmentfault React 话题](https://segmentfault.com/t/react.js)\n\n## React技术栈\n\nReact是一款非常优秀的前端框架，你要发挥它完全的性能，你就要结合其他一些技术，例如webpack、redux、react-router等。\n\n1. [React 技术栈系列教程](http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html)\n2. [百度母婴技术团队—基于Reactjs实现webapp](https://github.com/my-fe/wiki/issues/1)\n3. [Building a React Universal Blog App](https://www.sitepoint.com/building-a-react-universal-blog-app-a-step-by-step-guide/)\n4. [React为啥非得使用immutable.js](http://react-china.org/t/react-immutable-js/3770)\n5. [React Server Side Rendering 解决 SPA 应用的 SEO 问题](https://blog.coding.net/blog/React-Server-Side-Rendering-for-SPA-SEO)\n\n6. [webpack官方文档](http://webpack.github.io/docs/)\n7. [Webpack 中文指南](http://webpackdoc.com/)\n8. [webpack一小时快速入门](http://www.w2bc.com/Article/50764)\n9. [使用webpack轻松构建你的第一个react开发框架](http://www.jianshu.com/p/c8a805145046)\n10. [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f#):写的很不错，逐级深入，适合入门，有点长，耐心看完\n\n10. [react-router](https://github.com/ReactTraining/react-router)\n11. [React Router 中文文档](https://react-guide.github.io/react-router-cn/)\n12. [React Router 官方 demo](https://github.com/reactjs/react-router-tutorial/tree/master/lessons)\n\n13. [Redux官网](http://redux.js.org/)\n14. [Redux 中文文档](http://cn.redux.js.org/index.html)\n15. [Redux 官方 demo](https://github.com/reactjs/redux/tree/master/examples)\n16. [Redux 莞式教程](https://github.com/kenberkeley/redux-simple-tutorial)\n17. [Redux 视频教程](https://egghead.io/courses/getting-started-with-redux)\n18. [redux 大法好](http://qiutc.me/post/redux-%E5%A4%A7%E6%B3%95%E5%A5%BD-%E2%80%94%E2%80%94-%E5%85%A5%E9%97%A8%E5%AE%9E%E4%BE%8B-TodoList.html)\n19. [Flux 傻瓜教程](https://zhuanlan.zhihu.com/p/19900243?columnSlug=FrontendMagazine)\n20. [react+redux渲染性能优化原理](http://foio.github.io/react-redux-performance-boost/)\n21. [React开发社区](https://react.ctolib.com/)\n22. [数据流管理架构之 Redux 介绍](http://www.alloyteam.com/2015/09/react-redux/)\n23. [React同构直出优化总结](http://www.alloyteam.com/2016/06/react-isomorphic/)\n24. [前端路由实现与 react-router 源码分析](http://www.alloyteam.com/2016/05/router/)\n25. [如何开发一个 Webpack Loader ( 一 )](http://www.alloyteam.com/2016/01/webpack-loader-1/)\n26. [服务器端渲染实践小结](http://www.alloyteam.com/2015/10/8783/)\n27. [听说你需要这样了解 Redux](https://github.com/rccoder/blog/issues/18)\n28. [学习Redux刷新了我的前端App状态管理观](http://www.jianshu.com/p/94d8f8a36ab0)\n\n## React 开源项目\n\n介绍一些国内外比较好的 React 开源项目。\n\n国内：\n- [阿里的 React 组件库](https://github.com/react-component)\n- [Ant Design](https://github.com/ant-design/ant-design)\n- [简易留言板](https://github.com/tsrot/react-demo)\n- [react-zhihu](https://github.com/tsrot/react-zhihu)\n- [React的扫雷游戏](https://github.com/cjohansen/react-sweeper)\n- [在线聊天室](https://github.com/redsx/CR)\n- [使用React技术栈开发SPA](https://github.com/JasonBai007/reactSPA)\n- [阔论留言评论](https://github.com/NumerHero/kuolun)\n- [React版cnode社区](https://github.com/lzxb/react-cnode)\n\n国外：\n- [Relax](https://github.com/relax/relax)\n- [SoundRedux](https://github.com/andrewngu/sound-redux/)\n- [Gatsby](https://github.com/gatsbyjs/gatsby)\n- [isomorphic500](https://github.com/gpbl/isomorphic500)\n- [NuclearMail](https://github.com/ianobermiller/nuclearmail)\n- [Picard](https://github.com/Automattic/Picard)\n- [React Color](https://github.com/casesandberg/react-color)\n- [Sentry](https://github.com/getsentry/sentry/)\n- [react-hn](https://github.com/insin/react-hn)\n- [Perseus](https://github.com/khan/perseus)\n\n\n\n","slug":"study-notes/React学习资源汇总","published":1,"updated":"2019-05-05T06:48:25.115Z","_id":"cj0dgwc6x003n2u6b4l5772xy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>博客地址：<a href=\"http://blog.xieliqun.com/2016/11/05/react-study/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/11/05/react-study/</a></p>\n<blockquote>\n<p>React是如今最热门的前端框架，它设计思路独特，性能卓越，逻辑简单，受到了广泛开发者的喜爱。一旦接触她，你就会被她深深吸引。<br>我断断续续的学了将近两个月，今天终于有时间把自己学习React的一些学习资料总结一下。</p>\n</blockquote>\n<p><strong>React 官方</strong></p>\n<ul>\n<li>官网地址：<a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener\">http://facebook.github.io/react/</a></li>\n<li>Github地址：<a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react</a></li>\n</ul>\n<h2 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h2><p>学习React之前，我们先了解一下它的设计思想，它与如今其他热门的前端框架有什么不同？它能为我们的开发解决哪些痛点？</p>\n<ol>\n<li><a href=\"https://github.com/react-guide/react-basic\" target=\"_blank\" rel=\"noopener\">React 设计思想</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/react-art-of-simplity/\" target=\"_blank\" rel=\"noopener\">React的设计哲学 - 简单之美</a> </li>\n<li><a href=\"http://www.infoq.com/cn/articles/subversion-front-end-ui-development-framework-react/\" target=\"_blank\" rel=\"noopener\">颠覆式前端UI开发框架:React</a><a id=\"more\"></a>\n<h2 id=\"初学者入门\"><a href=\"#初学者入门\" class=\"headerlink\" title=\"初学者入门\"></a>初学者入门</h2></li>\n</ol>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><p>可以结合一些简单demo去看文章，例如你在看阮一峰的React 入门实例教程时，可结合他写的入门demo，或官方给的demo。当然你也要边学习边自己去写一些简单demo，去改改别人写的一些React 项目。一定要多动手。</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"noopener\">React 入门实例教程-阮一峰</a>：建议先看demo</li>\n<li><a href=\"http://www.cocoachina.com/webapp/20150721/12692.html\" target=\"_blank\" rel=\"noopener\">一看就懂的ReactJs入门教程（精华版）</a></li>\n<li><a href=\"http://www.runoob.com/react/react-tutorial.html\" target=\"_blank\" rel=\"noopener\">React 教程-菜鸟教程</a>：安装那节好像有点错</li>\n<li><a href=\"http://blog.csdn.net/iambinger/article/details/51803606\" target=\"_blank\" rel=\"noopener\">React 入门，5个常用DEMO展示</a></li>\n<li><a href=\"http://www.360doc.com/content/16/0129/07/13518188_531384175.shtml\" target=\"_blank\" rel=\"noopener\">如何学习React</a></li>\n<li><a href=\"https://github.com/theJian/build-a-hn-front-page\" target=\"_blank\" rel=\"noopener\">给新手的 React&amp;Webpack 上手教程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/19896745?columnSlug=FrontendMagazine\" target=\"_blank\" rel=\"noopener\">ReactJS 傻瓜教程</a></li>\n<li><a href=\"http://guodavid.tk/2016/08/29/React-Message-board/\" target=\"_blank\" rel=\"noopener\">React 最简单的入门应用项目</a></li>\n</ol>\n<h3 id=\"入门-demo\"><a href=\"#入门-demo\" class=\"headerlink\" title=\"入门 demo\"></a>入门 demo</h3><ol>\n<li><a href=\"https://github.com/facebook/react/tree/master/examples\" target=\"_blank\" rel=\"noopener\">官方入门 demo</a>：可结合官方的入门文档</li>\n<li><a href=\"https://github.com/ruanyf/react-demos\" target=\"_blank\" rel=\"noopener\">入门 demo-阮一峰</a>：结合入门文章</li>\n<li><a href=\"https://github.com/tsrot/react-zhihu\" target=\"_blank\" rel=\"noopener\">模仿知乎界面的一个简单React demo</a>：结合 <a href=\"http://www.icoolxue.com/album/show/262\" target=\"_blank\" rel=\"noopener\">ReactJS中文基础视频教程-爱酷</a></li>\n</ol>\n<h3 id=\"入门视频教程\"><a href=\"#入门视频教程\" class=\"headerlink\" title=\"入门视频教程\"></a>入门视频教程</h3><p>一定要边看边写，不要囫囵吞枣的看一遍就好了。</p>\n<ol>\n<li><a href=\"http://www.imooc.com/learn/504\" target=\"_blank\" rel=\"noopener\">React入门-慕课网</a></li>\n<li><a href=\"http://www.icoolxue.com/album/show/262\" target=\"_blank\" rel=\"noopener\">ReactJS中文基础视频教程-爱酷</a></li>\n<li><a href=\"http://react-china.org/t/reactjs/584\" target=\"_blank\" rel=\"noopener\">ReactJS中文视频教程</a></li>\n<li><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam\" target=\"_blank\" rel=\"noopener\">React教程- 汇智网</a></li>\n</ol>\n<h3 id=\"入门实战视频\"><a href=\"#入门实战视频\" class=\"headerlink\" title=\"入门实战视频\"></a>入门实战视频</h3><p>了解React开发流程，作者的编码思路，写作规范。</p>\n<ol>\n<li><a href=\"http://www.imooc.com/learn/507\" target=\"_blank\" rel=\"noopener\">React实战–打造画廊应用（上）</a></li>\n<li><a href=\"http://www.imooc.com/learn/652\" target=\"_blank\" rel=\"noopener\">React实战–打造画廊应用（下）</a></li>\n<li><a href=\"http://zexeo.com/course/56753a22b2b8de861c0d281a\" target=\"_blank\" rel=\"noopener\">ReactJS中文基础视频教程</a></li>\n<li><a href=\"http://zexeo.com/course/5672c2bd52b470c02bc28b6c\" target=\"_blank\" rel=\"noopener\">构建实时聊天应用</a></li>\n</ol>\n<h2 id=\"开发文档\"><a href=\"#开发文档\" class=\"headerlink\" title=\"开发文档\"></a>开发文档</h2><p>开发其实不用详细去全看，在你做项目时，遇到不懂的就去查看一下文档，我认为这样效率更高一点。当然你有时间也可以一步步去阅读。</p>\n<ol>\n<li><a href=\"https://facebook.github.io/react/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n<li><a href=\"http://reactjs.cn/react/docs/getting-started-zh-CN.html\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ol>\n<h2 id=\"学习网站\"><a href=\"#学习网站\" class=\"headerlink\" title=\"学习网站\"></a>学习网站</h2><p>在学习中我们会遇到 一些问题，可以去社区或一些网站寻找答案，下面推荐一些好的React 社区和学习网站。</p>\n<ol>\n<li><a href=\"http://react-china.org/\" target=\"_blank\" rel=\"noopener\">React中文社区</a></li>\n<li><a href=\"http://nav.react-china.org/\" target=\"_blank\" rel=\"noopener\">React 中文索引</a></li>\n<li><a href=\"http://lib.csdn.net/base/react\" target=\"_blank\" rel=\"noopener\">React知识库</a></li>\n<li><a href=\"https://codepicnic.com/posts/a-quick-start-to-react-0777d5c17d4066b82ab86dff8a46af6f\" target=\"_blank\" rel=\"noopener\">A quick start to React</a></li>\n<li><a href=\"http://stackoverflow.com/questions/tagged/reactjs\" target=\"_blank\" rel=\"noopener\">stack overflow</a></li>\n<li><a href=\"https://www.zhihu.com/topic/20013159/hot\" target=\"_blank\" rel=\"noopener\">知乎 React 话题</a></li>\n<li><a href=\"https://segmentfault.com/t/react.js\" target=\"_blank\" rel=\"noopener\">segmentfault React 话题</a></li>\n</ol>\n<h2 id=\"React技术栈\"><a href=\"#React技术栈\" class=\"headerlink\" title=\"React技术栈\"></a>React技术栈</h2><p>React是一款非常优秀的前端框架，你要发挥它完全的性能，你就要结合其他一些技术，例如webpack、redux、react-router等。</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\" rel=\"noopener\">React 技术栈系列教程</a></li>\n<li><a href=\"https://github.com/my-fe/wiki/issues/1\" target=\"_blank\" rel=\"noopener\">百度母婴技术团队—基于Reactjs实现webapp</a></li>\n<li><a href=\"https://www.sitepoint.com/building-a-react-universal-blog-app-a-step-by-step-guide/\" target=\"_blank\" rel=\"noopener\">Building a React Universal Blog App</a></li>\n<li><a href=\"http://react-china.org/t/react-immutable-js/3770\" target=\"_blank\" rel=\"noopener\">React为啥非得使用immutable.js</a></li>\n<li><p><a href=\"https://blog.coding.net/blog/React-Server-Side-Rendering-for-SPA-SEO\" target=\"_blank\" rel=\"noopener\">React Server Side Rendering 解决 SPA 应用的 SEO 问题</a></p>\n</li>\n<li><p><a href=\"http://webpack.github.io/docs/\" target=\"_blank\" rel=\"noopener\">webpack官方文档</a></p>\n</li>\n<li><a href=\"http://webpackdoc.com/\" target=\"_blank\" rel=\"noopener\">Webpack 中文指南</a></li>\n<li><a href=\"http://www.w2bc.com/Article/50764\" target=\"_blank\" rel=\"noopener\">webpack一小时快速入门</a></li>\n<li><a href=\"http://www.jianshu.com/p/c8a805145046\" target=\"_blank\" rel=\"noopener\">使用webpack轻松构建你的第一个react开发框架</a></li>\n<li><p><a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a>:写的很不错，逐级深入，适合入门，有点长，耐心看完</p>\n</li>\n<li><p><a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\" rel=\"noopener\">react-router</a></p>\n</li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/\" target=\"_blank\" rel=\"noopener\">React Router 中文文档</a></li>\n<li><p><a href=\"https://github.com/reactjs/react-router-tutorial/tree/master/lessons\" target=\"_blank\" rel=\"noopener\">React Router 官方 demo</a></p>\n</li>\n<li><p><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux官网</a></p>\n</li>\n<li><a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"noopener\">Redux 中文文档</a></li>\n<li><a href=\"https://github.com/reactjs/redux/tree/master/examples\" target=\"_blank\" rel=\"noopener\">Redux 官方 demo</a></li>\n<li><a href=\"https://github.com/kenberkeley/redux-simple-tutorial\" target=\"_blank\" rel=\"noopener\">Redux 莞式教程</a></li>\n<li><a href=\"https://egghead.io/courses/getting-started-with-redux\" target=\"_blank\" rel=\"noopener\">Redux 视频教程</a></li>\n<li><a href=\"http://qiutc.me/post/redux-%E5%A4%A7%E6%B3%95%E5%A5%BD-%E2%80%94%E2%80%94-%E5%85%A5%E9%97%A8%E5%AE%9E%E4%BE%8B-TodoList.html\" target=\"_blank\" rel=\"noopener\">redux 大法好</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/19900243?columnSlug=FrontendMagazine\" target=\"_blank\" rel=\"noopener\">Flux 傻瓜教程</a></li>\n<li><a href=\"http://foio.github.io/react-redux-performance-boost/\" target=\"_blank\" rel=\"noopener\">react+redux渲染性能优化原理</a></li>\n<li><a href=\"https://react.ctolib.com/\" target=\"_blank\" rel=\"noopener\">React开发社区</a></li>\n<li><a href=\"http://www.alloyteam.com/2015/09/react-redux/\" target=\"_blank\" rel=\"noopener\">数据流管理架构之 Redux 介绍</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/06/react-isomorphic/\" target=\"_blank\" rel=\"noopener\">React同构直出优化总结</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/05/router/\" target=\"_blank\" rel=\"noopener\">前端路由实现与 react-router 源码分析</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/01/webpack-loader-1/\" target=\"_blank\" rel=\"noopener\">如何开发一个 Webpack Loader ( 一 )</a></li>\n<li><a href=\"http://www.alloyteam.com/2015/10/8783/\" target=\"_blank\" rel=\"noopener\">服务器端渲染实践小结</a></li>\n<li><a href=\"https://github.com/rccoder/blog/issues/18\" target=\"_blank\" rel=\"noopener\">听说你需要这样了解 Redux</a></li>\n<li><a href=\"http://www.jianshu.com/p/94d8f8a36ab0\" target=\"_blank\" rel=\"noopener\">学习Redux刷新了我的前端App状态管理观</a></li>\n</ol>\n<h2 id=\"React-开源项目\"><a href=\"#React-开源项目\" class=\"headerlink\" title=\"React 开源项目\"></a>React 开源项目</h2><p>介绍一些国内外比较好的 React 开源项目。</p>\n<p>国内：</p>\n<ul>\n<li><a href=\"https://github.com/react-component\" target=\"_blank\" rel=\"noopener\">阿里的 React 组件库</a></li>\n<li><a href=\"https://github.com/ant-design/ant-design\" target=\"_blank\" rel=\"noopener\">Ant Design</a></li>\n<li><a href=\"https://github.com/tsrot/react-demo\" target=\"_blank\" rel=\"noopener\">简易留言板</a></li>\n<li><a href=\"https://github.com/tsrot/react-zhihu\" target=\"_blank\" rel=\"noopener\">react-zhihu</a></li>\n<li><a href=\"https://github.com/cjohansen/react-sweeper\" target=\"_blank\" rel=\"noopener\">React的扫雷游戏</a></li>\n<li><a href=\"https://github.com/redsx/CR\" target=\"_blank\" rel=\"noopener\">在线聊天室</a></li>\n<li><a href=\"https://github.com/JasonBai007/reactSPA\" target=\"_blank\" rel=\"noopener\">使用React技术栈开发SPA</a></li>\n<li><a href=\"https://github.com/NumerHero/kuolun\" target=\"_blank\" rel=\"noopener\">阔论留言评论</a></li>\n<li><a href=\"https://github.com/lzxb/react-cnode\" target=\"_blank\" rel=\"noopener\">React版cnode社区</a></li>\n</ul>\n<p>国外：</p>\n<ul>\n<li><a href=\"https://github.com/relax/relax\" target=\"_blank\" rel=\"noopener\">Relax</a></li>\n<li><a href=\"https://github.com/andrewngu/sound-redux/\" target=\"_blank\" rel=\"noopener\">SoundRedux</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby\" target=\"_blank\" rel=\"noopener\">Gatsby</a></li>\n<li><a href=\"https://github.com/gpbl/isomorphic500\" target=\"_blank\" rel=\"noopener\">isomorphic500</a></li>\n<li><a href=\"https://github.com/ianobermiller/nuclearmail\" target=\"_blank\" rel=\"noopener\">NuclearMail</a></li>\n<li><a href=\"https://github.com/Automattic/Picard\" target=\"_blank\" rel=\"noopener\">Picard</a></li>\n<li><a href=\"https://github.com/casesandberg/react-color\" target=\"_blank\" rel=\"noopener\">React Color</a></li>\n<li><a href=\"https://github.com/getsentry/sentry/\" target=\"_blank\" rel=\"noopener\">Sentry</a></li>\n<li><a href=\"https://github.com/insin/react-hn\" target=\"_blank\" rel=\"noopener\">react-hn</a></li>\n<li><a href=\"https://github.com/khan/perseus\" target=\"_blank\" rel=\"noopener\">Perseus</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>博客地址：<a href=\"http://blog.xieliqun.com/2016/11/05/react-study/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/11/05/react-study/</a></p>\n<blockquote>\n<p>React是如今最热门的前端框架，它设计思路独特，性能卓越，逻辑简单，受到了广泛开发者的喜爱。一旦接触她，你就会被她深深吸引。<br>我断断续续的学了将近两个月，今天终于有时间把自己学习React的一些学习资料总结一下。</p>\n</blockquote>\n<p><strong>React 官方</strong></p>\n<ul>\n<li>官网地址：<a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener\">http://facebook.github.io/react/</a></li>\n<li>Github地址：<a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react</a></li>\n</ul>\n<h2 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h2><p>学习React之前，我们先了解一下它的设计思想，它与如今其他热门的前端框架有什么不同？它能为我们的开发解决哪些痛点？</p>\n<ol>\n<li><a href=\"https://github.com/react-guide/react-basic\" target=\"_blank\" rel=\"noopener\">React 设计思想</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/react-art-of-simplity/\" target=\"_blank\" rel=\"noopener\">React的设计哲学 - 简单之美</a> </li>\n<li><a href=\"http://www.infoq.com/cn/articles/subversion-front-end-ui-development-framework-react/\" target=\"_blank\" rel=\"noopener\">颠覆式前端UI开发框架:React</a>","more":"<h2 id=\"初学者入门\"><a href=\"#初学者入门\" class=\"headerlink\" title=\"初学者入门\"></a>初学者入门</h2></li>\n</ol>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><p>可以结合一些简单demo去看文章，例如你在看阮一峰的React 入门实例教程时，可结合他写的入门demo，或官方给的demo。当然你也要边学习边自己去写一些简单demo，去改改别人写的一些React 项目。一定要多动手。</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"noopener\">React 入门实例教程-阮一峰</a>：建议先看demo</li>\n<li><a href=\"http://www.cocoachina.com/webapp/20150721/12692.html\" target=\"_blank\" rel=\"noopener\">一看就懂的ReactJs入门教程（精华版）</a></li>\n<li><a href=\"http://www.runoob.com/react/react-tutorial.html\" target=\"_blank\" rel=\"noopener\">React 教程-菜鸟教程</a>：安装那节好像有点错</li>\n<li><a href=\"http://blog.csdn.net/iambinger/article/details/51803606\" target=\"_blank\" rel=\"noopener\">React 入门，5个常用DEMO展示</a></li>\n<li><a href=\"http://www.360doc.com/content/16/0129/07/13518188_531384175.shtml\" target=\"_blank\" rel=\"noopener\">如何学习React</a></li>\n<li><a href=\"https://github.com/theJian/build-a-hn-front-page\" target=\"_blank\" rel=\"noopener\">给新手的 React&amp;Webpack 上手教程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/19896745?columnSlug=FrontendMagazine\" target=\"_blank\" rel=\"noopener\">ReactJS 傻瓜教程</a></li>\n<li><a href=\"http://guodavid.tk/2016/08/29/React-Message-board/\" target=\"_blank\" rel=\"noopener\">React 最简单的入门应用项目</a></li>\n</ol>\n<h3 id=\"入门-demo\"><a href=\"#入门-demo\" class=\"headerlink\" title=\"入门 demo\"></a>入门 demo</h3><ol>\n<li><a href=\"https://github.com/facebook/react/tree/master/examples\" target=\"_blank\" rel=\"noopener\">官方入门 demo</a>：可结合官方的入门文档</li>\n<li><a href=\"https://github.com/ruanyf/react-demos\" target=\"_blank\" rel=\"noopener\">入门 demo-阮一峰</a>：结合入门文章</li>\n<li><a href=\"https://github.com/tsrot/react-zhihu\" target=\"_blank\" rel=\"noopener\">模仿知乎界面的一个简单React demo</a>：结合 <a href=\"http://www.icoolxue.com/album/show/262\" target=\"_blank\" rel=\"noopener\">ReactJS中文基础视频教程-爱酷</a></li>\n</ol>\n<h3 id=\"入门视频教程\"><a href=\"#入门视频教程\" class=\"headerlink\" title=\"入门视频教程\"></a>入门视频教程</h3><p>一定要边看边写，不要囫囵吞枣的看一遍就好了。</p>\n<ol>\n<li><a href=\"http://www.imooc.com/learn/504\" target=\"_blank\" rel=\"noopener\">React入门-慕课网</a></li>\n<li><a href=\"http://www.icoolxue.com/album/show/262\" target=\"_blank\" rel=\"noopener\">ReactJS中文基础视频教程-爱酷</a></li>\n<li><a href=\"http://react-china.org/t/reactjs/584\" target=\"_blank\" rel=\"noopener\">ReactJS中文视频教程</a></li>\n<li><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam\" target=\"_blank\" rel=\"noopener\">React教程- 汇智网</a></li>\n</ol>\n<h3 id=\"入门实战视频\"><a href=\"#入门实战视频\" class=\"headerlink\" title=\"入门实战视频\"></a>入门实战视频</h3><p>了解React开发流程，作者的编码思路，写作规范。</p>\n<ol>\n<li><a href=\"http://www.imooc.com/learn/507\" target=\"_blank\" rel=\"noopener\">React实战–打造画廊应用（上）</a></li>\n<li><a href=\"http://www.imooc.com/learn/652\" target=\"_blank\" rel=\"noopener\">React实战–打造画廊应用（下）</a></li>\n<li><a href=\"http://zexeo.com/course/56753a22b2b8de861c0d281a\" target=\"_blank\" rel=\"noopener\">ReactJS中文基础视频教程</a></li>\n<li><a href=\"http://zexeo.com/course/5672c2bd52b470c02bc28b6c\" target=\"_blank\" rel=\"noopener\">构建实时聊天应用</a></li>\n</ol>\n<h2 id=\"开发文档\"><a href=\"#开发文档\" class=\"headerlink\" title=\"开发文档\"></a>开发文档</h2><p>开发其实不用详细去全看，在你做项目时，遇到不懂的就去查看一下文档，我认为这样效率更高一点。当然你有时间也可以一步步去阅读。</p>\n<ol>\n<li><a href=\"https://facebook.github.io/react/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n<li><a href=\"http://reactjs.cn/react/docs/getting-started-zh-CN.html\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ol>\n<h2 id=\"学习网站\"><a href=\"#学习网站\" class=\"headerlink\" title=\"学习网站\"></a>学习网站</h2><p>在学习中我们会遇到 一些问题，可以去社区或一些网站寻找答案，下面推荐一些好的React 社区和学习网站。</p>\n<ol>\n<li><a href=\"http://react-china.org/\" target=\"_blank\" rel=\"noopener\">React中文社区</a></li>\n<li><a href=\"http://nav.react-china.org/\" target=\"_blank\" rel=\"noopener\">React 中文索引</a></li>\n<li><a href=\"http://lib.csdn.net/base/react\" target=\"_blank\" rel=\"noopener\">React知识库</a></li>\n<li><a href=\"https://codepicnic.com/posts/a-quick-start-to-react-0777d5c17d4066b82ab86dff8a46af6f\" target=\"_blank\" rel=\"noopener\">A quick start to React</a></li>\n<li><a href=\"http://stackoverflow.com/questions/tagged/reactjs\" target=\"_blank\" rel=\"noopener\">stack overflow</a></li>\n<li><a href=\"https://www.zhihu.com/topic/20013159/hot\" target=\"_blank\" rel=\"noopener\">知乎 React 话题</a></li>\n<li><a href=\"https://segmentfault.com/t/react.js\" target=\"_blank\" rel=\"noopener\">segmentfault React 话题</a></li>\n</ol>\n<h2 id=\"React技术栈\"><a href=\"#React技术栈\" class=\"headerlink\" title=\"React技术栈\"></a>React技术栈</h2><p>React是一款非常优秀的前端框架，你要发挥它完全的性能，你就要结合其他一些技术，例如webpack、redux、react-router等。</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\" rel=\"noopener\">React 技术栈系列教程</a></li>\n<li><a href=\"https://github.com/my-fe/wiki/issues/1\" target=\"_blank\" rel=\"noopener\">百度母婴技术团队—基于Reactjs实现webapp</a></li>\n<li><a href=\"https://www.sitepoint.com/building-a-react-universal-blog-app-a-step-by-step-guide/\" target=\"_blank\" rel=\"noopener\">Building a React Universal Blog App</a></li>\n<li><a href=\"http://react-china.org/t/react-immutable-js/3770\" target=\"_blank\" rel=\"noopener\">React为啥非得使用immutable.js</a></li>\n<li><p><a href=\"https://blog.coding.net/blog/React-Server-Side-Rendering-for-SPA-SEO\" target=\"_blank\" rel=\"noopener\">React Server Side Rendering 解决 SPA 应用的 SEO 问题</a></p>\n</li>\n<li><p><a href=\"http://webpack.github.io/docs/\" target=\"_blank\" rel=\"noopener\">webpack官方文档</a></p>\n</li>\n<li><a href=\"http://webpackdoc.com/\" target=\"_blank\" rel=\"noopener\">Webpack 中文指南</a></li>\n<li><a href=\"http://www.w2bc.com/Article/50764\" target=\"_blank\" rel=\"noopener\">webpack一小时快速入门</a></li>\n<li><a href=\"http://www.jianshu.com/p/c8a805145046\" target=\"_blank\" rel=\"noopener\">使用webpack轻松构建你的第一个react开发框架</a></li>\n<li><p><a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a>:写的很不错，逐级深入，适合入门，有点长，耐心看完</p>\n</li>\n<li><p><a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\" rel=\"noopener\">react-router</a></p>\n</li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/\" target=\"_blank\" rel=\"noopener\">React Router 中文文档</a></li>\n<li><p><a href=\"https://github.com/reactjs/react-router-tutorial/tree/master/lessons\" target=\"_blank\" rel=\"noopener\">React Router 官方 demo</a></p>\n</li>\n<li><p><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux官网</a></p>\n</li>\n<li><a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"noopener\">Redux 中文文档</a></li>\n<li><a href=\"https://github.com/reactjs/redux/tree/master/examples\" target=\"_blank\" rel=\"noopener\">Redux 官方 demo</a></li>\n<li><a href=\"https://github.com/kenberkeley/redux-simple-tutorial\" target=\"_blank\" rel=\"noopener\">Redux 莞式教程</a></li>\n<li><a href=\"https://egghead.io/courses/getting-started-with-redux\" target=\"_blank\" rel=\"noopener\">Redux 视频教程</a></li>\n<li><a href=\"http://qiutc.me/post/redux-%E5%A4%A7%E6%B3%95%E5%A5%BD-%E2%80%94%E2%80%94-%E5%85%A5%E9%97%A8%E5%AE%9E%E4%BE%8B-TodoList.html\" target=\"_blank\" rel=\"noopener\">redux 大法好</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/19900243?columnSlug=FrontendMagazine\" target=\"_blank\" rel=\"noopener\">Flux 傻瓜教程</a></li>\n<li><a href=\"http://foio.github.io/react-redux-performance-boost/\" target=\"_blank\" rel=\"noopener\">react+redux渲染性能优化原理</a></li>\n<li><a href=\"https://react.ctolib.com/\" target=\"_blank\" rel=\"noopener\">React开发社区</a></li>\n<li><a href=\"http://www.alloyteam.com/2015/09/react-redux/\" target=\"_blank\" rel=\"noopener\">数据流管理架构之 Redux 介绍</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/06/react-isomorphic/\" target=\"_blank\" rel=\"noopener\">React同构直出优化总结</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/05/router/\" target=\"_blank\" rel=\"noopener\">前端路由实现与 react-router 源码分析</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/01/webpack-loader-1/\" target=\"_blank\" rel=\"noopener\">如何开发一个 Webpack Loader ( 一 )</a></li>\n<li><a href=\"http://www.alloyteam.com/2015/10/8783/\" target=\"_blank\" rel=\"noopener\">服务器端渲染实践小结</a></li>\n<li><a href=\"https://github.com/rccoder/blog/issues/18\" target=\"_blank\" rel=\"noopener\">听说你需要这样了解 Redux</a></li>\n<li><a href=\"http://www.jianshu.com/p/94d8f8a36ab0\" target=\"_blank\" rel=\"noopener\">学习Redux刷新了我的前端App状态管理观</a></li>\n</ol>\n<h2 id=\"React-开源项目\"><a href=\"#React-开源项目\" class=\"headerlink\" title=\"React 开源项目\"></a>React 开源项目</h2><p>介绍一些国内外比较好的 React 开源项目。</p>\n<p>国内：</p>\n<ul>\n<li><a href=\"https://github.com/react-component\" target=\"_blank\" rel=\"noopener\">阿里的 React 组件库</a></li>\n<li><a href=\"https://github.com/ant-design/ant-design\" target=\"_blank\" rel=\"noopener\">Ant Design</a></li>\n<li><a href=\"https://github.com/tsrot/react-demo\" target=\"_blank\" rel=\"noopener\">简易留言板</a></li>\n<li><a href=\"https://github.com/tsrot/react-zhihu\" target=\"_blank\" rel=\"noopener\">react-zhihu</a></li>\n<li><a href=\"https://github.com/cjohansen/react-sweeper\" target=\"_blank\" rel=\"noopener\">React的扫雷游戏</a></li>\n<li><a href=\"https://github.com/redsx/CR\" target=\"_blank\" rel=\"noopener\">在线聊天室</a></li>\n<li><a href=\"https://github.com/JasonBai007/reactSPA\" target=\"_blank\" rel=\"noopener\">使用React技术栈开发SPA</a></li>\n<li><a href=\"https://github.com/NumerHero/kuolun\" target=\"_blank\" rel=\"noopener\">阔论留言评论</a></li>\n<li><a href=\"https://github.com/lzxb/react-cnode\" target=\"_blank\" rel=\"noopener\">React版cnode社区</a></li>\n</ul>\n<p>国外：</p>\n<ul>\n<li><a href=\"https://github.com/relax/relax\" target=\"_blank\" rel=\"noopener\">Relax</a></li>\n<li><a href=\"https://github.com/andrewngu/sound-redux/\" target=\"_blank\" rel=\"noopener\">SoundRedux</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby\" target=\"_blank\" rel=\"noopener\">Gatsby</a></li>\n<li><a href=\"https://github.com/gpbl/isomorphic500\" target=\"_blank\" rel=\"noopener\">isomorphic500</a></li>\n<li><a href=\"https://github.com/ianobermiller/nuclearmail\" target=\"_blank\" rel=\"noopener\">NuclearMail</a></li>\n<li><a href=\"https://github.com/Automattic/Picard\" target=\"_blank\" rel=\"noopener\">Picard</a></li>\n<li><a href=\"https://github.com/casesandberg/react-color\" target=\"_blank\" rel=\"noopener\">React Color</a></li>\n<li><a href=\"https://github.com/getsentry/sentry/\" target=\"_blank\" rel=\"noopener\">Sentry</a></li>\n<li><a href=\"https://github.com/insin/react-hn\" target=\"_blank\" rel=\"noopener\">react-hn</a></li>\n<li><a href=\"https://github.com/khan/perseus\" target=\"_blank\" rel=\"noopener\">Perseus</a></li>\n</ul>"},{"title":"JavaScript闭包（closure）","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/08/07/javascript-closure/\n\n>JavaScript变量分为全局变量和局部变量。Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量，而在函数外部自然无法读取函数内的局部变量。当你需要在函数外调用函数内的局部变量时，此时就要用到一些方法。这个过程就是闭包。\n\n\n###一、JavaScript为什么会有闭包这种东西\nJavaScript没有像其它后端语言一样可以直接定义一个变量可供其它外部函数调用的关键字或者方法。于是就产生了闭包这种东西。举个例子：\n```javascript\n//内部函数可以访问外部变量\nvar name = \"tsrot\";\nfunction f1(){\n\tconsole.log(name);\n}\nf1();   //tsrot\n```\n<!-- more -->\n```javascript\n//函数外部无法访问函数内部的局部变量\nfunction f2(){\n\tvar name = \"tsrot\"; //注意:不用var定义的变量，将会默认为全局变量\n}\nconsole.log(name); //error undefined\n```\n如果是java，一个类的私有属性，可以通过公共的方法来获取，比如：\n```java\nclass Person{\n    private String name;\n    public String getName(){\n       return name;    \n    }    \n}\n```\n### 二、闭包的概念\n闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。闭包的特点：\n- 作为一个函数变量的一个引用，当函数返回时，其处于激活状态。\n- 一个闭包就是当一个函数返回时，一个没有释放资源的栈区。\n\n我的理解就是：让函数外部能调用函数内部变量的一个过程就是闭包。举个例子：\n```javascript\nfunction f1(){\n\tvar name1 = \"tsrot\";\n\tfunction f2(){\n\t\treturn name1;\n\t}\n\treturn f2;\n}\nvar fun = f1();    //此时就访问到了name1的值\nconsole.log(fun()) //tsrot\n```\n\n\n###三、闭包的用途\n闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。举个例子：\n```javascript\nfunction f1(){\n\tvar n = 0;\n\tfunction f2(){\n\t\tn++;\n\t\tconsole.log(n);\n\t}\n\treturn f2; //注意此时应该写f2而不是f2()\n}\nvar fun = f1();\nfun();  //1\nfun();  //2  此时n就保存在了内存中\n```\n### 四、闭包的写法\n#### 1、原型调用写法 \n```javascript\n//在函数内部添加属性，然后在外部调用\nfunction Circle(r) {  \n\tthis.r = r;  \n}  \nCircle.PI = 3.14159;  \nCircle.prototype.area = function() {  \n\treturn Circle.PI * this.r * this.r;  \n}\nvar c = new Circle(1.0);     \nconsole.log(c.area()); \n```\n#### 2、函数赋值调用写法\n```javascript\nvar Circle = function() {  \n   var obj = new Object();  \n   obj.PI = 3.14159;  \n   obj.area = function(r) {  \n       return this.PI * r * r;  \n   }  \n   return obj;  \n}; \nvar c = new Circle();  \nconsole.log(c.area(1.0)); \n```\n#### 3、对象赋值调用写法（常用写法）\n```javascript\nvar Circle = new Object();  \nCircle.PI = 3.14159;  \nCircle.area = function(r) {  \n       return this.PI * r * r;  \n};\nconsol.log(Circle.area(1.0));\n```\n#### 4、声明对象调用写法（比较好的一种写法）\n```javascript\nvar Circle={  \n\tPI : 3.14159,  \n\tarea : function(r){  \n\t         return this.PI * r * r;  \n        }  \n};  \nconsole.log(Circle.area(1.0))\n```\n#### 5、Function对象调用写法\n```javascript\n//比较少见的一种写法\nvar Circle = new Function(\"this.PI = 3.14159;this.area = function( r ) {return r*r*this.PI;}\");  \nvar c = new Circle();\nconsole.log(c.area(1.0));\n```\n#### 6、匿名函数调用写法（常用写法）\n```javascript\n(function(r){\n\tvar PI = 3.14159;\n\tvar area = PI * r * r;\n\tconsole.log(area);\n})(1.0)\n```\n#### 7、函数返回值写法（常用写法）\n```javascript\nfunction Circle(r){\n\tvar PI = 3.14159;\n\tfunction area(){\n\t\treturn PI * r * r;\n\t}\n\treturn area();\n}\nconsole.log(Circle(1.0));\n```\n### 五、思考\n思考1：修改下面函数使之输出数组内元素？\n```javascript\nfunction test(){\n\tvar arr = [1,2,3,4,5];\n\tfor(var i=0;i<arr.length;i++){\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(arr[i]);\n\t\t},1000);\n\t}\n}\ntest();\n```\n思考2：修改下面代码使之输出它想表达的结果\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul id=\"list\">\n\t\t<li>1</li>\n\t\t<li>2</li>\n\t\t<li>3</li>\n\t\t<li>4</li>\n\t\t<li>5</li>\n\t</ul>\n<script>\n\tvar list = document.getElementById('list');\n\tvar li = list.getElementsByTagName('li');\n\tfor(var i=0;i<li.length;i++){\n\t\tli[i].onclick = function(){\n\t\t\talert(li[i].innerHTML); //这里报错\n\t\t}\n\t}\n</script>\n</body>\n</html>\n```\n答案1\n```javascript\nfunction test(){\n\tvar arr = [1,2,3,4,5]\n\tfor(var i=0;i<5;i++){\n\t\t(function(i){\n\t\t\tsetTimeout(function(){\n\t\t\t\tconsole.log(arr[i]);\n\t\t\t},1000);\n\t\t})(i)\n\t}\n}\ntest();\n```\n答案2\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul id=\"list\">\n\t\t<li>1</li>\n\t\t<li>2</li>\n\t\t<li>3</li>\n\t\t<li>4</li>\n\t\t<li>5</li>\n\t</ul>\n<script>\n\tvar list = document.getElementById('list');\n\tvar li = list.getElementsByTagName('li');\n\tfor(var i=0;i<li.length;i++){\n\t\t(function(i){\n\t\t\tli[i].onclick = function(){\n\t\t\t\talert(li[i].innerHTML);\n\t\t\t}\n\t\t})(i)\n\t}\n</script>\n</body>\n</html>\n```\n","source":"_posts/study-notes/JavaScript闭包(closure).md","raw":"title: JavaScript闭包（closure）\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/08/07/javascript-closure/\n\n>JavaScript变量分为全局变量和局部变量。Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量，而在函数外部自然无法读取函数内的局部变量。当你需要在函数外调用函数内的局部变量时，此时就要用到一些方法。这个过程就是闭包。\n\n\n###一、JavaScript为什么会有闭包这种东西\nJavaScript没有像其它后端语言一样可以直接定义一个变量可供其它外部函数调用的关键字或者方法。于是就产生了闭包这种东西。举个例子：\n```javascript\n//内部函数可以访问外部变量\nvar name = \"tsrot\";\nfunction f1(){\n\tconsole.log(name);\n}\nf1();   //tsrot\n```\n<!-- more -->\n```javascript\n//函数外部无法访问函数内部的局部变量\nfunction f2(){\n\tvar name = \"tsrot\"; //注意:不用var定义的变量，将会默认为全局变量\n}\nconsole.log(name); //error undefined\n```\n如果是java，一个类的私有属性，可以通过公共的方法来获取，比如：\n```java\nclass Person{\n    private String name;\n    public String getName(){\n       return name;    \n    }    \n}\n```\n### 二、闭包的概念\n闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。闭包的特点：\n- 作为一个函数变量的一个引用，当函数返回时，其处于激活状态。\n- 一个闭包就是当一个函数返回时，一个没有释放资源的栈区。\n\n我的理解就是：让函数外部能调用函数内部变量的一个过程就是闭包。举个例子：\n```javascript\nfunction f1(){\n\tvar name1 = \"tsrot\";\n\tfunction f2(){\n\t\treturn name1;\n\t}\n\treturn f2;\n}\nvar fun = f1();    //此时就访问到了name1的值\nconsole.log(fun()) //tsrot\n```\n\n\n###三、闭包的用途\n闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。举个例子：\n```javascript\nfunction f1(){\n\tvar n = 0;\n\tfunction f2(){\n\t\tn++;\n\t\tconsole.log(n);\n\t}\n\treturn f2; //注意此时应该写f2而不是f2()\n}\nvar fun = f1();\nfun();  //1\nfun();  //2  此时n就保存在了内存中\n```\n### 四、闭包的写法\n#### 1、原型调用写法 \n```javascript\n//在函数内部添加属性，然后在外部调用\nfunction Circle(r) {  \n\tthis.r = r;  \n}  \nCircle.PI = 3.14159;  \nCircle.prototype.area = function() {  \n\treturn Circle.PI * this.r * this.r;  \n}\nvar c = new Circle(1.0);     \nconsole.log(c.area()); \n```\n#### 2、函数赋值调用写法\n```javascript\nvar Circle = function() {  \n   var obj = new Object();  \n   obj.PI = 3.14159;  \n   obj.area = function(r) {  \n       return this.PI * r * r;  \n   }  \n   return obj;  \n}; \nvar c = new Circle();  \nconsole.log(c.area(1.0)); \n```\n#### 3、对象赋值调用写法（常用写法）\n```javascript\nvar Circle = new Object();  \nCircle.PI = 3.14159;  \nCircle.area = function(r) {  \n       return this.PI * r * r;  \n};\nconsol.log(Circle.area(1.0));\n```\n#### 4、声明对象调用写法（比较好的一种写法）\n```javascript\nvar Circle={  \n\tPI : 3.14159,  \n\tarea : function(r){  \n\t         return this.PI * r * r;  \n        }  \n};  \nconsole.log(Circle.area(1.0))\n```\n#### 5、Function对象调用写法\n```javascript\n//比较少见的一种写法\nvar Circle = new Function(\"this.PI = 3.14159;this.area = function( r ) {return r*r*this.PI;}\");  \nvar c = new Circle();\nconsole.log(c.area(1.0));\n```\n#### 6、匿名函数调用写法（常用写法）\n```javascript\n(function(r){\n\tvar PI = 3.14159;\n\tvar area = PI * r * r;\n\tconsole.log(area);\n})(1.0)\n```\n#### 7、函数返回值写法（常用写法）\n```javascript\nfunction Circle(r){\n\tvar PI = 3.14159;\n\tfunction area(){\n\t\treturn PI * r * r;\n\t}\n\treturn area();\n}\nconsole.log(Circle(1.0));\n```\n### 五、思考\n思考1：修改下面函数使之输出数组内元素？\n```javascript\nfunction test(){\n\tvar arr = [1,2,3,4,5];\n\tfor(var i=0;i<arr.length;i++){\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(arr[i]);\n\t\t},1000);\n\t}\n}\ntest();\n```\n思考2：修改下面代码使之输出它想表达的结果\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul id=\"list\">\n\t\t<li>1</li>\n\t\t<li>2</li>\n\t\t<li>3</li>\n\t\t<li>4</li>\n\t\t<li>5</li>\n\t</ul>\n<script>\n\tvar list = document.getElementById('list');\n\tvar li = list.getElementsByTagName('li');\n\tfor(var i=0;i<li.length;i++){\n\t\tli[i].onclick = function(){\n\t\t\talert(li[i].innerHTML); //这里报错\n\t\t}\n\t}\n</script>\n</body>\n</html>\n```\n答案1\n```javascript\nfunction test(){\n\tvar arr = [1,2,3,4,5]\n\tfor(var i=0;i<5;i++){\n\t\t(function(i){\n\t\t\tsetTimeout(function(){\n\t\t\t\tconsole.log(arr[i]);\n\t\t\t},1000);\n\t\t})(i)\n\t}\n}\ntest();\n```\n答案2\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul id=\"list\">\n\t\t<li>1</li>\n\t\t<li>2</li>\n\t\t<li>3</li>\n\t\t<li>4</li>\n\t\t<li>5</li>\n\t</ul>\n<script>\n\tvar list = document.getElementById('list');\n\tvar li = list.getElementsByTagName('li');\n\tfor(var i=0;i<li.length;i++){\n\t\t(function(i){\n\t\t\tli[i].onclick = function(){\n\t\t\t\talert(li[i].innerHTML);\n\t\t\t}\n\t\t})(i)\n\t}\n</script>\n</body>\n</html>\n```\n","slug":"study-notes/JavaScript闭包(closure)","published":1,"updated":"2019-05-05T06:47:48.001Z","_id":"cj0dgwc6y003o2u6bsoj30uv8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/07/javascript-closure/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/07/javascript-closure/</a></p>\n<blockquote>\n<p>JavaScript变量分为全局变量和局部变量。Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量，而在函数外部自然无法读取函数内的局部变量。当你需要在函数外调用函数内的局部变量时，此时就要用到一些方法。这个过程就是闭包。</p>\n</blockquote>\n<p>###一、JavaScript为什么会有闭包这种东西<br>JavaScript没有像其它后端语言一样可以直接定义一个变量可供其它外部函数调用的关键字或者方法。于是就产生了闭包这种东西。举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//内部函数可以访问外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1();   <span class=\"comment\">//tsrot</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数外部无法访问函数内部的局部变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name = <span class=\"string\">\"tsrot\"</span>; <span class=\"comment\">//注意:不用var定义的变量，将会默认为全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//error undefined</span></span><br></pre></td></tr></table></figure>\n<p>如果是java，一个类的私有属性，可以通过公共的方法来获取，比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> name;    </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、闭包的概念\"><a href=\"#二、闭包的概念\" class=\"headerlink\" title=\"二、闭包的概念\"></a>二、闭包的概念</h3><p>闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。闭包的特点：</p>\n<ul>\n<li>作为一个函数变量的一个引用，当函数返回时，其处于激活状态。</li>\n<li>一个闭包就是当一个函数返回时，一个没有释放资源的栈区。</li>\n</ul>\n<p>我的理解就是：让函数外部能调用函数内部变量的一个过程就是闭包。举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name1 = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = f1();    <span class=\"comment\">//此时就访问到了name1的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun()) <span class=\"comment\">//tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p>###三、闭包的用途<br>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\tn++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f2; <span class=\"comment\">//注意此时应该写f2而不是f2()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = f1();</span><br><span class=\"line\">fun();  <span class=\"comment\">//1</span></span><br><span class=\"line\">fun();  <span class=\"comment\">//2  此时n就保存在了内存中</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、闭包的写法\"><a href=\"#四、闭包的写法\" class=\"headerlink\" title=\"四、闭包的写法\"></a>四、闭包的写法</h3><h4 id=\"1、原型调用写法\"><a href=\"#1、原型调用写法\" class=\"headerlink\" title=\"1、原型调用写法\"></a>1、原型调用写法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在函数内部添加属性，然后在外部调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Circle</span>(<span class=\"params\">r</span>) </span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.r = r;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">Circle.PI = <span class=\"number\">3.14159</span>;  </span><br><span class=\"line\">Circle.prototype.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Circle.PI * <span class=\"keyword\">this</span>.r * <span class=\"keyword\">this</span>.r;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> Circle(<span class=\"number\">1.0</span>);     </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.area());</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、函数赋值调用写法\"><a href=\"#2、函数赋值调用写法\" class=\"headerlink\" title=\"2、函数赋值调用写法\"></a>2、函数赋值调用写法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Circle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();  </span><br><span class=\"line\">   obj.PI = <span class=\"number\">3.14159</span>;  </span><br><span class=\"line\">   obj.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>) </span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.PI * r * r;  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> obj;  </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> Circle();  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.area(<span class=\"number\">1.0</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、对象赋值调用写法（常用写法）\"><a href=\"#3、对象赋值调用写法（常用写法）\" class=\"headerlink\" title=\"3、对象赋值调用写法（常用写法）\"></a>3、对象赋值调用写法（常用写法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Circle = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();  </span><br><span class=\"line\">Circle.PI = <span class=\"number\">3.14159</span>;  </span><br><span class=\"line\">Circle.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>) </span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.PI * r * r;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">consol.log(Circle.area(<span class=\"number\">1.0</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、声明对象调用写法（比较好的一种写法）\"><a href=\"#4、声明对象调用写法（比较好的一种写法）\" class=\"headerlink\" title=\"4、声明对象调用写法（比较好的一种写法）\"></a>4、声明对象调用写法（比较好的一种写法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Circle=&#123;  </span><br><span class=\"line\">\tPI : <span class=\"number\">3.14159</span>,  </span><br><span class=\"line\">\tarea : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;  </span><br><span class=\"line\">\t         <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.PI * r * r;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Circle.area(<span class=\"number\">1.0</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、Function对象调用写法\"><a href=\"#5、Function对象调用写法\" class=\"headerlink\" title=\"5、Function对象调用写法\"></a>5、Function对象调用写法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//比较少见的一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Circle = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"this.PI = 3.14159;this.area = function( r ) &#123;return r*r*this.PI;&#125;\"</span>);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> Circle();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.area(<span class=\"number\">1.0</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、匿名函数调用写法（常用写法）\"><a href=\"#6、匿名函数调用写法（常用写法）\" class=\"headerlink\" title=\"6、匿名函数调用写法（常用写法）\"></a>6、匿名函数调用写法（常用写法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> PI = <span class=\"number\">3.14159</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> area = PI * r * r;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(area);</span><br><span class=\"line\">&#125;)(<span class=\"number\">1.0</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"7、函数返回值写法（常用写法）\"><a href=\"#7、函数返回值写法（常用写法）\" class=\"headerlink\" title=\"7、函数返回值写法（常用写法）\"></a>7、函数返回值写法（常用写法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Circle</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> PI = <span class=\"number\">3.14159</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PI * r * r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> area();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Circle(<span class=\"number\">1.0</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、思考\"><a href=\"#五、思考\" class=\"headerlink\" title=\"五、思考\"></a>五、思考</h3><p>思考1：修改下面函数使之输出数组内元素？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure></p>\n<p>思考2：修改下面代码使之输出它想表达的结果<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">5</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/u</span>l&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> li = list.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;li.length;i++)&#123;</span><br><span class=\"line\">\t\tli[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(li[i].innerHTML); <span class=\"comment\">//这里报错</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>答案1<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">\t\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">\t\t\t&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t&#125;)(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure></p>\n<p>答案2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">5</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/u</span>l&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> li = list.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;li.length;i++)&#123;</span><br><span class=\"line\">\t\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tli[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\talert(li[i].innerHTML);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/07/javascript-closure/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/07/javascript-closure/</a></p>\n<blockquote>\n<p>JavaScript变量分为全局变量和局部变量。Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量，而在函数外部自然无法读取函数内的局部变量。当你需要在函数外调用函数内的局部变量时，此时就要用到一些方法。这个过程就是闭包。</p>\n</blockquote>\n<p>###一、JavaScript为什么会有闭包这种东西<br>JavaScript没有像其它后端语言一样可以直接定义一个变量可供其它外部函数调用的关键字或者方法。于是就产生了闭包这种东西。举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//内部函数可以访问外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1();   <span class=\"comment\">//tsrot</span></span><br></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数外部无法访问函数内部的局部变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name = <span class=\"string\">\"tsrot\"</span>; <span class=\"comment\">//注意:不用var定义的变量，将会默认为全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//error undefined</span></span><br></pre></td></tr></table></figure>\n<p>如果是java，一个类的私有属性，可以通过公共的方法来获取，比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> name;    </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、闭包的概念\"><a href=\"#二、闭包的概念\" class=\"headerlink\" title=\"二、闭包的概念\"></a>二、闭包的概念</h3><p>闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。闭包的特点：</p>\n<ul>\n<li>作为一个函数变量的一个引用，当函数返回时，其处于激活状态。</li>\n<li>一个闭包就是当一个函数返回时，一个没有释放资源的栈区。</li>\n</ul>\n<p>我的理解就是：让函数外部能调用函数内部变量的一个过程就是闭包。举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name1 = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = f1();    <span class=\"comment\">//此时就访问到了name1的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun()) <span class=\"comment\">//tsrot</span></span><br></pre></td></tr></table></figure></p>\n<p>###三、闭包的用途<br>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\tn++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f2; <span class=\"comment\">//注意此时应该写f2而不是f2()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = f1();</span><br><span class=\"line\">fun();  <span class=\"comment\">//1</span></span><br><span class=\"line\">fun();  <span class=\"comment\">//2  此时n就保存在了内存中</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、闭包的写法\"><a href=\"#四、闭包的写法\" class=\"headerlink\" title=\"四、闭包的写法\"></a>四、闭包的写法</h3><h4 id=\"1、原型调用写法\"><a href=\"#1、原型调用写法\" class=\"headerlink\" title=\"1、原型调用写法\"></a>1、原型调用写法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在函数内部添加属性，然后在外部调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Circle</span>(<span class=\"params\">r</span>) </span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.r = r;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">Circle.PI = <span class=\"number\">3.14159</span>;  </span><br><span class=\"line\">Circle.prototype.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Circle.PI * <span class=\"keyword\">this</span>.r * <span class=\"keyword\">this</span>.r;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> Circle(<span class=\"number\">1.0</span>);     </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.area());</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、函数赋值调用写法\"><a href=\"#2、函数赋值调用写法\" class=\"headerlink\" title=\"2、函数赋值调用写法\"></a>2、函数赋值调用写法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Circle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();  </span><br><span class=\"line\">   obj.PI = <span class=\"number\">3.14159</span>;  </span><br><span class=\"line\">   obj.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>) </span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.PI * r * r;  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> obj;  </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> Circle();  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.area(<span class=\"number\">1.0</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、对象赋值调用写法（常用写法）\"><a href=\"#3、对象赋值调用写法（常用写法）\" class=\"headerlink\" title=\"3、对象赋值调用写法（常用写法）\"></a>3、对象赋值调用写法（常用写法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Circle = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();  </span><br><span class=\"line\">Circle.PI = <span class=\"number\">3.14159</span>;  </span><br><span class=\"line\">Circle.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>) </span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.PI * r * r;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">consol.log(Circle.area(<span class=\"number\">1.0</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、声明对象调用写法（比较好的一种写法）\"><a href=\"#4、声明对象调用写法（比较好的一种写法）\" class=\"headerlink\" title=\"4、声明对象调用写法（比较好的一种写法）\"></a>4、声明对象调用写法（比较好的一种写法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Circle=&#123;  </span><br><span class=\"line\">\tPI : <span class=\"number\">3.14159</span>,  </span><br><span class=\"line\">\tarea : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;  </span><br><span class=\"line\">\t         <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.PI * r * r;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Circle.area(<span class=\"number\">1.0</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、Function对象调用写法\"><a href=\"#5、Function对象调用写法\" class=\"headerlink\" title=\"5、Function对象调用写法\"></a>5、Function对象调用写法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//比较少见的一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Circle = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"this.PI = 3.14159;this.area = function( r ) &#123;return r*r*this.PI;&#125;\"</span>);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> Circle();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.area(<span class=\"number\">1.0</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、匿名函数调用写法（常用写法）\"><a href=\"#6、匿名函数调用写法（常用写法）\" class=\"headerlink\" title=\"6、匿名函数调用写法（常用写法）\"></a>6、匿名函数调用写法（常用写法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> PI = <span class=\"number\">3.14159</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> area = PI * r * r;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(area);</span><br><span class=\"line\">&#125;)(<span class=\"number\">1.0</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"7、函数返回值写法（常用写法）\"><a href=\"#7、函数返回值写法（常用写法）\" class=\"headerlink\" title=\"7、函数返回值写法（常用写法）\"></a>7、函数返回值写法（常用写法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Circle</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> PI = <span class=\"number\">3.14159</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PI * r * r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> area();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Circle(<span class=\"number\">1.0</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、思考\"><a href=\"#五、思考\" class=\"headerlink\" title=\"五、思考\"></a>五、思考</h3><p>思考1：修改下面函数使之输出数组内元素？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure></p>\n<p>思考2：修改下面代码使之输出它想表达的结果<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">5</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/u</span>l&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> li = list.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;li.length;i++)&#123;</span><br><span class=\"line\">\t\tli[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(li[i].innerHTML); <span class=\"comment\">//这里报错</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>答案1<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">\t\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">\t\t\t&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t&#125;)(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure></p>\n<p>答案2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;<span class=\"number\">5</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/u</span>l&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> li = list.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;li.length;i++)&#123;</span><br><span class=\"line\">\t\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tli[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\talert(li[i].innerHTML);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"html5 API postMessage跨域详解","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/08/25/postMessage-cross-domain/\n\n> window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。\n\n\n----------\n\n### 准备\n\n跨域是什么，我就不详细解释了，我相信你在看这篇文章前就已经了解的差不多了。现在我就直接进入实战阶段。\n\n**两个服务器**：\n- http://127.0.0.1:8080\n- http://127.0.0.1:9090\n\n先建立两个不同域的测试环境。我用http-server（一个node服务器插件）建立了两个不同端口的本地服务器。\n<!-- more -->\n**两个页面**：\n- a.html\n- b.html\n\n在http://127.0.0.1:8080中新建a.html，在http://127.0.0.1:9090中新建b.html。\n\n### 数据发送\n\npostMessage允许用户在两个窗口或frame之间传递数据，无论这个window对象是不是同源都能发送。\n\n首先我们先在a.html中建立一个iframe。\n\n```javascript\n<iframe src=\"http://127.0.0.1:9090/b.html\" frameborder=\"0\" id=\"ifra\" name=\"postIframe\" onload=\"messageLoad()\"></iframe>\n```\n\n当iframe加载完时，发送数据\n\n```javascript\nfunction messageLoad(){\n\t\t\n\tvar url = \"http://127.0.0.1:9090\";\n\n\twindow.postIframe.postMessage(\"给我tsort的信息\",url);\n\n}\n```\n\npostMessage包括两个参数data和url，data为发送的数据，url为发送地址。\n\n\n### 数据接收\n\nhtml5新增了onmessage事件，它和onclick之类用法差不多。当窗口或frame接收到postMessage发送过来的数据时，将触发onmessage事件。\n\n```javascript\nwindow.onmessage = function(e){\n\te = e || event;\n\talert(e.data);\n}\n```\n\n该事件接收一个event对象，这个对象有三个属性，分别为source，origin，data。\n\n**source**： 消息源，消息的发送窗口/iframe。\n**origin**：消息源的URI(可能包含协议、域名和端口)，用来验证数据源。\n**data**：发送方发送给接收方的数据。\n\n### 完整例子\n\n这个例子是这样的，a页面中有一个iframe，这个iframe是另一个域的b页面。当b加载完的时候，让它去给iframe里的页面发送一条信息。然后里面的页面立即回复已经接收到信息，然后再等三秒，回复a所请求的数据。\n\na.html\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n<iframe src=\"http://127.0.0.1:9090/b.html\" name=\"postIframe\" onload=\"messageLoad()\"></iframe>\n\n<script>\n\tfunction messageLoad(){\n\t\tvar url = \"http://127.0.0.1:9090\";\n\t\twindow.postIframe.postMessage(\"给我tsort的信息\",url); //发送数据\n\t}\n\n\twindow.onmessage = function(e){\n\t\te = e || event;\n\t\tconsole.log(e.data); //接收b返回的数据，在控制台有两次输出\n\t}\n</script>\n</body>\n</html>\n```\n\nb.html\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n<script>\n\twindow.onmessage = function(e){\n\t\te = e || event;\n\t\talert(e.data); //立即弹出a发送过来的数据\n\t\te.source.postMessage(\"好的，请稍等三秒！\",e.origin); //立即回复a\n\n\t\tvar postData = {name:\"tsrot\",age:24};\n\t\tvar strData = JSON.stringify(postData); //json对象转化为字符串\n\t\tsetTimeout(function(){\n\t\t\te.source.postMessage(strData,e.origin);\n\t\t},3000); //3秒后向a发送数据\n\t}\n</script>\n</body>\n</html>\n```\n","source":"_posts/study-notes/html5 API postMessage跨域详解.md","raw":"title: html5 API postMessage跨域详解\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/08/25/postMessage-cross-domain/\n\n> window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。\n\n\n----------\n\n### 准备\n\n跨域是什么，我就不详细解释了，我相信你在看这篇文章前就已经了解的差不多了。现在我就直接进入实战阶段。\n\n**两个服务器**：\n- http://127.0.0.1:8080\n- http://127.0.0.1:9090\n\n先建立两个不同域的测试环境。我用http-server（一个node服务器插件）建立了两个不同端口的本地服务器。\n<!-- more -->\n**两个页面**：\n- a.html\n- b.html\n\n在http://127.0.0.1:8080中新建a.html，在http://127.0.0.1:9090中新建b.html。\n\n### 数据发送\n\npostMessage允许用户在两个窗口或frame之间传递数据，无论这个window对象是不是同源都能发送。\n\n首先我们先在a.html中建立一个iframe。\n\n```javascript\n<iframe src=\"http://127.0.0.1:9090/b.html\" frameborder=\"0\" id=\"ifra\" name=\"postIframe\" onload=\"messageLoad()\"></iframe>\n```\n\n当iframe加载完时，发送数据\n\n```javascript\nfunction messageLoad(){\n\t\t\n\tvar url = \"http://127.0.0.1:9090\";\n\n\twindow.postIframe.postMessage(\"给我tsort的信息\",url);\n\n}\n```\n\npostMessage包括两个参数data和url，data为发送的数据，url为发送地址。\n\n\n### 数据接收\n\nhtml5新增了onmessage事件，它和onclick之类用法差不多。当窗口或frame接收到postMessage发送过来的数据时，将触发onmessage事件。\n\n```javascript\nwindow.onmessage = function(e){\n\te = e || event;\n\talert(e.data);\n}\n```\n\n该事件接收一个event对象，这个对象有三个属性，分别为source，origin，data。\n\n**source**： 消息源，消息的发送窗口/iframe。\n**origin**：消息源的URI(可能包含协议、域名和端口)，用来验证数据源。\n**data**：发送方发送给接收方的数据。\n\n### 完整例子\n\n这个例子是这样的，a页面中有一个iframe，这个iframe是另一个域的b页面。当b加载完的时候，让它去给iframe里的页面发送一条信息。然后里面的页面立即回复已经接收到信息，然后再等三秒，回复a所请求的数据。\n\na.html\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n<iframe src=\"http://127.0.0.1:9090/b.html\" name=\"postIframe\" onload=\"messageLoad()\"></iframe>\n\n<script>\n\tfunction messageLoad(){\n\t\tvar url = \"http://127.0.0.1:9090\";\n\t\twindow.postIframe.postMessage(\"给我tsort的信息\",url); //发送数据\n\t}\n\n\twindow.onmessage = function(e){\n\t\te = e || event;\n\t\tconsole.log(e.data); //接收b返回的数据，在控制台有两次输出\n\t}\n</script>\n</body>\n</html>\n```\n\nb.html\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n<script>\n\twindow.onmessage = function(e){\n\t\te = e || event;\n\t\talert(e.data); //立即弹出a发送过来的数据\n\t\te.source.postMessage(\"好的，请稍等三秒！\",e.origin); //立即回复a\n\n\t\tvar postData = {name:\"tsrot\",age:24};\n\t\tvar strData = JSON.stringify(postData); //json对象转化为字符串\n\t\tsetTimeout(function(){\n\t\t\te.source.postMessage(strData,e.origin);\n\t\t},3000); //3秒后向a发送数据\n\t}\n</script>\n</body>\n</html>\n```\n","slug":"study-notes/html5 API postMessage跨域详解","published":1,"updated":"2019-05-05T06:47:28.261Z","_id":"cj0dgwc73003p2u6btw9ztzbo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/25/postMessage-cross-domain/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/25/postMessage-cross-domain/</a></p>\n<blockquote>\n<p>window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。</p>\n</blockquote>\n<hr>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>跨域是什么，我就不详细解释了，我相信你在看这篇文章前就已经了解的差不多了。现在我就直接进入实战阶段。</p>\n<p><strong>两个服务器</strong>：</p>\n<ul>\n<li><a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a></li>\n<li><a href=\"http://127.0.0.1:9090\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9090</a></li>\n</ul>\n<p>先建立两个不同域的测试环境。我用http-server（一个node服务器插件）建立了两个不同端口的本地服务器。<br><a id=\"more\"></a><br><strong>两个页面</strong>：</p>\n<ul>\n<li>a.html</li>\n<li>b.html</li>\n</ul>\n<p>在<a href=\"http://127.0.0.1:8080中新建a.html，在http://127.0.0.1:9090中新建b.html。\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080中新建a.html，在http://127.0.0.1:9090中新建b.html。</a></p>\n<h3 id=\"数据发送\"><a href=\"#数据发送\" class=\"headerlink\" title=\"数据发送\"></a>数据发送</h3><p>postMessage允许用户在两个窗口或frame之间传递数据，无论这个window对象是不是同源都能发送。</p>\n<p>首先我们先在a.html中建立一个iframe。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe src=<span class=\"string\">\"http://127.0.0.1:9090/b.html\"</span> frameborder=<span class=\"string\">\"0\"</span> id=<span class=\"string\">\"ifra\"</span> name=<span class=\"string\">\"postIframe\"</span> onload=<span class=\"string\">\"messageLoad()\"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n<p>当iframe加载完时，发送数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">messageLoad</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> url = <span class=\"string\">\"http://127.0.0.1:9090\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.postIframe.postMessage(<span class=\"string\">\"给我tsort的信息\"</span>,url);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>postMessage包括两个参数data和url，data为发送的数据，url为发送地址。</p>\n<h3 id=\"数据接收\"><a href=\"#数据接收\" class=\"headerlink\" title=\"数据接收\"></a>数据接收</h3><p>html5新增了onmessage事件，它和onclick之类用法差不多。当窗口或frame接收到postMessage发送过来的数据时，将触发onmessage事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\te = e || event;</span><br><span class=\"line\">\talert(e.data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该事件接收一个event对象，这个对象有三个属性，分别为source，origin，data。</p>\n<p><strong>source</strong>： 消息源，消息的发送窗口/iframe。<br><strong>origin</strong>：消息源的URI(可能包含协议、域名和端口)，用来验证数据源。<br><strong>data</strong>：发送方发送给接收方的数据。</p>\n<h3 id=\"完整例子\"><a href=\"#完整例子\" class=\"headerlink\" title=\"完整例子\"></a>完整例子</h3><p>这个例子是这样的，a页面中有一个iframe，这个iframe是另一个域的b页面。当b加载完的时候，让它去给iframe里的页面发送一条信息。然后里面的页面立即回复已经接收到信息，然后再等三秒，回复a所请求的数据。</p>\n<p>a.html</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;iframe src=<span class=\"string\">\"http://127.0.0.1:9090/b.html\"</span> name=<span class=\"string\">\"postIframe\"</span> onload=<span class=\"string\">\"messageLoad()\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">messageLoad</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> url = <span class=\"string\">\"http://127.0.0.1:9090\"</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">window</span>.postIframe.postMessage(<span class=\"string\">\"给我tsort的信息\"</span>,url); <span class=\"comment\">//发送数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t\te = e || event;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(e.data); <span class=\"comment\">//接收b返回的数据，在控制台有两次输出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n<p>b.html</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t\te = e || event;</span><br><span class=\"line\">\t\talert(e.data); <span class=\"comment\">//立即弹出a发送过来的数据</span></span><br><span class=\"line\">\t\te.source.postMessage(<span class=\"string\">\"好的，请稍等三秒！\"</span>,e.origin); <span class=\"comment\">//立即回复a</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> postData = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"tsrot\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> strData = <span class=\"built_in\">JSON</span>.stringify(postData); <span class=\"comment\">//json对象转化为字符串</span></span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\te.source.postMessage(strData,e.origin);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">3000</span>); <span class=\"comment\">//3秒后向a发送数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/25/postMessage-cross-domain/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/25/postMessage-cross-domain/</a></p>\n<blockquote>\n<p>window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。</p>\n</blockquote>\n<hr>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>跨域是什么，我就不详细解释了，我相信你在看这篇文章前就已经了解的差不多了。现在我就直接进入实战阶段。</p>\n<p><strong>两个服务器</strong>：</p>\n<ul>\n<li><a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a></li>\n<li><a href=\"http://127.0.0.1:9090\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9090</a></li>\n</ul>\n<p>先建立两个不同域的测试环境。我用http-server（一个node服务器插件）建立了两个不同端口的本地服务器。<br>","more":"<br><strong>两个页面</strong>：</p>\n<ul>\n<li>a.html</li>\n<li>b.html</li>\n</ul>\n<p>在<a href=\"http://127.0.0.1:8080中新建a.html，在http://127.0.0.1:9090中新建b.html。\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080中新建a.html，在http://127.0.0.1:9090中新建b.html。</a></p>\n<h3 id=\"数据发送\"><a href=\"#数据发送\" class=\"headerlink\" title=\"数据发送\"></a>数据发送</h3><p>postMessage允许用户在两个窗口或frame之间传递数据，无论这个window对象是不是同源都能发送。</p>\n<p>首先我们先在a.html中建立一个iframe。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe src=<span class=\"string\">\"http://127.0.0.1:9090/b.html\"</span> frameborder=<span class=\"string\">\"0\"</span> id=<span class=\"string\">\"ifra\"</span> name=<span class=\"string\">\"postIframe\"</span> onload=<span class=\"string\">\"messageLoad()\"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n<p>当iframe加载完时，发送数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">messageLoad</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> url = <span class=\"string\">\"http://127.0.0.1:9090\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.postIframe.postMessage(<span class=\"string\">\"给我tsort的信息\"</span>,url);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>postMessage包括两个参数data和url，data为发送的数据，url为发送地址。</p>\n<h3 id=\"数据接收\"><a href=\"#数据接收\" class=\"headerlink\" title=\"数据接收\"></a>数据接收</h3><p>html5新增了onmessage事件，它和onclick之类用法差不多。当窗口或frame接收到postMessage发送过来的数据时，将触发onmessage事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\te = e || event;</span><br><span class=\"line\">\talert(e.data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该事件接收一个event对象，这个对象有三个属性，分别为source，origin，data。</p>\n<p><strong>source</strong>： 消息源，消息的发送窗口/iframe。<br><strong>origin</strong>：消息源的URI(可能包含协议、域名和端口)，用来验证数据源。<br><strong>data</strong>：发送方发送给接收方的数据。</p>\n<h3 id=\"完整例子\"><a href=\"#完整例子\" class=\"headerlink\" title=\"完整例子\"></a>完整例子</h3><p>这个例子是这样的，a页面中有一个iframe，这个iframe是另一个域的b页面。当b加载完的时候，让它去给iframe里的页面发送一条信息。然后里面的页面立即回复已经接收到信息，然后再等三秒，回复a所请求的数据。</p>\n<p>a.html</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;iframe src=<span class=\"string\">\"http://127.0.0.1:9090/b.html\"</span> name=<span class=\"string\">\"postIframe\"</span> onload=<span class=\"string\">\"messageLoad()\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">messageLoad</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> url = <span class=\"string\">\"http://127.0.0.1:9090\"</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">window</span>.postIframe.postMessage(<span class=\"string\">\"给我tsort的信息\"</span>,url); <span class=\"comment\">//发送数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t\te = e || event;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(e.data); <span class=\"comment\">//接收b返回的数据，在控制台有两次输出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n<p>b.html</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t\te = e || event;</span><br><span class=\"line\">\t\talert(e.data); <span class=\"comment\">//立即弹出a发送过来的数据</span></span><br><span class=\"line\">\t\te.source.postMessage(<span class=\"string\">\"好的，请稍等三秒！\"</span>,e.origin); <span class=\"comment\">//立即回复a</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> postData = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"tsrot\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> strData = <span class=\"built_in\">JSON</span>.stringify(postData); <span class=\"comment\">//json对象转化为字符串</span></span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\te.source.postMessage(strData,e.origin);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">3000</span>); <span class=\"comment\">//3秒后向a发送数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"window.name跨域详解","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/08/25/windowName-cross-domain/\n\n>  window.name属性的神奇之处在于name 值在不同的页面（甚至不同域名）加载后依旧存在（如果没修改则值不会变化），并且可以支持非常长的 name 值（2MB）。并且window.name很方便。\n\n\n----------\n\n### 用法介绍\n\nname 在浏览器环境中是一个全局/window对象的属性，且当在 frame 中加载新页面（可以是不同域的）时，name 的属性值依旧保持不变（只要不重新赋值）。name属性的值虽然不变，但对它的访问还是受到同域原则，不允许访问。所以我们要把iframe重新定向回原域，这样name的值也没变，并且可以访问了。\n\n在最顶层，name 属性是不安全的，对于所有后续页面，设置在 name 属性中的任何信息都是可获得的。然而 windowName 模块总是在一个 iframe 中加载资源，并且一旦获取到数据，或者当你在最顶层浏览了一个新页面，这个 iframe 将被销毁，所以其他页面永远访问不到 window.name 属性。\n<!-- more -->\n\n### 函数封装\n\n为了方便以后的使用，我们把window.name进行一下封装。\n\n```javascript\nfunction proxy(url, func){\n  var isFirst = true,//判断url第一次是否加载完\n      ifr = document.createElement('iframe'),\n      loadFunc = function(){\n        if(isFirst){ \n        //加载完url后，重新定向回原域\n          ifr.contentWindow.location = 'about:blank';\n          isFirst = false;\n        }else{ \n        //iframe回到原域后，获取name的值，执行回调函数，然后销毁iframe\n          func(ifr.contentWindow.name);\n          ifr.contentWindow.close();\n          document.body.removeChild(ifr);\n          ifr.src = '';\n          ifr = null;\n        }\n      };\n\n  ifr.src = url; //第一次加载url\n  ifr.style.display = 'none';\n  document.body.appendChild(ifr);\n\n  //监听iframe是否加载，加载完执行loadFunc\n  if(ifr.attachEvent){\n  \tifr.attachEvent('onload', loadFunc);\n  }else{\n  \tifr.onload = loadFunc;\n  }\n\n}\n```\n\n\n### 详细案例\n\n假设我现在在http://127.0.0.1:8080 ，我有一个页面叫做a.html，现在我想获取http://127.0.0.1:9090 上的b.html的数据。\n\na.html\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<script>\nfunction proxy(url, func){\n  var isFirst = true,\n      ifr = document.createElement('iframe'),\n      loadFunc = function(){\n        if(isFirst){\n          ifr.contentWindow.location = 'about:blank';\n          isFirst = false;\n        }else{\n          func(ifr.contentWindow.name);\n          ifr.contentWindow.close();\n          document.body.removeChild(ifr);\n          ifr.src = '';\n          ifr = null;\n        }\n      };\n\n  ifr.src = url;\n  ifr.style.display = 'none';\n  document.body.appendChild(ifr);\n\n  if(ifr.attachEvent){\n  \tifr.attachEvent('onload', loadFunc);\n  }else{\n  \tifr.onload = loadFunc;\n  }\n\n}\n</script>\n</head>\n<body>\n<script>\n  proxy('http://127.0.0.1:9090/b.html', function(data){\n    console.log(JSON.parse(data).name);\n    console.log(JSON.parse(data).age);\n  });\n</script>\n</body>\n</html>\n```\n\nb.html\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n<script>\n\tvar obj = {\n\t\tname:\"tsrot\",\n\t\tage:24\n\t};\n    window.name = JSON.stringify(obj);\n</script>\n</body>\n</html>\n```\n","source":"_posts/study-notes/windowName跨域详解.md","raw":"title: window.name跨域详解\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/08/25/windowName-cross-domain/\n\n>  window.name属性的神奇之处在于name 值在不同的页面（甚至不同域名）加载后依旧存在（如果没修改则值不会变化），并且可以支持非常长的 name 值（2MB）。并且window.name很方便。\n\n\n----------\n\n### 用法介绍\n\nname 在浏览器环境中是一个全局/window对象的属性，且当在 frame 中加载新页面（可以是不同域的）时，name 的属性值依旧保持不变（只要不重新赋值）。name属性的值虽然不变，但对它的访问还是受到同域原则，不允许访问。所以我们要把iframe重新定向回原域，这样name的值也没变，并且可以访问了。\n\n在最顶层，name 属性是不安全的，对于所有后续页面，设置在 name 属性中的任何信息都是可获得的。然而 windowName 模块总是在一个 iframe 中加载资源，并且一旦获取到数据，或者当你在最顶层浏览了一个新页面，这个 iframe 将被销毁，所以其他页面永远访问不到 window.name 属性。\n<!-- more -->\n\n### 函数封装\n\n为了方便以后的使用，我们把window.name进行一下封装。\n\n```javascript\nfunction proxy(url, func){\n  var isFirst = true,//判断url第一次是否加载完\n      ifr = document.createElement('iframe'),\n      loadFunc = function(){\n        if(isFirst){ \n        //加载完url后，重新定向回原域\n          ifr.contentWindow.location = 'about:blank';\n          isFirst = false;\n        }else{ \n        //iframe回到原域后，获取name的值，执行回调函数，然后销毁iframe\n          func(ifr.contentWindow.name);\n          ifr.contentWindow.close();\n          document.body.removeChild(ifr);\n          ifr.src = '';\n          ifr = null;\n        }\n      };\n\n  ifr.src = url; //第一次加载url\n  ifr.style.display = 'none';\n  document.body.appendChild(ifr);\n\n  //监听iframe是否加载，加载完执行loadFunc\n  if(ifr.attachEvent){\n  \tifr.attachEvent('onload', loadFunc);\n  }else{\n  \tifr.onload = loadFunc;\n  }\n\n}\n```\n\n\n### 详细案例\n\n假设我现在在http://127.0.0.1:8080 ，我有一个页面叫做a.html，现在我想获取http://127.0.0.1:9090 上的b.html的数据。\n\na.html\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<script>\nfunction proxy(url, func){\n  var isFirst = true,\n      ifr = document.createElement('iframe'),\n      loadFunc = function(){\n        if(isFirst){\n          ifr.contentWindow.location = 'about:blank';\n          isFirst = false;\n        }else{\n          func(ifr.contentWindow.name);\n          ifr.contentWindow.close();\n          document.body.removeChild(ifr);\n          ifr.src = '';\n          ifr = null;\n        }\n      };\n\n  ifr.src = url;\n  ifr.style.display = 'none';\n  document.body.appendChild(ifr);\n\n  if(ifr.attachEvent){\n  \tifr.attachEvent('onload', loadFunc);\n  }else{\n  \tifr.onload = loadFunc;\n  }\n\n}\n</script>\n</head>\n<body>\n<script>\n  proxy('http://127.0.0.1:9090/b.html', function(data){\n    console.log(JSON.parse(data).name);\n    console.log(JSON.parse(data).age);\n  });\n</script>\n</body>\n</html>\n```\n\nb.html\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n<script>\n\tvar obj = {\n\t\tname:\"tsrot\",\n\t\tage:24\n\t};\n    window.name = JSON.stringify(obj);\n</script>\n</body>\n</html>\n```\n","slug":"study-notes/windowName跨域详解","published":1,"updated":"2019-05-05T06:48:34.031Z","_id":"cj0dgwc74003q2u6bfp81b0ta","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/25/windowName-cross-domain/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/25/windowName-cross-domain/</a></p>\n<blockquote>\n<p> window.name属性的神奇之处在于name 值在不同的页面（甚至不同域名）加载后依旧存在（如果没修改则值不会变化），并且可以支持非常长的 name 值（2MB）。并且window.name很方便。</p>\n</blockquote>\n<hr>\n<h3 id=\"用法介绍\"><a href=\"#用法介绍\" class=\"headerlink\" title=\"用法介绍\"></a>用法介绍</h3><p>name 在浏览器环境中是一个全局/window对象的属性，且当在 frame 中加载新页面（可以是不同域的）时，name 的属性值依旧保持不变（只要不重新赋值）。name属性的值虽然不变，但对它的访问还是受到同域原则，不允许访问。所以我们要把iframe重新定向回原域，这样name的值也没变，并且可以访问了。</p>\n<p>在最顶层，name 属性是不安全的，对于所有后续页面，设置在 name 属性中的任何信息都是可获得的。然而 windowName 模块总是在一个 iframe 中加载资源，并且一旦获取到数据，或者当你在最顶层浏览了一个新页面，这个 iframe 将被销毁，所以其他页面永远访问不到 window.name 属性。<br><a id=\"more\"></a></p>\n<h3 id=\"函数封装\"><a href=\"#函数封装\" class=\"headerlink\" title=\"函数封装\"></a>函数封装</h3><p>为了方便以后的使用，我们把window.name进行一下封装。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">url, func</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isFirst = <span class=\"literal\">true</span>,<span class=\"comment\">//判断url第一次是否加载完</span></span><br><span class=\"line\">      ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>),</span><br><span class=\"line\">      loadFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirst)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//加载完url后，重新定向回原域</span></span><br><span class=\"line\">          ifr.contentWindow.location = <span class=\"string\">'about:blank'</span>;</span><br><span class=\"line\">          isFirst = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">//iframe回到原域后，获取name的值，执行回调函数，然后销毁iframe</span></span><br><span class=\"line\">          func(ifr.contentWindow.name);</span><br><span class=\"line\">          ifr.contentWindow.close();</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.body.removeChild(ifr);</span><br><span class=\"line\">          ifr.src = <span class=\"string\">''</span>;</span><br><span class=\"line\">          ifr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ifr.src = url; <span class=\"comment\">//第一次加载url</span></span><br><span class=\"line\">  ifr.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(ifr);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//监听iframe是否加载，加载完执行loadFunc</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ifr.attachEvent)&#123;</span><br><span class=\"line\">  \tifr.attachEvent(<span class=\"string\">'onload'</span>, loadFunc);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  \tifr.onload = loadFunc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"详细案例\"><a href=\"#详细案例\" class=\"headerlink\" title=\"详细案例\"></a>详细案例</h3><p>假设我现在在<a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a> ，我有一个页面叫做a.html，现在我想获取<a href=\"http://127.0.0.1:9090\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9090</a> 上的b.html的数据。</p>\n<p>a.html<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">url, func</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isFirst = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>),</span><br><span class=\"line\">      loadFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirst)&#123;</span><br><span class=\"line\">          ifr.contentWindow.location = <span class=\"string\">'about:blank'</span>;</span><br><span class=\"line\">          isFirst = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          func(ifr.contentWindow.name);</span><br><span class=\"line\">          ifr.contentWindow.close();</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.body.removeChild(ifr);</span><br><span class=\"line\">          ifr.src = <span class=\"string\">''</span>;</span><br><span class=\"line\">          ifr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ifr.src = url;</span><br><span class=\"line\">  ifr.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(ifr);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ifr.attachEvent)&#123;</span><br><span class=\"line\">  \tifr.attachEvent(<span class=\"string\">'onload'</span>, loadFunc);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  \tifr.onload = loadFunc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  proxy(<span class=\"string\">'http://127.0.0.1:9090/b.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(data).name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(data).age);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>b.html<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">\t\tage:<span class=\"number\">24</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.name = <span class=\"built_in\">JSON</span>.stringify(obj);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/25/windowName-cross-domain/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/25/windowName-cross-domain/</a></p>\n<blockquote>\n<p> window.name属性的神奇之处在于name 值在不同的页面（甚至不同域名）加载后依旧存在（如果没修改则值不会变化），并且可以支持非常长的 name 值（2MB）。并且window.name很方便。</p>\n</blockquote>\n<hr>\n<h3 id=\"用法介绍\"><a href=\"#用法介绍\" class=\"headerlink\" title=\"用法介绍\"></a>用法介绍</h3><p>name 在浏览器环境中是一个全局/window对象的属性，且当在 frame 中加载新页面（可以是不同域的）时，name 的属性值依旧保持不变（只要不重新赋值）。name属性的值虽然不变，但对它的访问还是受到同域原则，不允许访问。所以我们要把iframe重新定向回原域，这样name的值也没变，并且可以访问了。</p>\n<p>在最顶层，name 属性是不安全的，对于所有后续页面，设置在 name 属性中的任何信息都是可获得的。然而 windowName 模块总是在一个 iframe 中加载资源，并且一旦获取到数据，或者当你在最顶层浏览了一个新页面，这个 iframe 将被销毁，所以其他页面永远访问不到 window.name 属性。<br>","more":"</p>\n<h3 id=\"函数封装\"><a href=\"#函数封装\" class=\"headerlink\" title=\"函数封装\"></a>函数封装</h3><p>为了方便以后的使用，我们把window.name进行一下封装。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">url, func</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isFirst = <span class=\"literal\">true</span>,<span class=\"comment\">//判断url第一次是否加载完</span></span><br><span class=\"line\">      ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>),</span><br><span class=\"line\">      loadFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirst)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//加载完url后，重新定向回原域</span></span><br><span class=\"line\">          ifr.contentWindow.location = <span class=\"string\">'about:blank'</span>;</span><br><span class=\"line\">          isFirst = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">//iframe回到原域后，获取name的值，执行回调函数，然后销毁iframe</span></span><br><span class=\"line\">          func(ifr.contentWindow.name);</span><br><span class=\"line\">          ifr.contentWindow.close();</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.body.removeChild(ifr);</span><br><span class=\"line\">          ifr.src = <span class=\"string\">''</span>;</span><br><span class=\"line\">          ifr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ifr.src = url; <span class=\"comment\">//第一次加载url</span></span><br><span class=\"line\">  ifr.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(ifr);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//监听iframe是否加载，加载完执行loadFunc</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ifr.attachEvent)&#123;</span><br><span class=\"line\">  \tifr.attachEvent(<span class=\"string\">'onload'</span>, loadFunc);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  \tifr.onload = loadFunc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"详细案例\"><a href=\"#详细案例\" class=\"headerlink\" title=\"详细案例\"></a>详细案例</h3><p>假设我现在在<a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a> ，我有一个页面叫做a.html，现在我想获取<a href=\"http://127.0.0.1:9090\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9090</a> 上的b.html的数据。</p>\n<p>a.html<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">url, func</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isFirst = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>),</span><br><span class=\"line\">      loadFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirst)&#123;</span><br><span class=\"line\">          ifr.contentWindow.location = <span class=\"string\">'about:blank'</span>;</span><br><span class=\"line\">          isFirst = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          func(ifr.contentWindow.name);</span><br><span class=\"line\">          ifr.contentWindow.close();</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.body.removeChild(ifr);</span><br><span class=\"line\">          ifr.src = <span class=\"string\">''</span>;</span><br><span class=\"line\">          ifr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ifr.src = url;</span><br><span class=\"line\">  ifr.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(ifr);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ifr.attachEvent)&#123;</span><br><span class=\"line\">  \tifr.attachEvent(<span class=\"string\">'onload'</span>, loadFunc);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  \tifr.onload = loadFunc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  proxy(<span class=\"string\">'http://127.0.0.1:9090/b.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(data).name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(data).age);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>b.html<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">\"tsrot\"</span>,</span><br><span class=\"line\">\t\tage:<span class=\"number\">24</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.name = <span class=\"built_in\">JSON</span>.stringify(obj);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>"},{"title":"事件绑定、事件监听、事件委托","date":"2017-01-05T08:53:29.000Z","_content":"\n> 在JavaScript的学习中，我们经常会遇到JavaScript的事件机制，例如，事件绑定、事件监听、事件委托（事件代理）等。这些名词是什么意思呢，有什么作用呢？\n\n----------\n\n### 事件绑定\n要想让 JavaScript 对用户的操作作出响应，首先要对 DOM 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称。\n\n在JavaScript中，有三种常用的绑定事件的方法：\n- 在DOM元素中直接绑定；\n- 在JavaScript代码中绑定；\n- 绑定事件监听函数。\n<!-- more -->\n#### 在DOM中直接绑定事件\n我们可以在DOM元素上绑定onclick、onmouseover、onmouseout、onmousedown、onmouseup、ondblclick、onkeydown、onkeypress、onkeyup等。好多不一一列出了。如果想知道更多事件类型请查看，[DOM事件](http://www.runoob.com/jsref/dom-obj-event.html)。\n\n```html\n<input type=\"button\" value=\"click me\" onclick=\"hello()\">\n\n<script>\nfunction hello(){\n\talert(\"hello world!\");\n}\n</script>\n```\n\n#### 在JavaScript代码中绑定事件\n\n在JavaScript代码中（即`script`标签内）绑定事件可以使JavaScript代码与HTML标签分离，文档结构清晰，便于管理和开发。\n\n```html\n<input type=\"button\" value=\"click me\" id=\"btn\">\n\n<script>\ndocument.getElementById(\"btn\").onclick = function(){\n\talert(\"hello world!\");\n}\n</script>\n```\n\n#### 使用事件监听绑定事件\n绑定事件的另一种方法是用 addEventListener() 或 attachEvent() 来绑定事件监听函数。下面详细介绍，事件监听。\n\n### 事件监听\n关于事件监听，W3C规范中定义了3个事件阶段，依次是捕获阶段、目标阶段、冒泡阶段。\n\n起初Netscape制定了JavaScript的一套事件驱动机制（即事件捕获）。随即IE也推出了自己的一套事件驱动机制（即事件冒泡）。最后W3C规范了两种事件机制，分为捕获阶段、目标阶段、冒泡阶段。IE8以前IE一直坚持自己的事件机制（前端人员一直头痛的兼容性问题），IE9以后IE也支持了W3C规范。\n\n#### W3C规范\n\n语法：\n```javascript\nelement.addEventListener(event, function, useCapture)\n```\n\nevent : （必需）事件名，支持所有[DOM事件](http://www.runoob.com/jsref/dom-obj-event.html)。\nfunction：（必需）指定要事件触发时执行的函数。 \nuseCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。\n\n注：IE8以下不支持。\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn1\">\n\n<script>\ndocument.getElementById(\"btn1\").addEventListener(\"click\",hello);\nfunction hello(){\n\talert(\"hello world!\");\n}\n</script>\n```\n\n#### IE标准\n\n语法：\n```javascript\nelement.attachEvent(event, function)\n```\nevent：（必需）事件类型。需加“on“，例如：onclick。\nfunction：（必需）指定要事件触发时执行的函数。\n\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn2\">\n\n<script>\ndocument.getElementById(\"btn2\").attachEvent(\"onclick\",hello);\nfunction hello(){\n\talert(\"hello world!\");\n}\n</script>\n```\n\n#### 事件监听的优点\n\n1、可以绑定多个事件。\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn3\">\n\n<script>\nvar btn3 = document.getElementById(\"btn3\");\nbtn3.onclick = function(){\n\talert(\"hello 1\"); //不执行\n}\nbtn3.onclick = function(){\n\talert(\"hello 2\"); //执行\n}\n</script>\n```\n常规的事件绑定只执行最后绑定的事件。\n\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn4\">\n\n<script>\nvar btn4 = document.getElementById(\"btn4\");\nbtn4.addEventListener(\"click\",hello1);\nbtn4.addEventListener(\"click\",hello2);\n\nfunction hello1(){\n\talert(\"hello 1\");\n}\nfunction hello2(){\n\talert(\"hello 2\");\n}\n</script>\n```\n两个事件都执行了。\n\n2、可以解除相应的绑定\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn5\">\n\n<script>\nvar btn5 = document.getElementById(\"btn5\");\nbtn5.addEventListener(\"click\",hello1);//执行了\nbtn5.addEventListener(\"click\",hello2);//不执行\nbtn5.removeEventListener(\"click\",hello2);\n\nfunction hello1(){\n\talert(\"hello 1\");\n}\nfunction hello2(){\n\talert(\"hello 2\");\n}\n</script>\n```\n\n#### 封装事件监听\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn5\">\n\n//绑定监听事件\nfunction addEventHandler(target,type,fn){\n\tif(target.addEventListener){\n\t\ttarget.addEventListener(type,fn);\n\t}else{\n\t\ttarget.attachEvent(\"on\"+type,fn);\n\t}\n}\n\n//移除监听事件\nfunction removeEventHandler(target,type,fn){\n\tif(target.removeEventListener){\n\t\ttarget.removeEventListener(type,fn);\n\t}else{\n\t\ttarget.detachEvent(\"on\"+type,fn);\n\t}\n}\n\n//测试\nvar btn5 = document.getElementById(\"btn5\");\naddEventHandler(btn5,\"click\",hello1);//添加事件hello1\naddEventHandler(btn5,\"click\",hello2);//添加事件hello2\nremoveEventHandler(btn5,\"click\",hello1);//移除事件hello1\n```\n\n### 事件委托\n\n事件委托就是利用冒泡的原理，把事件加到父元素或祖先元素上，触发执行效果。\n\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn6\">\n\nvar btn6 = document.getElementById(\"btn6\");\ndocument.onclick = function(event){\n\tevent = event || window.event;\n\tvar target = event.target || event.srcElement;\n\tif(target == btn6){\n\t\talert(btn5.value);\n\t}\n}\n```\n上面只是个例子，代码尽可能的简化了。在实际的代码中 我们可能用到jQuery的live()、delegate()、bind()、on()等。\n\n#### 事件委托优点\n\n1、提高JavaScript性能。事件委托可以显著的提高事件的处理速度，减少内存的占用。[实例分析JavaScript中的事件委托和事件绑定](http://www.diguage.com/archives/71.html)，这篇文章写得还不错。\n\n**传统写法**\n\n```javascript\n<ul id=\"list\">\n  <li id=\"item1\" >item1</li>\n  <li id=\"item2\" >item2</li>\n  <li id=\"item3\" >item3</li>\n</ul>\n\n<script>\nvar item1 = document.getElementById(\"item1\");\nvar item2 = document.getElementById(\"item2\");\nvar item3 = document.getElementById(\"item3\");\n\nitem1.onclick = function(){\n\talert(\"hello item1\");\n}\nitem2.onclick = function(){\n\talert(\"hello item2\");\n}\nitem3.onclick = function(){\n\talert(\"hello item3\");\n}\n</script>\n```\n\n**事件委托**\n```javascript\n<ul id=\"list\">\n  <li id=\"item1\" >item1</li>\n  <li id=\"item2\" >item2</li>\n  <li id=\"item3\" >item3</li>\n</ul>\n\n<script>\nvar item1 = document.getElementById(\"item1\");\nvar item2 = document.getElementById(\"item2\");\nvar item3 = document.getElementById(\"item3\");\n\ndocument.addEventListener(\"click\",function(event){\n\tvar target = event.target;\n\tif(target == item1){\n\t\talert(\"hello item1\");\n\t}else if(target == item2){\n\t\talert(\"hello item2\");\n\t}else if(target == item3){\n\t\talert(\"hello item3\");\n\t}\n})\n</script>\n```\n\n2、动态的添加DOM元素，不需要因为元素的改动而修改事件绑定。\n\n**传统写法**\n```javascript\n<ul id=\"list\">\n  <li id=\"item1\" >item1</li>\n  <li id=\"item2\" >item2</li>\n  <li id=\"item3\" >item3</li>\n</ul>\n\n<script>\nvar list = document.getElementById(\"list\");\n\nvar item = list.getElementsByTagName(\"li\");\nfor(var i=0;i<item.length;i++){\n\t(function(i){\n\t\titem[i].onclick = function(){\n\t\t\talert(item[i].innerHTML);\n\t\t}\n\t})(i)\n}\n\nvar node=document.createElement(\"li\");\nvar textnode=document.createTextNode(\"item4\");\nnode.appendChild(textnode);\nlist.appendChild(node);\n\n</script>\n\n```\n点击item1到item3都有事件响应，但是点击item4时，没有事件响应。说明传统的事件绑定无法对动态添加的元素而动态的添加事件。\n\n**事件委托**\n```javascript\n<ul id=\"list\">\n  <li id=\"item1\" >item1</li>\n  <li id=\"item2\" >item2</li>\n  <li id=\"item3\" >item3</li>\n</ul>\n\n<script>\nvar list = document.getElementById(\"list\");\n\ndocument.addEventListener(\"click\",function(event){\n\tvar target = event.target;\n\tif(target.nodeName == \"LI\"){\n\t\talert(target.innerHTML);\n\t}\n})\n\nvar node=document.createElement(\"li\");\nvar textnode=document.createTextNode(\"item4\");\nnode.appendChild(textnode);\nlist.appendChild(node);\n\n</script>\n\n```\n当点击item4时，item4有事件响应。说明事件委托可以为新添加的DOM元素动态的添加事件。\n","source":"_posts/study-notes/事件绑定、事件监听、事件委托.md","raw":"title:  事件绑定、事件监听、事件委托\ndate: 2017-1-5 16:53:29\n---\n\n> 在JavaScript的学习中，我们经常会遇到JavaScript的事件机制，例如，事件绑定、事件监听、事件委托（事件代理）等。这些名词是什么意思呢，有什么作用呢？\n\n----------\n\n### 事件绑定\n要想让 JavaScript 对用户的操作作出响应，首先要对 DOM 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称。\n\n在JavaScript中，有三种常用的绑定事件的方法：\n- 在DOM元素中直接绑定；\n- 在JavaScript代码中绑定；\n- 绑定事件监听函数。\n<!-- more -->\n#### 在DOM中直接绑定事件\n我们可以在DOM元素上绑定onclick、onmouseover、onmouseout、onmousedown、onmouseup、ondblclick、onkeydown、onkeypress、onkeyup等。好多不一一列出了。如果想知道更多事件类型请查看，[DOM事件](http://www.runoob.com/jsref/dom-obj-event.html)。\n\n```html\n<input type=\"button\" value=\"click me\" onclick=\"hello()\">\n\n<script>\nfunction hello(){\n\talert(\"hello world!\");\n}\n</script>\n```\n\n#### 在JavaScript代码中绑定事件\n\n在JavaScript代码中（即`script`标签内）绑定事件可以使JavaScript代码与HTML标签分离，文档结构清晰，便于管理和开发。\n\n```html\n<input type=\"button\" value=\"click me\" id=\"btn\">\n\n<script>\ndocument.getElementById(\"btn\").onclick = function(){\n\talert(\"hello world!\");\n}\n</script>\n```\n\n#### 使用事件监听绑定事件\n绑定事件的另一种方法是用 addEventListener() 或 attachEvent() 来绑定事件监听函数。下面详细介绍，事件监听。\n\n### 事件监听\n关于事件监听，W3C规范中定义了3个事件阶段，依次是捕获阶段、目标阶段、冒泡阶段。\n\n起初Netscape制定了JavaScript的一套事件驱动机制（即事件捕获）。随即IE也推出了自己的一套事件驱动机制（即事件冒泡）。最后W3C规范了两种事件机制，分为捕获阶段、目标阶段、冒泡阶段。IE8以前IE一直坚持自己的事件机制（前端人员一直头痛的兼容性问题），IE9以后IE也支持了W3C规范。\n\n#### W3C规范\n\n语法：\n```javascript\nelement.addEventListener(event, function, useCapture)\n```\n\nevent : （必需）事件名，支持所有[DOM事件](http://www.runoob.com/jsref/dom-obj-event.html)。\nfunction：（必需）指定要事件触发时执行的函数。 \nuseCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。\n\n注：IE8以下不支持。\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn1\">\n\n<script>\ndocument.getElementById(\"btn1\").addEventListener(\"click\",hello);\nfunction hello(){\n\talert(\"hello world!\");\n}\n</script>\n```\n\n#### IE标准\n\n语法：\n```javascript\nelement.attachEvent(event, function)\n```\nevent：（必需）事件类型。需加“on“，例如：onclick。\nfunction：（必需）指定要事件触发时执行的函数。\n\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn2\">\n\n<script>\ndocument.getElementById(\"btn2\").attachEvent(\"onclick\",hello);\nfunction hello(){\n\talert(\"hello world!\");\n}\n</script>\n```\n\n#### 事件监听的优点\n\n1、可以绑定多个事件。\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn3\">\n\n<script>\nvar btn3 = document.getElementById(\"btn3\");\nbtn3.onclick = function(){\n\talert(\"hello 1\"); //不执行\n}\nbtn3.onclick = function(){\n\talert(\"hello 2\"); //执行\n}\n</script>\n```\n常规的事件绑定只执行最后绑定的事件。\n\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn4\">\n\n<script>\nvar btn4 = document.getElementById(\"btn4\");\nbtn4.addEventListener(\"click\",hello1);\nbtn4.addEventListener(\"click\",hello2);\n\nfunction hello1(){\n\talert(\"hello 1\");\n}\nfunction hello2(){\n\talert(\"hello 2\");\n}\n</script>\n```\n两个事件都执行了。\n\n2、可以解除相应的绑定\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn5\">\n\n<script>\nvar btn5 = document.getElementById(\"btn5\");\nbtn5.addEventListener(\"click\",hello1);//执行了\nbtn5.addEventListener(\"click\",hello2);//不执行\nbtn5.removeEventListener(\"click\",hello2);\n\nfunction hello1(){\n\talert(\"hello 1\");\n}\nfunction hello2(){\n\talert(\"hello 2\");\n}\n</script>\n```\n\n#### 封装事件监听\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn5\">\n\n//绑定监听事件\nfunction addEventHandler(target,type,fn){\n\tif(target.addEventListener){\n\t\ttarget.addEventListener(type,fn);\n\t}else{\n\t\ttarget.attachEvent(\"on\"+type,fn);\n\t}\n}\n\n//移除监听事件\nfunction removeEventHandler(target,type,fn){\n\tif(target.removeEventListener){\n\t\ttarget.removeEventListener(type,fn);\n\t}else{\n\t\ttarget.detachEvent(\"on\"+type,fn);\n\t}\n}\n\n//测试\nvar btn5 = document.getElementById(\"btn5\");\naddEventHandler(btn5,\"click\",hello1);//添加事件hello1\naddEventHandler(btn5,\"click\",hello2);//添加事件hello2\nremoveEventHandler(btn5,\"click\",hello1);//移除事件hello1\n```\n\n### 事件委托\n\n事件委托就是利用冒泡的原理，把事件加到父元素或祖先元素上，触发执行效果。\n\n```javascript\n<input type=\"button\" value=\"click me\" id=\"btn6\">\n\nvar btn6 = document.getElementById(\"btn6\");\ndocument.onclick = function(event){\n\tevent = event || window.event;\n\tvar target = event.target || event.srcElement;\n\tif(target == btn6){\n\t\talert(btn5.value);\n\t}\n}\n```\n上面只是个例子，代码尽可能的简化了。在实际的代码中 我们可能用到jQuery的live()、delegate()、bind()、on()等。\n\n#### 事件委托优点\n\n1、提高JavaScript性能。事件委托可以显著的提高事件的处理速度，减少内存的占用。[实例分析JavaScript中的事件委托和事件绑定](http://www.diguage.com/archives/71.html)，这篇文章写得还不错。\n\n**传统写法**\n\n```javascript\n<ul id=\"list\">\n  <li id=\"item1\" >item1</li>\n  <li id=\"item2\" >item2</li>\n  <li id=\"item3\" >item3</li>\n</ul>\n\n<script>\nvar item1 = document.getElementById(\"item1\");\nvar item2 = document.getElementById(\"item2\");\nvar item3 = document.getElementById(\"item3\");\n\nitem1.onclick = function(){\n\talert(\"hello item1\");\n}\nitem2.onclick = function(){\n\talert(\"hello item2\");\n}\nitem3.onclick = function(){\n\talert(\"hello item3\");\n}\n</script>\n```\n\n**事件委托**\n```javascript\n<ul id=\"list\">\n  <li id=\"item1\" >item1</li>\n  <li id=\"item2\" >item2</li>\n  <li id=\"item3\" >item3</li>\n</ul>\n\n<script>\nvar item1 = document.getElementById(\"item1\");\nvar item2 = document.getElementById(\"item2\");\nvar item3 = document.getElementById(\"item3\");\n\ndocument.addEventListener(\"click\",function(event){\n\tvar target = event.target;\n\tif(target == item1){\n\t\talert(\"hello item1\");\n\t}else if(target == item2){\n\t\talert(\"hello item2\");\n\t}else if(target == item3){\n\t\talert(\"hello item3\");\n\t}\n})\n</script>\n```\n\n2、动态的添加DOM元素，不需要因为元素的改动而修改事件绑定。\n\n**传统写法**\n```javascript\n<ul id=\"list\">\n  <li id=\"item1\" >item1</li>\n  <li id=\"item2\" >item2</li>\n  <li id=\"item3\" >item3</li>\n</ul>\n\n<script>\nvar list = document.getElementById(\"list\");\n\nvar item = list.getElementsByTagName(\"li\");\nfor(var i=0;i<item.length;i++){\n\t(function(i){\n\t\titem[i].onclick = function(){\n\t\t\talert(item[i].innerHTML);\n\t\t}\n\t})(i)\n}\n\nvar node=document.createElement(\"li\");\nvar textnode=document.createTextNode(\"item4\");\nnode.appendChild(textnode);\nlist.appendChild(node);\n\n</script>\n\n```\n点击item1到item3都有事件响应，但是点击item4时，没有事件响应。说明传统的事件绑定无法对动态添加的元素而动态的添加事件。\n\n**事件委托**\n```javascript\n<ul id=\"list\">\n  <li id=\"item1\" >item1</li>\n  <li id=\"item2\" >item2</li>\n  <li id=\"item3\" >item3</li>\n</ul>\n\n<script>\nvar list = document.getElementById(\"list\");\n\ndocument.addEventListener(\"click\",function(event){\n\tvar target = event.target;\n\tif(target.nodeName == \"LI\"){\n\t\talert(target.innerHTML);\n\t}\n})\n\nvar node=document.createElement(\"li\");\nvar textnode=document.createTextNode(\"item4\");\nnode.appendChild(textnode);\nlist.appendChild(node);\n\n</script>\n\n```\n当点击item4时，item4有事件响应。说明事件委托可以为新添加的DOM元素动态的添加事件。\n","slug":"study-notes/事件绑定、事件监听、事件委托","published":1,"updated":"2019-05-05T06:11:11.441Z","_id":"cj0dgwc75003r2u6bssc0z9wq","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>在JavaScript的学习中，我们经常会遇到JavaScript的事件机制，例如，事件绑定、事件监听、事件委托（事件代理）等。这些名词是什么意思呢，有什么作用呢？</p>\n</blockquote>\n<hr>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><p>要想让 JavaScript 对用户的操作作出响应，首先要对 DOM 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称。</p>\n<p>在JavaScript中，有三种常用的绑定事件的方法：</p>\n<ul>\n<li>在DOM元素中直接绑定；</li>\n<li>在JavaScript代码中绑定；</li>\n<li>绑定事件监听函数。<a id=\"more\"></a>\n<h4 id=\"在DOM中直接绑定事件\"><a href=\"#在DOM中直接绑定事件\" class=\"headerlink\" title=\"在DOM中直接绑定事件\"></a>在DOM中直接绑定事件</h4>我们可以在DOM元素上绑定onclick、onmouseover、onmouseout、onmousedown、onmouseup、ondblclick、onkeydown、onkeypress、onkeyup等。好多不一一列出了。如果想知道更多事件类型请查看，<a href=\"http://www.runoob.com/jsref/dom-obj-event.html\" target=\"_blank\" rel=\"noopener\">DOM事件</a>。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"click me\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"hello()\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\talert(<span class=\"string\">\"hello world!\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"在JavaScript代码中绑定事件\"><a href=\"#在JavaScript代码中绑定事件\" class=\"headerlink\" title=\"在JavaScript代码中绑定事件\"></a>在JavaScript代码中绑定事件</h4><p>在JavaScript代码中（即<code>script</code>标签内）绑定事件可以使JavaScript代码与HTML标签分离，文档结构清晰，便于管理和开发。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"click me\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn\"</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\talert(<span class=\"string\">\"hello world!\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用事件监听绑定事件\"><a href=\"#使用事件监听绑定事件\" class=\"headerlink\" title=\"使用事件监听绑定事件\"></a>使用事件监听绑定事件</h4><p>绑定事件的另一种方法是用 addEventListener() 或 attachEvent() 来绑定事件监听函数。下面详细介绍，事件监听。</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p>关于事件监听，W3C规范中定义了3个事件阶段，依次是捕获阶段、目标阶段、冒泡阶段。</p>\n<p>起初Netscape制定了JavaScript的一套事件驱动机制（即事件捕获）。随即IE也推出了自己的一套事件驱动机制（即事件冒泡）。最后W3C规范了两种事件机制，分为捕获阶段、目标阶段、冒泡阶段。IE8以前IE一直坚持自己的事件机制（前端人员一直头痛的兼容性问题），IE9以后IE也支持了W3C规范。</p>\n<h4 id=\"W3C规范\"><a href=\"#W3C规范\" class=\"headerlink\" title=\"W3C规范\"></a>W3C规范</h4><p>语法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.addEventListener(event, <span class=\"function\"><span class=\"keyword\">function</span>, <span class=\"title\">useCapture</span>)</span></span><br></pre></td></tr></table></figure></p>\n<p>event : （必需）事件名，支持所有<a href=\"http://www.runoob.com/jsref/dom-obj-event.html\" target=\"_blank\" rel=\"noopener\">DOM事件</a>。<br>function：（必需）指定要事件触发时执行的函数。<br>useCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。</p>\n<p>注：IE8以下不支持。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn1\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn1\"</span>).addEventListener(<span class=\"string\">\"click\"</span>,hello);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello world!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"IE标准\"><a href=\"#IE标准\" class=\"headerlink\" title=\"IE标准\"></a>IE标准</h4><p>语法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.attachEvent(event, <span class=\"function\"><span class=\"keyword\">function</span>)</span></span><br></pre></td></tr></table></figure></p>\n<p>event：（必需）事件类型。需加“on“，例如：onclick。<br>function：（必需）指定要事件触发时执行的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn2\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn2\"</span>).attachEvent(<span class=\"string\">\"onclick\"</span>,hello);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello world!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"事件监听的优点\"><a href=\"#事件监听的优点\" class=\"headerlink\" title=\"事件监听的优点\"></a>事件监听的优点</h4><p>1、可以绑定多个事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn3\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn3\"</span>);</span><br><span class=\"line\">btn3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 1\"</span>); <span class=\"comment\">//不执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">btn3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 2\"</span>); <span class=\"comment\">//执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>常规的事件绑定只执行最后绑定的事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn4\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn4 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn4\"</span>);</span><br><span class=\"line\">btn4.addEventListener(<span class=\"string\">\"click\"</span>,hello1);</span><br><span class=\"line\">btn4.addEventListener(<span class=\"string\">\"click\"</span>,hello2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>两个事件都执行了。</p>\n<p>2、可以解除相应的绑定<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn5\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn5 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn5\"</span>);</span><br><span class=\"line\">btn5.addEventListener(<span class=\"string\">\"click\"</span>,hello1);<span class=\"comment\">//执行了</span></span><br><span class=\"line\">btn5.addEventListener(<span class=\"string\">\"click\"</span>,hello2);<span class=\"comment\">//不执行</span></span><br><span class=\"line\">btn5.removeEventListener(<span class=\"string\">\"click\"</span>,hello2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"封装事件监听\"><a href=\"#封装事件监听\" class=\"headerlink\" title=\"封装事件监听\"></a>封装事件监听</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn5\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定监听事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEventHandler</span>(<span class=\"params\">target,type,fn</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target.addEventListener)&#123;</span><br><span class=\"line\">\t\ttarget.addEventListener(type,fn);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\ttarget.attachEvent(<span class=\"string\">\"on\"</span>+type,fn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移除监听事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeEventHandler</span>(<span class=\"params\">target,type,fn</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target.removeEventListener)&#123;</span><br><span class=\"line\">\t\ttarget.removeEventListener(type,fn);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\ttarget.detachEvent(<span class=\"string\">\"on\"</span>+type,fn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn5 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn5\"</span>);</span><br><span class=\"line\">addEventHandler(btn5,<span class=\"string\">\"click\"</span>,hello1);<span class=\"comment\">//添加事件hello1</span></span><br><span class=\"line\">addEventHandler(btn5,<span class=\"string\">\"click\"</span>,hello2);<span class=\"comment\">//添加事件hello2</span></span><br><span class=\"line\">removeEventHandler(btn5,<span class=\"string\">\"click\"</span>,hello1);<span class=\"comment\">//移除事件hello1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>事件委托就是利用冒泡的原理，把事件加到父元素或祖先元素上，触发执行效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn6\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn6 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn6\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\tevent = event || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> target = event.target || event.srcElement;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target == btn6)&#123;</span><br><span class=\"line\">\t\talert(btn5.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面只是个例子，代码尽可能的简化了。在实际的代码中 我们可能用到jQuery的live()、delegate()、bind()、on()等。</p>\n<h4 id=\"事件委托优点\"><a href=\"#事件委托优点\" class=\"headerlink\" title=\"事件委托优点\"></a>事件委托优点</h4><p>1、提高JavaScript性能。事件委托可以显著的提高事件的处理速度，减少内存的占用。<a href=\"http://www.diguage.com/archives/71.html\" target=\"_blank\" rel=\"noopener\">实例分析JavaScript中的事件委托和事件绑定</a>，这篇文章写得还不错。</p>\n<p><strong>传统写法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item1\"</span> &gt;item1&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li id=\"item2\" &gt;item2&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item3\"</span> &gt;item3&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item2\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">item1.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello item1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello item2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello item3\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>事件委托</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item1\"</span> &gt;item1&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li id=\"item2\" &gt;item2&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item3\"</span> &gt;item3&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item2\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target == item1)&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">\"hello item1\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target == item2)&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">\"hello item2\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target == item3)&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">\"hello item3\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2、动态的添加DOM元素，不需要因为元素的改动而修改事件绑定。</p>\n<p><strong>传统写法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item1\"</span> &gt;item1&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li id=\"item2\" &gt;item2&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item3\"</span> &gt;item3&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"list\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = list.getElementsByTagName(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;item.length;i++)&#123;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t\titem[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(item[i].innerHTML);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> textnode=<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"item4\"</span>);</span><br><span class=\"line\">node.appendChild(textnode);</span><br><span class=\"line\">list.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>点击item1到item3都有事件响应，但是点击item4时，没有事件响应。说明传统的事件绑定无法对动态添加的元素而动态的添加事件。</p>\n<p><strong>事件委托</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item1\"</span> &gt;item1&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li id=\"item2\" &gt;item2&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item3\"</span> &gt;item3&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"list\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target.nodeName == <span class=\"string\">\"LI\"</span>)&#123;</span><br><span class=\"line\">\t\talert(target.innerHTML);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> textnode=<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"item4\"</span>);</span><br><span class=\"line\">node.appendChild(textnode);</span><br><span class=\"line\">list.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>当点击item4时，item4有事件响应。说明事件委托可以为新添加的DOM元素动态的添加事件。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在JavaScript的学习中，我们经常会遇到JavaScript的事件机制，例如，事件绑定、事件监听、事件委托（事件代理）等。这些名词是什么意思呢，有什么作用呢？</p>\n</blockquote>\n<hr>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><p>要想让 JavaScript 对用户的操作作出响应，首先要对 DOM 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称。</p>\n<p>在JavaScript中，有三种常用的绑定事件的方法：</p>\n<ul>\n<li>在DOM元素中直接绑定；</li>\n<li>在JavaScript代码中绑定；</li>\n<li>绑定事件监听函数。","more":"<h4 id=\"在DOM中直接绑定事件\"><a href=\"#在DOM中直接绑定事件\" class=\"headerlink\" title=\"在DOM中直接绑定事件\"></a>在DOM中直接绑定事件</h4>我们可以在DOM元素上绑定onclick、onmouseover、onmouseout、onmousedown、onmouseup、ondblclick、onkeydown、onkeypress、onkeyup等。好多不一一列出了。如果想知道更多事件类型请查看，<a href=\"http://www.runoob.com/jsref/dom-obj-event.html\" target=\"_blank\" rel=\"noopener\">DOM事件</a>。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"click me\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"hello()\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\talert(<span class=\"string\">\"hello world!\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"在JavaScript代码中绑定事件\"><a href=\"#在JavaScript代码中绑定事件\" class=\"headerlink\" title=\"在JavaScript代码中绑定事件\"></a>在JavaScript代码中绑定事件</h4><p>在JavaScript代码中（即<code>script</code>标签内）绑定事件可以使JavaScript代码与HTML标签分离，文档结构清晰，便于管理和开发。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"click me\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn\"</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\talert(<span class=\"string\">\"hello world!\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用事件监听绑定事件\"><a href=\"#使用事件监听绑定事件\" class=\"headerlink\" title=\"使用事件监听绑定事件\"></a>使用事件监听绑定事件</h4><p>绑定事件的另一种方法是用 addEventListener() 或 attachEvent() 来绑定事件监听函数。下面详细介绍，事件监听。</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p>关于事件监听，W3C规范中定义了3个事件阶段，依次是捕获阶段、目标阶段、冒泡阶段。</p>\n<p>起初Netscape制定了JavaScript的一套事件驱动机制（即事件捕获）。随即IE也推出了自己的一套事件驱动机制（即事件冒泡）。最后W3C规范了两种事件机制，分为捕获阶段、目标阶段、冒泡阶段。IE8以前IE一直坚持自己的事件机制（前端人员一直头痛的兼容性问题），IE9以后IE也支持了W3C规范。</p>\n<h4 id=\"W3C规范\"><a href=\"#W3C规范\" class=\"headerlink\" title=\"W3C规范\"></a>W3C规范</h4><p>语法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.addEventListener(event, <span class=\"function\"><span class=\"keyword\">function</span>, <span class=\"title\">useCapture</span>)</span></span><br></pre></td></tr></table></figure></p>\n<p>event : （必需）事件名，支持所有<a href=\"http://www.runoob.com/jsref/dom-obj-event.html\" target=\"_blank\" rel=\"noopener\">DOM事件</a>。<br>function：（必需）指定要事件触发时执行的函数。<br>useCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。</p>\n<p>注：IE8以下不支持。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn1\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn1\"</span>).addEventListener(<span class=\"string\">\"click\"</span>,hello);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello world!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"IE标准\"><a href=\"#IE标准\" class=\"headerlink\" title=\"IE标准\"></a>IE标准</h4><p>语法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.attachEvent(event, <span class=\"function\"><span class=\"keyword\">function</span>)</span></span><br></pre></td></tr></table></figure></p>\n<p>event：（必需）事件类型。需加“on“，例如：onclick。<br>function：（必需）指定要事件触发时执行的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn2\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn2\"</span>).attachEvent(<span class=\"string\">\"onclick\"</span>,hello);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello world!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"事件监听的优点\"><a href=\"#事件监听的优点\" class=\"headerlink\" title=\"事件监听的优点\"></a>事件监听的优点</h4><p>1、可以绑定多个事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn3\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn3\"</span>);</span><br><span class=\"line\">btn3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 1\"</span>); <span class=\"comment\">//不执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">btn3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 2\"</span>); <span class=\"comment\">//执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>常规的事件绑定只执行最后绑定的事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn4\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn4 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn4\"</span>);</span><br><span class=\"line\">btn4.addEventListener(<span class=\"string\">\"click\"</span>,hello1);</span><br><span class=\"line\">btn4.addEventListener(<span class=\"string\">\"click\"</span>,hello2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>两个事件都执行了。</p>\n<p>2、可以解除相应的绑定<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn5\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn5 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn5\"</span>);</span><br><span class=\"line\">btn5.addEventListener(<span class=\"string\">\"click\"</span>,hello1);<span class=\"comment\">//执行了</span></span><br><span class=\"line\">btn5.addEventListener(<span class=\"string\">\"click\"</span>,hello2);<span class=\"comment\">//不执行</span></span><br><span class=\"line\">btn5.removeEventListener(<span class=\"string\">\"click\"</span>,hello2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello 2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"封装事件监听\"><a href=\"#封装事件监听\" class=\"headerlink\" title=\"封装事件监听\"></a>封装事件监听</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn5\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定监听事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEventHandler</span>(<span class=\"params\">target,type,fn</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target.addEventListener)&#123;</span><br><span class=\"line\">\t\ttarget.addEventListener(type,fn);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\ttarget.attachEvent(<span class=\"string\">\"on\"</span>+type,fn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移除监听事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeEventHandler</span>(<span class=\"params\">target,type,fn</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target.removeEventListener)&#123;</span><br><span class=\"line\">\t\ttarget.removeEventListener(type,fn);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\ttarget.detachEvent(<span class=\"string\">\"on\"</span>+type,fn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn5 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn5\"</span>);</span><br><span class=\"line\">addEventHandler(btn5,<span class=\"string\">\"click\"</span>,hello1);<span class=\"comment\">//添加事件hello1</span></span><br><span class=\"line\">addEventHandler(btn5,<span class=\"string\">\"click\"</span>,hello2);<span class=\"comment\">//添加事件hello2</span></span><br><span class=\"line\">removeEventHandler(btn5,<span class=\"string\">\"click\"</span>,hello1);<span class=\"comment\">//移除事件hello1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>事件委托就是利用冒泡的原理，把事件加到父元素或祖先元素上，触发执行效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> id=<span class=\"string\">\"btn6\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn6 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn6\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\tevent = event || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> target = event.target || event.srcElement;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target == btn6)&#123;</span><br><span class=\"line\">\t\talert(btn5.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面只是个例子，代码尽可能的简化了。在实际的代码中 我们可能用到jQuery的live()、delegate()、bind()、on()等。</p>\n<h4 id=\"事件委托优点\"><a href=\"#事件委托优点\" class=\"headerlink\" title=\"事件委托优点\"></a>事件委托优点</h4><p>1、提高JavaScript性能。事件委托可以显著的提高事件的处理速度，减少内存的占用。<a href=\"http://www.diguage.com/archives/71.html\" target=\"_blank\" rel=\"noopener\">实例分析JavaScript中的事件委托和事件绑定</a>，这篇文章写得还不错。</p>\n<p><strong>传统写法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item1\"</span> &gt;item1&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li id=\"item2\" &gt;item2&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item3\"</span> &gt;item3&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item2\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">item1.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello item1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello item2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">\"hello item3\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>事件委托</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item1\"</span> &gt;item1&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li id=\"item2\" &gt;item2&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item3\"</span> &gt;item3&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item2\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"item3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target == item1)&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">\"hello item1\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target == item2)&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">\"hello item2\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target == item3)&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">\"hello item3\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2、动态的添加DOM元素，不需要因为元素的改动而修改事件绑定。</p>\n<p><strong>传统写法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item1\"</span> &gt;item1&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li id=\"item2\" &gt;item2&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item3\"</span> &gt;item3&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"list\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = list.getElementsByTagName(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;item.length;i++)&#123;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t\titem[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(item[i].innerHTML);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> textnode=<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"item4\"</span>);</span><br><span class=\"line\">node.appendChild(textnode);</span><br><span class=\"line\">list.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>点击item1到item3都有事件响应，但是点击item4时，没有事件响应。说明传统的事件绑定无法对动态添加的元素而动态的添加事件。</p>\n<p><strong>事件委托</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item1\"</span> &gt;item1&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li id=\"item2\" &gt;item2&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li id=<span class=\"string\">\"item3\"</span> &gt;item3&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"list\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(target.nodeName == <span class=\"string\">\"LI\"</span>)&#123;</span><br><span class=\"line\">\t\talert(target.innerHTML);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> textnode=<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"item4\"</span>);</span><br><span class=\"line\">node.appendChild(textnode);</span><br><span class=\"line\">list.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>当点击item4时，item4有事件响应。说明事件委托可以为新添加的DOM元素动态的添加事件。</p>"},{"title":"折腾：coding.net IDE node环境的安装","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/08/27/online-IDE-node-enviroment/\n\n> 作为一个码农，我们经常会有这样一个痛点：项目出现一个紧急bug，但自己又不在公司，怎办呢？虽然项目可能在git或者svn上，但clone下来安装测试环境也是个麻烦的是啊。于是，我们想到了在线IDE。作为一个前端开发者nodeJS环境是非常重要的，今天花了一个多小时折腾了下[coding.net](https://ide.coding.net)。\n\n\n----------\n\n### IDE介绍\n\n以前我一直在用[nitrous.io](https://nitrous.io)的在线IDE，它是一个国外的在线IDE，访问有点慢，一旦网络不好就掉线，挺好的地方就是，它每个月有50个小时的免费使用。coding.net相当于是一个国内版的github，也是一个远程的git仓库，它有个在线IDE还挺好用的。有终端命令面板、支持vim和 Emacs的编辑器、在线运行环境、支持git（哎，帮别人做广告了，不知道coding能不能发我点稿费）。\n\n下面进入主题。\n\n\n### 安装nvm\n\nnvm是nodejs版本管理工具。可以在多个nodejs版本中进行切换，降低了升级nodejs时的成本。\n<!-- more -->\n下载nvm，直接在终端面板把它clone过来就行了。为了不影响项目目录，我们把它clone在项目根目录的同级目录。\n```bash\n-> ~ cd ..\n-> ~ git clone https://github.com/creationix/nvm.git\n```\n\n接下来，进入nvm目录\n```bash\n-> ~ cd nvm\n```\n\n安装nvm\n```bash\n-> ~ ./install.sh\n```\n\n安装完后，让系统自动执行它\n```bash\n-> ~ source ./nvm.sh\n```\n\n现在就可以使用nvm命令了，查看一下help\n```bash\n-> ~ nvm -help\n```\n\n\n### 安装nodeJS\n\n查看可以安装的nodejs版本，这里将会输出一大堆可供安装的nodejs版本\n```bash\n-> ~ nvm ls-remote\n```\n\n选择一个进行安装，我安装的是v4.5.0\n```bash\n-> ~ nvm install v4.5.0\n```\n\n当然你可以安装多个版本，例如我还要安装最新版本，测试一下它的新特性\n```bash\n-> ~ nvm install v6.4.0\n```\n\n当你想切换回原先稳定版本时，你可以\n```bash\n-> ~ nvm use v4.5.0\n```\n\n安装完node，你就可以使用node和npm了。你可以安装一些自动化工具啊，一些插件啊什么的。\n\n\n### 一些问题\n\n1、这些在线IDE虽然挺方便的，但毕竟没有本地的好，还有一些安全和网络限制的问题，另外到后面可能还要收费。\n\n2、nvm问题，因为coding没有给用户root权限，所以你每次要运行node前都必须运行一下nvm。\n\n```bash\n-> ~ cd ..\n-> ~ cd nvm\n-> ~ source ./nvm.sh\n```\n\n### END","source":"_posts/study-notes/折腾：coding.net IDE node环境的安装.md","raw":"title: 折腾：coding.net IDE node环境的安装\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/08/27/online-IDE-node-enviroment/\n\n> 作为一个码农，我们经常会有这样一个痛点：项目出现一个紧急bug，但自己又不在公司，怎办呢？虽然项目可能在git或者svn上，但clone下来安装测试环境也是个麻烦的是啊。于是，我们想到了在线IDE。作为一个前端开发者nodeJS环境是非常重要的，今天花了一个多小时折腾了下[coding.net](https://ide.coding.net)。\n\n\n----------\n\n### IDE介绍\n\n以前我一直在用[nitrous.io](https://nitrous.io)的在线IDE，它是一个国外的在线IDE，访问有点慢，一旦网络不好就掉线，挺好的地方就是，它每个月有50个小时的免费使用。coding.net相当于是一个国内版的github，也是一个远程的git仓库，它有个在线IDE还挺好用的。有终端命令面板、支持vim和 Emacs的编辑器、在线运行环境、支持git（哎，帮别人做广告了，不知道coding能不能发我点稿费）。\n\n下面进入主题。\n\n\n### 安装nvm\n\nnvm是nodejs版本管理工具。可以在多个nodejs版本中进行切换，降低了升级nodejs时的成本。\n<!-- more -->\n下载nvm，直接在终端面板把它clone过来就行了。为了不影响项目目录，我们把它clone在项目根目录的同级目录。\n```bash\n-> ~ cd ..\n-> ~ git clone https://github.com/creationix/nvm.git\n```\n\n接下来，进入nvm目录\n```bash\n-> ~ cd nvm\n```\n\n安装nvm\n```bash\n-> ~ ./install.sh\n```\n\n安装完后，让系统自动执行它\n```bash\n-> ~ source ./nvm.sh\n```\n\n现在就可以使用nvm命令了，查看一下help\n```bash\n-> ~ nvm -help\n```\n\n\n### 安装nodeJS\n\n查看可以安装的nodejs版本，这里将会输出一大堆可供安装的nodejs版本\n```bash\n-> ~ nvm ls-remote\n```\n\n选择一个进行安装，我安装的是v4.5.0\n```bash\n-> ~ nvm install v4.5.0\n```\n\n当然你可以安装多个版本，例如我还要安装最新版本，测试一下它的新特性\n```bash\n-> ~ nvm install v6.4.0\n```\n\n当你想切换回原先稳定版本时，你可以\n```bash\n-> ~ nvm use v4.5.0\n```\n\n安装完node，你就可以使用node和npm了。你可以安装一些自动化工具啊，一些插件啊什么的。\n\n\n### 一些问题\n\n1、这些在线IDE虽然挺方便的，但毕竟没有本地的好，还有一些安全和网络限制的问题，另外到后面可能还要收费。\n\n2、nvm问题，因为coding没有给用户root权限，所以你每次要运行node前都必须运行一下nvm。\n\n```bash\n-> ~ cd ..\n-> ~ cd nvm\n-> ~ source ./nvm.sh\n```\n\n### END","slug":"study-notes/折腾：coding.net IDE node环境的安装","published":1,"updated":"2019-05-05T06:48:55.644Z","_id":"cj0dgwc77003s2u6begpd7qia","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/27/online-IDE-node-enviroment/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/27/online-IDE-node-enviroment/</a></p>\n<blockquote>\n<p>作为一个码农，我们经常会有这样一个痛点：项目出现一个紧急bug，但自己又不在公司，怎办呢？虽然项目可能在git或者svn上，但clone下来安装测试环境也是个麻烦的是啊。于是，我们想到了在线IDE。作为一个前端开发者nodeJS环境是非常重要的，今天花了一个多小时折腾了下<a href=\"https://ide.coding.net\" target=\"_blank\" rel=\"noopener\">coding.net</a>。</p>\n</blockquote>\n<hr>\n<h3 id=\"IDE介绍\"><a href=\"#IDE介绍\" class=\"headerlink\" title=\"IDE介绍\"></a>IDE介绍</h3><p>以前我一直在用<a href=\"https://nitrous.io\" target=\"_blank\" rel=\"noopener\">nitrous.io</a>的在线IDE，它是一个国外的在线IDE，访问有点慢，一旦网络不好就掉线，挺好的地方就是，它每个月有50个小时的免费使用。coding.net相当于是一个国内版的github，也是一个远程的git仓库，它有个在线IDE还挺好用的。有终端命令面板、支持vim和 Emacs的编辑器、在线运行环境、支持git（哎，帮别人做广告了，不知道coding能不能发我点稿费）。</p>\n<p>下面进入主题。</p>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><p>nvm是nodejs版本管理工具。可以在多个nodejs版本中进行切换，降低了升级nodejs时的成本。<br><a id=\"more\"></a><br>下载nvm，直接在终端面板把它clone过来就行了。为了不影响项目目录，我们把它clone在项目根目录的同级目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">-&gt; ~ git <span class=\"built_in\">clone</span> https://github.com/creationix/nvm.git</span><br></pre></td></tr></table></figure></p>\n<p>接下来，进入nvm目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ <span class=\"built_in\">cd</span> nvm</span><br></pre></td></tr></table></figure></p>\n<p>安装nvm<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ ./install.sh</span><br></pre></td></tr></table></figure></p>\n<p>安装完后，让系统自动执行它<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ <span class=\"built_in\">source</span> ./nvm.sh</span><br></pre></td></tr></table></figure></p>\n<p>现在就可以使用nvm命令了，查看一下help<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm -<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装nodeJS\"><a href=\"#安装nodeJS\" class=\"headerlink\" title=\"安装nodeJS\"></a>安装nodeJS</h3><p>查看可以安装的nodejs版本，这里将会输出一大堆可供安装的nodejs版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm ls-remote</span><br></pre></td></tr></table></figure></p>\n<p>选择一个进行安装，我安装的是v4.5.0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm install v4.5.0</span><br></pre></td></tr></table></figure></p>\n<p>当然你可以安装多个版本，例如我还要安装最新版本，测试一下它的新特性<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm install v6.4.0</span><br></pre></td></tr></table></figure></p>\n<p>当你想切换回原先稳定版本时，你可以<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm use v4.5.0</span><br></pre></td></tr></table></figure></p>\n<p>安装完node，你就可以使用node和npm了。你可以安装一些自动化工具啊，一些插件啊什么的。</p>\n<h3 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h3><p>1、这些在线IDE虽然挺方便的，但毕竟没有本地的好，还有一些安全和网络限制的问题，另外到后面可能还要收费。</p>\n<p>2、nvm问题，因为coding没有给用户root权限，所以你每次要运行node前都必须运行一下nvm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">-&gt; ~ <span class=\"built_in\">cd</span> nvm</span><br><span class=\"line\">-&gt; ~ <span class=\"built_in\">source</span> ./nvm.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/08/27/online-IDE-node-enviroment/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/08/27/online-IDE-node-enviroment/</a></p>\n<blockquote>\n<p>作为一个码农，我们经常会有这样一个痛点：项目出现一个紧急bug，但自己又不在公司，怎办呢？虽然项目可能在git或者svn上，但clone下来安装测试环境也是个麻烦的是啊。于是，我们想到了在线IDE。作为一个前端开发者nodeJS环境是非常重要的，今天花了一个多小时折腾了下<a href=\"https://ide.coding.net\" target=\"_blank\" rel=\"noopener\">coding.net</a>。</p>\n</blockquote>\n<hr>\n<h3 id=\"IDE介绍\"><a href=\"#IDE介绍\" class=\"headerlink\" title=\"IDE介绍\"></a>IDE介绍</h3><p>以前我一直在用<a href=\"https://nitrous.io\" target=\"_blank\" rel=\"noopener\">nitrous.io</a>的在线IDE，它是一个国外的在线IDE，访问有点慢，一旦网络不好就掉线，挺好的地方就是，它每个月有50个小时的免费使用。coding.net相当于是一个国内版的github，也是一个远程的git仓库，它有个在线IDE还挺好用的。有终端命令面板、支持vim和 Emacs的编辑器、在线运行环境、支持git（哎，帮别人做广告了，不知道coding能不能发我点稿费）。</p>\n<p>下面进入主题。</p>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><p>nvm是nodejs版本管理工具。可以在多个nodejs版本中进行切换，降低了升级nodejs时的成本。<br>","more":"<br>下载nvm，直接在终端面板把它clone过来就行了。为了不影响项目目录，我们把它clone在项目根目录的同级目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">-&gt; ~ git <span class=\"built_in\">clone</span> https://github.com/creationix/nvm.git</span><br></pre></td></tr></table></figure></p>\n<p>接下来，进入nvm目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ <span class=\"built_in\">cd</span> nvm</span><br></pre></td></tr></table></figure></p>\n<p>安装nvm<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ ./install.sh</span><br></pre></td></tr></table></figure></p>\n<p>安装完后，让系统自动执行它<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ <span class=\"built_in\">source</span> ./nvm.sh</span><br></pre></td></tr></table></figure></p>\n<p>现在就可以使用nvm命令了，查看一下help<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm -<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装nodeJS\"><a href=\"#安装nodeJS\" class=\"headerlink\" title=\"安装nodeJS\"></a>安装nodeJS</h3><p>查看可以安装的nodejs版本，这里将会输出一大堆可供安装的nodejs版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm ls-remote</span><br></pre></td></tr></table></figure></p>\n<p>选择一个进行安装，我安装的是v4.5.0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm install v4.5.0</span><br></pre></td></tr></table></figure></p>\n<p>当然你可以安装多个版本，例如我还要安装最新版本，测试一下它的新特性<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm install v6.4.0</span><br></pre></td></tr></table></figure></p>\n<p>当你想切换回原先稳定版本时，你可以<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ nvm use v4.5.0</span><br></pre></td></tr></table></figure></p>\n<p>安装完node，你就可以使用node和npm了。你可以安装一些自动化工具啊，一些插件啊什么的。</p>\n<h3 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h3><p>1、这些在线IDE虽然挺方便的，但毕竟没有本地的好，还有一些安全和网络限制的问题，另外到后面可能还要收费。</p>\n<p>2、nvm问题，因为coding没有给用户root权限，所以你每次要运行node前都必须运行一下nvm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ~ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">-&gt; ~ <span class=\"built_in\">cd</span> nvm</span><br><span class=\"line\">-&gt; ~ <span class=\"built_in\">source</span> ./nvm.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>"},{"title":"各阶段前端工程师都应该具备什么能力（JS篇）","date":"2017-01-05T07:53:29.000Z","_content":"> 作为一名程序猿、攻城狮，要清楚自己的实力，自己所处的阶段，这样才能更好的扬长补短。常问自己几个问题：我最擅长什么，我比别人有哪些优势？我的短板在哪些方面？我在整个行业所处什么阶段，在这个阶段我该如何提升自己？\n> 对于前端工程师等级的划分，每个人都可能有自己的理解，正所谓，一千个读者就有一千个哈姆雷特。下面是我对前端工程师划分的一些拙见。\n\n## 一、入门菜鸟\n\n这个阶段一般具备以下几点：\n- 基础的JavaScript编程能力\n- 基本能看懂别人写的代码\n- 有一定的代码调试能力\n\n举些例子：\n### 1、怎样对字符串进行截取操作，你会想到哪些方法？\nsubstr() ,sibString(), split(), slice() ...\n\n### 2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？\n```javascript\nvar url = window.location.href;\nif(url === 'http://www.xieliqun.com'){\n\twindow.location.href = 'https://github.com/tsrot';\n}else{\n\twindow.location.href = '/404';\n}\n```\n<!-- more -->\n### 3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？\n```javascript\nvar foo = 'hello world!';\nvar arr = [];\nfor(var i=0;i<foo.length;i++){\n\tvar fooArr = arr.push(foo[i]);\n\tconsole.log(fooArr);\n}\n```\n\n## 二、初级工程师\n\n初级工程师应该能够：\n- 解决一些例如特效方面的问题\n- 能使用一些框架，例如jQuery、bootstrap等\n- 能使用ajax进行简单的前后通信\n- 能DOM编程解决一些问题\n- 能熟练使用浏览器的调试工具\n- 了解一些HTML 5 API\n- 了解ES5 规范\n\n举些例子：\n### 1、怎样实现一个焦点图的效果？\n在这个阶段只要能正确解决问题就好了。你可以自己去写代码实现，无论是原生，还是使用jQuery，你也可以百度去网上找一些焦点图的插件，或别人总结的方法。只要能够无错地完成需求，不考虑代码冗余之类的带来的性能问题。\n\n\n### 2、使用jQuery完成一个简单的动画？\n假如完成一个可控制的球在水平面跳动的效果。你应该想怎样触发球，是hover还是click，球怎样跳动起来，是用css样式来控制，还是用jQuery的animate函数来执行动画。\n\n### 3、怎样使用ajax完成用户名验证？\n你要完整的说出它的思路，首先用户输入完用户名，失去焦点（blur）后，然后通过ajax POST或者GET把用户名提交到后端，此时后端会给你一个接口，你把用户名传到这个接口，后端应该会返回一个true or false给你，根据返回的结果，作出相应的用户提示。\n\n### 4、如何动态的插入、删除、替换一个DOM元素？\n原生方法：appendChild()、removeChild()、innerHTML、replaceChild() ...\njQuery方法：append()、empty()、html()、remove()、replaceAll() ...\n\n### 5、H5 新增了哪些API？\nlocalStorage 、sessionStorage、ApplicationCache、postMessage、file、canvas ...\n\n### 6、ES5 比 ES3 有哪些新特性？\n语法上更严格了，定义变量必需使用var，否则报错。\n对Object的控制更精确了，Object.defineProperty可控制对象的读写枚举等，更加丰富了一个对象。对数组Array和字符串 String也增加了一些方法，等等。\n\n\n## 三 、中级工程师\n\n中级工程师应该具备：\n- 深入理解this、闭包、事件模型、原型和原型链、作用域链、继承等概念\n- 尽量使用ES5编写代码，了解ES6\n- 熟悉前后端通信方式\n- 熟悉一些前端技术框架设计思想、优劣势等\n- 熟悉模块化、面向对象、MVC等编程思想\n- 能自己独立封装一些组件\n- 编码时尽量考虑性能优化\n- 了解常见的http状态码\n- 了解前端工程化思想\n- 了解一些最新的技术框架等\n- 了解函数式编程思想\n\n举些例子：自找答案\n1. setTimeout中function里面的this指向什么？\n2. 写一个最常见的闭包问题？\n3. 如何深度克隆一个对象？\n4. 前后端有哪些通信方式？\n5. jQuery里的ready函数是怎样实现的，和原生的load有什么不同？\n6. 谈谈commonJS和AMD的区别？\n7. JavaScript是如何实现面向对象的？\n8. 谈一谈JavaScript的性能优化问题？\n9. bower、grunt、gulp、yeoman、webpack的了解？\n10. JavaScript的异步编程？\n\n\n## 四、高级工程师\n\n高级前端工程师应该具备：\n- 使用前端工程化思维开发\n- JavaScript对DOM操作的各种方式与性能开销\n- 熟悉RESTful架构、跨域等技术\n- 能对代码进行良好的性能优化\n- 了解常用框架功能原理的代码实现\n- 熟悉前端开发的一些安全问题\n- 熟悉常见跨浏览器问题\n- 了解必要的计算机网络协议\n- 熟悉JavaScript的前后端开发\n- 熟悉各种开发设计模式\n- 了解前端的一些测试方法\n\n举些例子：自找答案\n1. 如何解决回调层级过深的问题？\n2. CORS跨域的原理？\n3. 谈谈各种本地存储方案的优势与弊端？\n4. JS延迟加载的方式有哪些？\n5. 哪些操作会造成内存泄漏？\n6. 写一个通用的事件侦听器函数？\n7. 介绍一下XSS和CSRF的原理和防范？\n8. 如何实现一个简易个模块管理库？\n9. 介绍for in的技术细节与性能问题？\n10. jQuery操作DOM细节？\n11. 谈谈JS的满加载和断点续调问题？\n12. 如何实现JS的依赖注入？\n\n\n\n\n","source":"_posts/study-notes/各阶段前端工程师都应该具备什么能力（JS篇）.md","raw":"title: 各阶段前端工程师都应该具备什么能力（JS篇）\ndate: 2017-1-5 15:53:29\n---\n> 作为一名程序猿、攻城狮，要清楚自己的实力，自己所处的阶段，这样才能更好的扬长补短。常问自己几个问题：我最擅长什么，我比别人有哪些优势？我的短板在哪些方面？我在整个行业所处什么阶段，在这个阶段我该如何提升自己？\n> 对于前端工程师等级的划分，每个人都可能有自己的理解，正所谓，一千个读者就有一千个哈姆雷特。下面是我对前端工程师划分的一些拙见。\n\n## 一、入门菜鸟\n\n这个阶段一般具备以下几点：\n- 基础的JavaScript编程能力\n- 基本能看懂别人写的代码\n- 有一定的代码调试能力\n\n举些例子：\n### 1、怎样对字符串进行截取操作，你会想到哪些方法？\nsubstr() ,sibString(), split(), slice() ...\n\n### 2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？\n```javascript\nvar url = window.location.href;\nif(url === 'http://www.xieliqun.com'){\n\twindow.location.href = 'https://github.com/tsrot';\n}else{\n\twindow.location.href = '/404';\n}\n```\n<!-- more -->\n### 3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？\n```javascript\nvar foo = 'hello world!';\nvar arr = [];\nfor(var i=0;i<foo.length;i++){\n\tvar fooArr = arr.push(foo[i]);\n\tconsole.log(fooArr);\n}\n```\n\n## 二、初级工程师\n\n初级工程师应该能够：\n- 解决一些例如特效方面的问题\n- 能使用一些框架，例如jQuery、bootstrap等\n- 能使用ajax进行简单的前后通信\n- 能DOM编程解决一些问题\n- 能熟练使用浏览器的调试工具\n- 了解一些HTML 5 API\n- 了解ES5 规范\n\n举些例子：\n### 1、怎样实现一个焦点图的效果？\n在这个阶段只要能正确解决问题就好了。你可以自己去写代码实现，无论是原生，还是使用jQuery，你也可以百度去网上找一些焦点图的插件，或别人总结的方法。只要能够无错地完成需求，不考虑代码冗余之类的带来的性能问题。\n\n\n### 2、使用jQuery完成一个简单的动画？\n假如完成一个可控制的球在水平面跳动的效果。你应该想怎样触发球，是hover还是click，球怎样跳动起来，是用css样式来控制，还是用jQuery的animate函数来执行动画。\n\n### 3、怎样使用ajax完成用户名验证？\n你要完整的说出它的思路，首先用户输入完用户名，失去焦点（blur）后，然后通过ajax POST或者GET把用户名提交到后端，此时后端会给你一个接口，你把用户名传到这个接口，后端应该会返回一个true or false给你，根据返回的结果，作出相应的用户提示。\n\n### 4、如何动态的插入、删除、替换一个DOM元素？\n原生方法：appendChild()、removeChild()、innerHTML、replaceChild() ...\njQuery方法：append()、empty()、html()、remove()、replaceAll() ...\n\n### 5、H5 新增了哪些API？\nlocalStorage 、sessionStorage、ApplicationCache、postMessage、file、canvas ...\n\n### 6、ES5 比 ES3 有哪些新特性？\n语法上更严格了，定义变量必需使用var，否则报错。\n对Object的控制更精确了，Object.defineProperty可控制对象的读写枚举等，更加丰富了一个对象。对数组Array和字符串 String也增加了一些方法，等等。\n\n\n## 三 、中级工程师\n\n中级工程师应该具备：\n- 深入理解this、闭包、事件模型、原型和原型链、作用域链、继承等概念\n- 尽量使用ES5编写代码，了解ES6\n- 熟悉前后端通信方式\n- 熟悉一些前端技术框架设计思想、优劣势等\n- 熟悉模块化、面向对象、MVC等编程思想\n- 能自己独立封装一些组件\n- 编码时尽量考虑性能优化\n- 了解常见的http状态码\n- 了解前端工程化思想\n- 了解一些最新的技术框架等\n- 了解函数式编程思想\n\n举些例子：自找答案\n1. setTimeout中function里面的this指向什么？\n2. 写一个最常见的闭包问题？\n3. 如何深度克隆一个对象？\n4. 前后端有哪些通信方式？\n5. jQuery里的ready函数是怎样实现的，和原生的load有什么不同？\n6. 谈谈commonJS和AMD的区别？\n7. JavaScript是如何实现面向对象的？\n8. 谈一谈JavaScript的性能优化问题？\n9. bower、grunt、gulp、yeoman、webpack的了解？\n10. JavaScript的异步编程？\n\n\n## 四、高级工程师\n\n高级前端工程师应该具备：\n- 使用前端工程化思维开发\n- JavaScript对DOM操作的各种方式与性能开销\n- 熟悉RESTful架构、跨域等技术\n- 能对代码进行良好的性能优化\n- 了解常用框架功能原理的代码实现\n- 熟悉前端开发的一些安全问题\n- 熟悉常见跨浏览器问题\n- 了解必要的计算机网络协议\n- 熟悉JavaScript的前后端开发\n- 熟悉各种开发设计模式\n- 了解前端的一些测试方法\n\n举些例子：自找答案\n1. 如何解决回调层级过深的问题？\n2. CORS跨域的原理？\n3. 谈谈各种本地存储方案的优势与弊端？\n4. JS延迟加载的方式有哪些？\n5. 哪些操作会造成内存泄漏？\n6. 写一个通用的事件侦听器函数？\n7. 介绍一下XSS和CSRF的原理和防范？\n8. 如何实现一个简易个模块管理库？\n9. 介绍for in的技术细节与性能问题？\n10. jQuery操作DOM细节？\n11. 谈谈JS的满加载和断点续调问题？\n12. 如何实现JS的依赖注入？\n\n\n\n\n","slug":"study-notes/各阶段前端工程师都应该具备什么能力（JS篇）","published":1,"updated":"2019-05-05T06:48:45.100Z","_id":"cj0dgwc78003t2u6bie9zo0wy","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作为一名程序猿、攻城狮，要清楚自己的实力，自己所处的阶段，这样才能更好的扬长补短。常问自己几个问题：我最擅长什么，我比别人有哪些优势？我的短板在哪些方面？我在整个行业所处什么阶段，在这个阶段我该如何提升自己？<br>对于前端工程师等级的划分，每个人都可能有自己的理解，正所谓，一千个读者就有一千个哈姆雷特。下面是我对前端工程师划分的一些拙见。</p>\n</blockquote>\n<h2 id=\"一、入门菜鸟\"><a href=\"#一、入门菜鸟\" class=\"headerlink\" title=\"一、入门菜鸟\"></a>一、入门菜鸟</h2><p>这个阶段一般具备以下几点：</p>\n<ul>\n<li>基础的JavaScript编程能力</li>\n<li>基本能看懂别人写的代码</li>\n<li>有一定的代码调试能力</li>\n</ul>\n<p>举些例子：</p>\n<h3 id=\"1、怎样对字符串进行截取操作，你会想到哪些方法？\"><a href=\"#1、怎样对字符串进行截取操作，你会想到哪些方法？\" class=\"headerlink\" title=\"1、怎样对字符串进行截取操作，你会想到哪些方法？\"></a>1、怎样对字符串进行截取操作，你会想到哪些方法？</h3><p>substr() ,sibString(), split(), slice() …</p>\n<h3 id=\"2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？\"><a href=\"#2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？\" class=\"headerlink\" title=\"2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？\"></a>2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(url === <span class=\"string\">'http://www.xieliqun.com'</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.location.href = <span class=\"string\">'https://github.com/tsrot'</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.location.href = <span class=\"string\">'/404'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？\"><a href=\"#3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？\" class=\"headerlink\" title=\"3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？\"></a>3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'hello world!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;foo.length;i++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fooArr = arr.push(foo[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(fooArr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、初级工程师\"><a href=\"#二、初级工程师\" class=\"headerlink\" title=\"二、初级工程师\"></a>二、初级工程师</h2><p>初级工程师应该能够：</p>\n<ul>\n<li>解决一些例如特效方面的问题</li>\n<li>能使用一些框架，例如jQuery、bootstrap等</li>\n<li>能使用ajax进行简单的前后通信</li>\n<li>能DOM编程解决一些问题</li>\n<li>能熟练使用浏览器的调试工具</li>\n<li>了解一些HTML 5 API</li>\n<li>了解ES5 规范</li>\n</ul>\n<p>举些例子：</p>\n<h3 id=\"1、怎样实现一个焦点图的效果？\"><a href=\"#1、怎样实现一个焦点图的效果？\" class=\"headerlink\" title=\"1、怎样实现一个焦点图的效果？\"></a>1、怎样实现一个焦点图的效果？</h3><p>在这个阶段只要能正确解决问题就好了。你可以自己去写代码实现，无论是原生，还是使用jQuery，你也可以百度去网上找一些焦点图的插件，或别人总结的方法。只要能够无错地完成需求，不考虑代码冗余之类的带来的性能问题。</p>\n<h3 id=\"2、使用jQuery完成一个简单的动画？\"><a href=\"#2、使用jQuery完成一个简单的动画？\" class=\"headerlink\" title=\"2、使用jQuery完成一个简单的动画？\"></a>2、使用jQuery完成一个简单的动画？</h3><p>假如完成一个可控制的球在水平面跳动的效果。你应该想怎样触发球，是hover还是click，球怎样跳动起来，是用css样式来控制，还是用jQuery的animate函数来执行动画。</p>\n<h3 id=\"3、怎样使用ajax完成用户名验证？\"><a href=\"#3、怎样使用ajax完成用户名验证？\" class=\"headerlink\" title=\"3、怎样使用ajax完成用户名验证？\"></a>3、怎样使用ajax完成用户名验证？</h3><p>你要完整的说出它的思路，首先用户输入完用户名，失去焦点（blur）后，然后通过ajax POST或者GET把用户名提交到后端，此时后端会给你一个接口，你把用户名传到这个接口，后端应该会返回一个true or false给你，根据返回的结果，作出相应的用户提示。</p>\n<h3 id=\"4、如何动态的插入、删除、替换一个DOM元素？\"><a href=\"#4、如何动态的插入、删除、替换一个DOM元素？\" class=\"headerlink\" title=\"4、如何动态的插入、删除、替换一个DOM元素？\"></a>4、如何动态的插入、删除、替换一个DOM元素？</h3><p>原生方法：appendChild()、removeChild()、innerHTML、replaceChild() …<br>jQuery方法：append()、empty()、html()、remove()、replaceAll() …</p>\n<h3 id=\"5、H5-新增了哪些API？\"><a href=\"#5、H5-新增了哪些API？\" class=\"headerlink\" title=\"5、H5 新增了哪些API？\"></a>5、H5 新增了哪些API？</h3><p>localStorage 、sessionStorage、ApplicationCache、postMessage、file、canvas …</p>\n<h3 id=\"6、ES5-比-ES3-有哪些新特性？\"><a href=\"#6、ES5-比-ES3-有哪些新特性？\" class=\"headerlink\" title=\"6、ES5 比 ES3 有哪些新特性？\"></a>6、ES5 比 ES3 有哪些新特性？</h3><p>语法上更严格了，定义变量必需使用var，否则报错。<br>对Object的控制更精确了，Object.defineProperty可控制对象的读写枚举等，更加丰富了一个对象。对数组Array和字符串 String也增加了一些方法，等等。</p>\n<h2 id=\"三-、中级工程师\"><a href=\"#三-、中级工程师\" class=\"headerlink\" title=\"三 、中级工程师\"></a>三 、中级工程师</h2><p>中级工程师应该具备：</p>\n<ul>\n<li>深入理解this、闭包、事件模型、原型和原型链、作用域链、继承等概念</li>\n<li>尽量使用ES5编写代码，了解ES6</li>\n<li>熟悉前后端通信方式</li>\n<li>熟悉一些前端技术框架设计思想、优劣势等</li>\n<li>熟悉模块化、面向对象、MVC等编程思想</li>\n<li>能自己独立封装一些组件</li>\n<li>编码时尽量考虑性能优化</li>\n<li>了解常见的http状态码</li>\n<li>了解前端工程化思想</li>\n<li>了解一些最新的技术框架等</li>\n<li>了解函数式编程思想</li>\n</ul>\n<p>举些例子：自找答案</p>\n<ol>\n<li>setTimeout中function里面的this指向什么？</li>\n<li>写一个最常见的闭包问题？</li>\n<li>如何深度克隆一个对象？</li>\n<li>前后端有哪些通信方式？</li>\n<li>jQuery里的ready函数是怎样实现的，和原生的load有什么不同？</li>\n<li>谈谈commonJS和AMD的区别？</li>\n<li>JavaScript是如何实现面向对象的？</li>\n<li>谈一谈JavaScript的性能优化问题？</li>\n<li>bower、grunt、gulp、yeoman、webpack的了解？</li>\n<li>JavaScript的异步编程？</li>\n</ol>\n<h2 id=\"四、高级工程师\"><a href=\"#四、高级工程师\" class=\"headerlink\" title=\"四、高级工程师\"></a>四、高级工程师</h2><p>高级前端工程师应该具备：</p>\n<ul>\n<li>使用前端工程化思维开发</li>\n<li>JavaScript对DOM操作的各种方式与性能开销</li>\n<li>熟悉RESTful架构、跨域等技术</li>\n<li>能对代码进行良好的性能优化</li>\n<li>了解常用框架功能原理的代码实现</li>\n<li>熟悉前端开发的一些安全问题</li>\n<li>熟悉常见跨浏览器问题</li>\n<li>了解必要的计算机网络协议</li>\n<li>熟悉JavaScript的前后端开发</li>\n<li>熟悉各种开发设计模式</li>\n<li>了解前端的一些测试方法</li>\n</ul>\n<p>举些例子：自找答案</p>\n<ol>\n<li>如何解决回调层级过深的问题？</li>\n<li>CORS跨域的原理？</li>\n<li>谈谈各种本地存储方案的优势与弊端？</li>\n<li>JS延迟加载的方式有哪些？</li>\n<li>哪些操作会造成内存泄漏？</li>\n<li>写一个通用的事件侦听器函数？</li>\n<li>介绍一下XSS和CSRF的原理和防范？</li>\n<li>如何实现一个简易个模块管理库？</li>\n<li>介绍for in的技术细节与性能问题？</li>\n<li>jQuery操作DOM细节？</li>\n<li>谈谈JS的满加载和断点续调问题？</li>\n<li>如何实现JS的依赖注入？</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作为一名程序猿、攻城狮，要清楚自己的实力，自己所处的阶段，这样才能更好的扬长补短。常问自己几个问题：我最擅长什么，我比别人有哪些优势？我的短板在哪些方面？我在整个行业所处什么阶段，在这个阶段我该如何提升自己？<br>对于前端工程师等级的划分，每个人都可能有自己的理解，正所谓，一千个读者就有一千个哈姆雷特。下面是我对前端工程师划分的一些拙见。</p>\n</blockquote>\n<h2 id=\"一、入门菜鸟\"><a href=\"#一、入门菜鸟\" class=\"headerlink\" title=\"一、入门菜鸟\"></a>一、入门菜鸟</h2><p>这个阶段一般具备以下几点：</p>\n<ul>\n<li>基础的JavaScript编程能力</li>\n<li>基本能看懂别人写的代码</li>\n<li>有一定的代码调试能力</li>\n</ul>\n<p>举些例子：</p>\n<h3 id=\"1、怎样对字符串进行截取操作，你会想到哪些方法？\"><a href=\"#1、怎样对字符串进行截取操作，你会想到哪些方法？\" class=\"headerlink\" title=\"1、怎样对字符串进行截取操作，你会想到哪些方法？\"></a>1、怎样对字符串进行截取操作，你会想到哪些方法？</h3><p>substr() ,sibString(), split(), slice() …</p>\n<h3 id=\"2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？\"><a href=\"#2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？\" class=\"headerlink\" title=\"2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？\"></a>2、给你一段代码，你能知道这段代码实现了什么功能，别人为什么要这么写？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(url === <span class=\"string\">'http://www.xieliqun.com'</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.location.href = <span class=\"string\">'https://github.com/tsrot'</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.location.href = <span class=\"string\">'/404'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？\"><a href=\"#3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？\" class=\"headerlink\" title=\"3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？\"></a>3、给你一段简单的错误代码，你能知道错在哪里，怎样去改正它？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'hello world!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;foo.length;i++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fooArr = arr.push(foo[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(fooArr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、初级工程师\"><a href=\"#二、初级工程师\" class=\"headerlink\" title=\"二、初级工程师\"></a>二、初级工程师</h2><p>初级工程师应该能够：</p>\n<ul>\n<li>解决一些例如特效方面的问题</li>\n<li>能使用一些框架，例如jQuery、bootstrap等</li>\n<li>能使用ajax进行简单的前后通信</li>\n<li>能DOM编程解决一些问题</li>\n<li>能熟练使用浏览器的调试工具</li>\n<li>了解一些HTML 5 API</li>\n<li>了解ES5 规范</li>\n</ul>\n<p>举些例子：</p>\n<h3 id=\"1、怎样实现一个焦点图的效果？\"><a href=\"#1、怎样实现一个焦点图的效果？\" class=\"headerlink\" title=\"1、怎样实现一个焦点图的效果？\"></a>1、怎样实现一个焦点图的效果？</h3><p>在这个阶段只要能正确解决问题就好了。你可以自己去写代码实现，无论是原生，还是使用jQuery，你也可以百度去网上找一些焦点图的插件，或别人总结的方法。只要能够无错地完成需求，不考虑代码冗余之类的带来的性能问题。</p>\n<h3 id=\"2、使用jQuery完成一个简单的动画？\"><a href=\"#2、使用jQuery完成一个简单的动画？\" class=\"headerlink\" title=\"2、使用jQuery完成一个简单的动画？\"></a>2、使用jQuery完成一个简单的动画？</h3><p>假如完成一个可控制的球在水平面跳动的效果。你应该想怎样触发球，是hover还是click，球怎样跳动起来，是用css样式来控制，还是用jQuery的animate函数来执行动画。</p>\n<h3 id=\"3、怎样使用ajax完成用户名验证？\"><a href=\"#3、怎样使用ajax完成用户名验证？\" class=\"headerlink\" title=\"3、怎样使用ajax完成用户名验证？\"></a>3、怎样使用ajax完成用户名验证？</h3><p>你要完整的说出它的思路，首先用户输入完用户名，失去焦点（blur）后，然后通过ajax POST或者GET把用户名提交到后端，此时后端会给你一个接口，你把用户名传到这个接口，后端应该会返回一个true or false给你，根据返回的结果，作出相应的用户提示。</p>\n<h3 id=\"4、如何动态的插入、删除、替换一个DOM元素？\"><a href=\"#4、如何动态的插入、删除、替换一个DOM元素？\" class=\"headerlink\" title=\"4、如何动态的插入、删除、替换一个DOM元素？\"></a>4、如何动态的插入、删除、替换一个DOM元素？</h3><p>原生方法：appendChild()、removeChild()、innerHTML、replaceChild() …<br>jQuery方法：append()、empty()、html()、remove()、replaceAll() …</p>\n<h3 id=\"5、H5-新增了哪些API？\"><a href=\"#5、H5-新增了哪些API？\" class=\"headerlink\" title=\"5、H5 新增了哪些API？\"></a>5、H5 新增了哪些API？</h3><p>localStorage 、sessionStorage、ApplicationCache、postMessage、file、canvas …</p>\n<h3 id=\"6、ES5-比-ES3-有哪些新特性？\"><a href=\"#6、ES5-比-ES3-有哪些新特性？\" class=\"headerlink\" title=\"6、ES5 比 ES3 有哪些新特性？\"></a>6、ES5 比 ES3 有哪些新特性？</h3><p>语法上更严格了，定义变量必需使用var，否则报错。<br>对Object的控制更精确了，Object.defineProperty可控制对象的读写枚举等，更加丰富了一个对象。对数组Array和字符串 String也增加了一些方法，等等。</p>\n<h2 id=\"三-、中级工程师\"><a href=\"#三-、中级工程师\" class=\"headerlink\" title=\"三 、中级工程师\"></a>三 、中级工程师</h2><p>中级工程师应该具备：</p>\n<ul>\n<li>深入理解this、闭包、事件模型、原型和原型链、作用域链、继承等概念</li>\n<li>尽量使用ES5编写代码，了解ES6</li>\n<li>熟悉前后端通信方式</li>\n<li>熟悉一些前端技术框架设计思想、优劣势等</li>\n<li>熟悉模块化、面向对象、MVC等编程思想</li>\n<li>能自己独立封装一些组件</li>\n<li>编码时尽量考虑性能优化</li>\n<li>了解常见的http状态码</li>\n<li>了解前端工程化思想</li>\n<li>了解一些最新的技术框架等</li>\n<li>了解函数式编程思想</li>\n</ul>\n<p>举些例子：自找答案</p>\n<ol>\n<li>setTimeout中function里面的this指向什么？</li>\n<li>写一个最常见的闭包问题？</li>\n<li>如何深度克隆一个对象？</li>\n<li>前后端有哪些通信方式？</li>\n<li>jQuery里的ready函数是怎样实现的，和原生的load有什么不同？</li>\n<li>谈谈commonJS和AMD的区别？</li>\n<li>JavaScript是如何实现面向对象的？</li>\n<li>谈一谈JavaScript的性能优化问题？</li>\n<li>bower、grunt、gulp、yeoman、webpack的了解？</li>\n<li>JavaScript的异步编程？</li>\n</ol>\n<h2 id=\"四、高级工程师\"><a href=\"#四、高级工程师\" class=\"headerlink\" title=\"四、高级工程师\"></a>四、高级工程师</h2><p>高级前端工程师应该具备：</p>\n<ul>\n<li>使用前端工程化思维开发</li>\n<li>JavaScript对DOM操作的各种方式与性能开销</li>\n<li>熟悉RESTful架构、跨域等技术</li>\n<li>能对代码进行良好的性能优化</li>\n<li>了解常用框架功能原理的代码实现</li>\n<li>熟悉前端开发的一些安全问题</li>\n<li>熟悉常见跨浏览器问题</li>\n<li>了解必要的计算机网络协议</li>\n<li>熟悉JavaScript的前后端开发</li>\n<li>熟悉各种开发设计模式</li>\n<li>了解前端的一些测试方法</li>\n</ul>\n<p>举些例子：自找答案</p>\n<ol>\n<li>如何解决回调层级过深的问题？</li>\n<li>CORS跨域的原理？</li>\n<li>谈谈各种本地存储方案的优势与弊端？</li>\n<li>JS延迟加载的方式有哪些？</li>\n<li>哪些操作会造成内存泄漏？</li>\n<li>写一个通用的事件侦听器函数？</li>\n<li>介绍一下XSS和CSRF的原理和防范？</li>\n<li>如何实现一个简易个模块管理库？</li>\n<li>介绍for in的技术细节与性能问题？</li>\n<li>jQuery操作DOM细节？</li>\n<li>谈谈JS的满加载和断点续调问题？</li>\n<li>如何实现JS的依赖注入？</li>\n</ol>"},{"title":"模仿知乎界面的一个简单React demo","date":"2017-01-05T07:53:29.000Z","_content":"博客地址：http://blog.xieliqun.com/2016/11/04/react-zhihu/\n\n\n\n> 这是一个模仿知乎界面的简单React demo。这个React demo能让你从零开始学习React，并逐渐掌握React。它包括了一个项目从零到项目完成的整个过程。\n\n项目地址：[https://github.com/tsrot/react-zhihu](https://github.com/tsrot/react-zhihu)\n项目预览：[http://blog.xieliqun.com/react-zhihu/](http://blog.xieliqun.com/react-zhihu/)\n\n**项目运行**\n```javascript\n$ git clone https://github.com/tsrot/react-zhihu.git\n$ cd react-zhihu\n\n$ npm install\n\n$ bower install\n\n$ gulp server   //用浏览器打开 localhost:5000\n```\n<!-- more -->\n\n## 搭建开发环境\n\n### 初始化npm bower\n\n```javascript\nnpm init  //一直enter，默认就好\n\nbower init //同上\n\n```\n\n### 安装必要的开发工具包\n\n- gulp ：基于流的自动化构建工具\n- gulp-browserify ：前端模块及依赖管理\n- gulp-concat ：文件合并插件\n- gulp-react ：JSX语法转化工具\n- gulp-connect ：构建本地开发Web服务器\n- lodash ：一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库\n- reactify ：React 编译器\n\n```javascript\nnpm install gulp gulp-browserify gulp-concat gulp-react gulp-connect lodash reactify --save-dev\n```\n\n### 安装生产环境依赖包\n\n- react ：主要框架\n- react-dom ：React的DOM操作类\n- bootstrap ：bootstrap样式\n\n```javascript\nnpm install --save react react-dom\n\nbower install --save bootstrap\n```\n\n### 写入gulp配置文件gulpfile.js\n\n你可以在npm的网站上找到相应插件的gulp配置写法。我配置的[gulpfile.js](https://github.com/tsrot/)\n\n\n## 开发\n\n- 切分相应的模块\n- 分清UI组件和容器组件\n- 学会如何在组件之间通信\n- 注意写作规范和开发细节\n\n## 部署生产\n\n请切换分支到 product 分支\n\n### 修改gulpfile文件\n```javascript\n//添加copy任务\ngulp.task('copy',function(){\n    gulp.src('./app/css/*')\n    .pipe(gulp.dest('./dist/css'));\n\n    gulp.src('./bower_components/**/*')\n    .pipe(gulp.dest('./dist/libs'));\n\n    gulp.src('./*.html')\n    .pipe(gulp.dest('./dist'));\n});\n\n//生产服务器\ngulp.task('connect-pro',function(){\n    connect.server({\n        root:'./dist',\n        port:port,\n        livereload:true,\n    })\n});\n\n//添加build任务\ngulp.task('build',['browserify','copy']);\n\n//添加启动生产服务器任务\ngulp.task('server-pro',['build','connect-pro','watch']);\n```\n\n### 修改index.html引用目录\n```javascript\n<link rel=\"stylesheet\" href=\"./libs/bootstrap/dist/css/bootstrap.css\">\n<link rel=\"stylesheet\" href=\"./css/index.css\">\n\n<script src=\"./js/main.js\"></script>\n```\n\n### 使用gulp-gh-pages部署到github pages\n\n下载gulp-gh-pages插件\n```javascript\nnpm install --save-dev gulp-gh-pages\n```\n在gulpfile文件中添加配置gulp-gh-pages代码\n```javascript\nvar ghPages = require('gulp-gh-pages');\n\ngulp.task('deploy', function() {\n  return gulp.src('./dist/**/*')\n    .pipe(ghPages());\n});\n```\n\n## 后续\n\n将在分支中更新使用下列技术的版本\n- webpack\n- webpack + redux\n- webkack + redux + react-router","source":"_posts/study-notes/模仿知乎界面的一个简单React demo.md","raw":"title: 模仿知乎界面的一个简单React demo\ndate: 2017-1-5 15:53:29\n---\n博客地址：http://blog.xieliqun.com/2016/11/04/react-zhihu/\n\n\n\n> 这是一个模仿知乎界面的简单React demo。这个React demo能让你从零开始学习React，并逐渐掌握React。它包括了一个项目从零到项目完成的整个过程。\n\n项目地址：[https://github.com/tsrot/react-zhihu](https://github.com/tsrot/react-zhihu)\n项目预览：[http://blog.xieliqun.com/react-zhihu/](http://blog.xieliqun.com/react-zhihu/)\n\n**项目运行**\n```javascript\n$ git clone https://github.com/tsrot/react-zhihu.git\n$ cd react-zhihu\n\n$ npm install\n\n$ bower install\n\n$ gulp server   //用浏览器打开 localhost:5000\n```\n<!-- more -->\n\n## 搭建开发环境\n\n### 初始化npm bower\n\n```javascript\nnpm init  //一直enter，默认就好\n\nbower init //同上\n\n```\n\n### 安装必要的开发工具包\n\n- gulp ：基于流的自动化构建工具\n- gulp-browserify ：前端模块及依赖管理\n- gulp-concat ：文件合并插件\n- gulp-react ：JSX语法转化工具\n- gulp-connect ：构建本地开发Web服务器\n- lodash ：一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库\n- reactify ：React 编译器\n\n```javascript\nnpm install gulp gulp-browserify gulp-concat gulp-react gulp-connect lodash reactify --save-dev\n```\n\n### 安装生产环境依赖包\n\n- react ：主要框架\n- react-dom ：React的DOM操作类\n- bootstrap ：bootstrap样式\n\n```javascript\nnpm install --save react react-dom\n\nbower install --save bootstrap\n```\n\n### 写入gulp配置文件gulpfile.js\n\n你可以在npm的网站上找到相应插件的gulp配置写法。我配置的[gulpfile.js](https://github.com/tsrot/)\n\n\n## 开发\n\n- 切分相应的模块\n- 分清UI组件和容器组件\n- 学会如何在组件之间通信\n- 注意写作规范和开发细节\n\n## 部署生产\n\n请切换分支到 product 分支\n\n### 修改gulpfile文件\n```javascript\n//添加copy任务\ngulp.task('copy',function(){\n    gulp.src('./app/css/*')\n    .pipe(gulp.dest('./dist/css'));\n\n    gulp.src('./bower_components/**/*')\n    .pipe(gulp.dest('./dist/libs'));\n\n    gulp.src('./*.html')\n    .pipe(gulp.dest('./dist'));\n});\n\n//生产服务器\ngulp.task('connect-pro',function(){\n    connect.server({\n        root:'./dist',\n        port:port,\n        livereload:true,\n    })\n});\n\n//添加build任务\ngulp.task('build',['browserify','copy']);\n\n//添加启动生产服务器任务\ngulp.task('server-pro',['build','connect-pro','watch']);\n```\n\n### 修改index.html引用目录\n```javascript\n<link rel=\"stylesheet\" href=\"./libs/bootstrap/dist/css/bootstrap.css\">\n<link rel=\"stylesheet\" href=\"./css/index.css\">\n\n<script src=\"./js/main.js\"></script>\n```\n\n### 使用gulp-gh-pages部署到github pages\n\n下载gulp-gh-pages插件\n```javascript\nnpm install --save-dev gulp-gh-pages\n```\n在gulpfile文件中添加配置gulp-gh-pages代码\n```javascript\nvar ghPages = require('gulp-gh-pages');\n\ngulp.task('deploy', function() {\n  return gulp.src('./dist/**/*')\n    .pipe(ghPages());\n});\n```\n\n## 后续\n\n将在分支中更新使用下列技术的版本\n- webpack\n- webpack + redux\n- webkack + redux + react-router","slug":"study-notes/模仿知乎界面的一个简单React demo","published":1,"updated":"2019-05-05T06:49:06.763Z","_id":"cj0dgwc79003u2u6bcmdpc3vm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>博客地址：<a href=\"http://blog.xieliqun.com/2016/11/04/react-zhihu/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/11/04/react-zhihu/</a></p>\n<blockquote>\n<p>这是一个模仿知乎界面的简单React demo。这个React demo能让你从零开始学习React，并逐渐掌握React。它包括了一个项目从零到项目完成的整个过程。</p>\n</blockquote>\n<p>项目地址：<a href=\"https://github.com/tsrot/react-zhihu\" target=\"_blank\" rel=\"noopener\">https://github.com/tsrot/react-zhihu</a><br>项目预览：<a href=\"http://blog.xieliqun.com/react-zhihu/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/react-zhihu/</a></p>\n<p><strong>项目运行</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:<span class=\"comment\">//github.com/tsrot/react-zhihu.git</span></span><br><span class=\"line\">$ cd react-zhihu</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\">$ bower install</span><br><span class=\"line\"></span><br><span class=\"line\">$ gulp server   <span class=\"comment\">//用浏览器打开 localhost:5000</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"搭建开发环境\"><a href=\"#搭建开发环境\" class=\"headerlink\" title=\"搭建开发环境\"></a>搭建开发环境</h2><h3 id=\"初始化npm-bower\"><a href=\"#初始化npm-bower\" class=\"headerlink\" title=\"初始化npm bower\"></a>初始化npm bower</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init  <span class=\"comment\">//一直enter，默认就好</span></span><br><span class=\"line\"></span><br><span class=\"line\">bower init <span class=\"comment\">//同上</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装必要的开发工具包\"><a href=\"#安装必要的开发工具包\" class=\"headerlink\" title=\"安装必要的开发工具包\"></a>安装必要的开发工具包</h3><ul>\n<li>gulp ：基于流的自动化构建工具</li>\n<li>gulp-browserify ：前端模块及依赖管理</li>\n<li>gulp-concat ：文件合并插件</li>\n<li>gulp-react ：JSX语法转化工具</li>\n<li>gulp-connect ：构建本地开发Web服务器</li>\n<li>lodash ：一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库</li>\n<li>reactify ：React 编译器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp gulp-browserify gulp-concat gulp-react gulp-connect lodash reactify --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装生产环境依赖包\"><a href=\"#安装生产环境依赖包\" class=\"headerlink\" title=\"安装生产环境依赖包\"></a>安装生产环境依赖包</h3><ul>\n<li>react ：主要框架</li>\n<li>react-dom ：React的DOM操作类</li>\n<li>bootstrap ：bootstrap样式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br><span class=\"line\"></span><br><span class=\"line\">bower install --save bootstrap</span><br></pre></td></tr></table></figure>\n<h3 id=\"写入gulp配置文件gulpfile-js\"><a href=\"#写入gulp配置文件gulpfile-js\" class=\"headerlink\" title=\"写入gulp配置文件gulpfile.js\"></a>写入gulp配置文件gulpfile.js</h3><p>你可以在npm的网站上找到相应插件的gulp配置写法。我配置的<a href=\"https://github.com/tsrot/\" target=\"_blank\" rel=\"noopener\">gulpfile.js</a></p>\n<h2 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h2><ul>\n<li>切分相应的模块</li>\n<li>分清UI组件和容器组件</li>\n<li>学会如何在组件之间通信</li>\n<li>注意写作规范和开发细节</li>\n</ul>\n<h2 id=\"部署生产\"><a href=\"#部署生产\" class=\"headerlink\" title=\"部署生产\"></a>部署生产</h2><p>请切换分支到 product 分支</p>\n<h3 id=\"修改gulpfile文件\"><a href=\"#修改gulpfile文件\" class=\"headerlink\" title=\"修改gulpfile文件\"></a>修改gulpfile文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加copy任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'copy'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./app/css/*'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/css'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./bower_components/**/*'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/libs'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./*.html'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产服务器</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'connect-pro'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    connect.server(&#123;</span><br><span class=\"line\">        root:<span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">        port:port,</span><br><span class=\"line\">        livereload:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加build任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,[<span class=\"string\">'browserify'</span>,<span class=\"string\">'copy'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加启动生产服务器任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'server-pro'</span>,[<span class=\"string\">'build'</span>,<span class=\"string\">'connect-pro'</span>,<span class=\"string\">'watch'</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改index-html引用目录\"><a href=\"#修改index-html引用目录\" class=\"headerlink\" title=\"修改index.html引用目录\"></a>修改index.html引用目录</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"./libs/bootstrap/dist/css/bootstrap.css\"</span>&gt;</span><br><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"./css/index.css\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"./js/main.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用gulp-gh-pages部署到github-pages\"><a href=\"#使用gulp-gh-pages部署到github-pages\" class=\"headerlink\" title=\"使用gulp-gh-pages部署到github pages\"></a>使用gulp-gh-pages部署到github pages</h3><p>下载gulp-gh-pages插件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev gulp-gh-pages</span><br></pre></td></tr></table></figure></p>\n<p>在gulpfile文件中添加配置gulp-gh-pages代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ghPages = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-gh-pages'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'deploy'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/**/*'</span>)</span><br><span class=\"line\">    .pipe(ghPages());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>将在分支中更新使用下列技术的版本</p>\n<ul>\n<li>webpack</li>\n<li>webpack + redux</li>\n<li>webkack + redux + react-router</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>博客地址：<a href=\"http://blog.xieliqun.com/2016/11/04/react-zhihu/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/11/04/react-zhihu/</a></p>\n<blockquote>\n<p>这是一个模仿知乎界面的简单React demo。这个React demo能让你从零开始学习React，并逐渐掌握React。它包括了一个项目从零到项目完成的整个过程。</p>\n</blockquote>\n<p>项目地址：<a href=\"https://github.com/tsrot/react-zhihu\" target=\"_blank\" rel=\"noopener\">https://github.com/tsrot/react-zhihu</a><br>项目预览：<a href=\"http://blog.xieliqun.com/react-zhihu/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/react-zhihu/</a></p>\n<p><strong>项目运行</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:<span class=\"comment\">//github.com/tsrot/react-zhihu.git</span></span><br><span class=\"line\">$ cd react-zhihu</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\">$ bower install</span><br><span class=\"line\"></span><br><span class=\"line\">$ gulp server   <span class=\"comment\">//用浏览器打开 localhost:5000</span></span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"搭建开发环境\"><a href=\"#搭建开发环境\" class=\"headerlink\" title=\"搭建开发环境\"></a>搭建开发环境</h2><h3 id=\"初始化npm-bower\"><a href=\"#初始化npm-bower\" class=\"headerlink\" title=\"初始化npm bower\"></a>初始化npm bower</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init  <span class=\"comment\">//一直enter，默认就好</span></span><br><span class=\"line\"></span><br><span class=\"line\">bower init <span class=\"comment\">//同上</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装必要的开发工具包\"><a href=\"#安装必要的开发工具包\" class=\"headerlink\" title=\"安装必要的开发工具包\"></a>安装必要的开发工具包</h3><ul>\n<li>gulp ：基于流的自动化构建工具</li>\n<li>gulp-browserify ：前端模块及依赖管理</li>\n<li>gulp-concat ：文件合并插件</li>\n<li>gulp-react ：JSX语法转化工具</li>\n<li>gulp-connect ：构建本地开发Web服务器</li>\n<li>lodash ：一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库</li>\n<li>reactify ：React 编译器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp gulp-browserify gulp-concat gulp-react gulp-connect lodash reactify --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装生产环境依赖包\"><a href=\"#安装生产环境依赖包\" class=\"headerlink\" title=\"安装生产环境依赖包\"></a>安装生产环境依赖包</h3><ul>\n<li>react ：主要框架</li>\n<li>react-dom ：React的DOM操作类</li>\n<li>bootstrap ：bootstrap样式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br><span class=\"line\"></span><br><span class=\"line\">bower install --save bootstrap</span><br></pre></td></tr></table></figure>\n<h3 id=\"写入gulp配置文件gulpfile-js\"><a href=\"#写入gulp配置文件gulpfile-js\" class=\"headerlink\" title=\"写入gulp配置文件gulpfile.js\"></a>写入gulp配置文件gulpfile.js</h3><p>你可以在npm的网站上找到相应插件的gulp配置写法。我配置的<a href=\"https://github.com/tsrot/\" target=\"_blank\" rel=\"noopener\">gulpfile.js</a></p>\n<h2 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h2><ul>\n<li>切分相应的模块</li>\n<li>分清UI组件和容器组件</li>\n<li>学会如何在组件之间通信</li>\n<li>注意写作规范和开发细节</li>\n</ul>\n<h2 id=\"部署生产\"><a href=\"#部署生产\" class=\"headerlink\" title=\"部署生产\"></a>部署生产</h2><p>请切换分支到 product 分支</p>\n<h3 id=\"修改gulpfile文件\"><a href=\"#修改gulpfile文件\" class=\"headerlink\" title=\"修改gulpfile文件\"></a>修改gulpfile文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加copy任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'copy'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./app/css/*'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/css'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./bower_components/**/*'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/libs'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./*.html'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产服务器</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'connect-pro'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    connect.server(&#123;</span><br><span class=\"line\">        root:<span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">        port:port,</span><br><span class=\"line\">        livereload:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加build任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,[<span class=\"string\">'browserify'</span>,<span class=\"string\">'copy'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加启动生产服务器任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'server-pro'</span>,[<span class=\"string\">'build'</span>,<span class=\"string\">'connect-pro'</span>,<span class=\"string\">'watch'</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改index-html引用目录\"><a href=\"#修改index-html引用目录\" class=\"headerlink\" title=\"修改index.html引用目录\"></a>修改index.html引用目录</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"./libs/bootstrap/dist/css/bootstrap.css\"</span>&gt;</span><br><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"./css/index.css\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"./js/main.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用gulp-gh-pages部署到github-pages\"><a href=\"#使用gulp-gh-pages部署到github-pages\" class=\"headerlink\" title=\"使用gulp-gh-pages部署到github pages\"></a>使用gulp-gh-pages部署到github pages</h3><p>下载gulp-gh-pages插件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev gulp-gh-pages</span><br></pre></td></tr></table></figure></p>\n<p>在gulpfile文件中添加配置gulp-gh-pages代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ghPages = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-gh-pages'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'deploy'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/**/*'</span>)</span><br><span class=\"line\">    .pipe(ghPages());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>将在分支中更新使用下列技术的版本</p>\n<ul>\n<li>webpack</li>\n<li>webpack + redux</li>\n<li>webkack + redux + react-router</li>\n</ul>"},{"title":"深入了解JavaScript，从作用域链开始（1）","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/10/05/scope-chain/\n\n> 作用域是每种计算机语言最重要的基础之一，当然它也是JavaScript最重要的概念之一。要想真正的深入了解JavaScript，了解JavaScript的作用域链非常必要。现在让我们深入了解JavaScript作用域和作用域链的工作原理。\n\n\n----------\n\n### JavaScript的作用域是什么\n\n作用域，在维基百科上解释是：在电脑程序设计中，作用域（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。\n简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种，局部作用域又称为函数作用域。\n\n#### 全局作用域\n\n在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：\n<!-- more -->\n##### （1）程序最外层定义的函数或者变量\n```javascript\nvar a = \"tsrot\";\nfunction hello(){\n\talert(a);\n}\n\nfunction sayHello(){\n\thello();\n}\n\nalert(a);     //能访问到tsrot\nhello();      //能访问到tsrot\nsayHello();   //能访问到hello函数，然后也能访问到tsrot\n```\n\n##### （2）所有末定义直接赋值的变量（不推荐）\n```javascript\nfunction hello(){\n\ta = \"tsrot\";\n\tvar b = \"hello tsrot\";\n}\n\nalert(a);  //能访问到tsrot\nalert(b);  //error 不能访问\n```\n\n##### （3）所有window对象的属性和方法\n一般情况下，window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等等。\n\n\n#### 局部作用域（函数作用域）\n\n局部作用域在函数内创建，在函数内可访问，函数外不可访问。\n```javascript\nfunction hello(){\n\tvar a = \"tsrot\";\n\talert(a);\n}\n\nhello(); //函数内可访问到tsrot\nalert(a); //error not defined\n```\n\n### 作用域链是什么\n\n了解作用域链之前我们要知道一下几个概念：\n- 变量和函数的声明\n- 函数的生命周期\n- Activetion Object（AO）、Variable Object（VO）\n\n\n#### 变量和函数的声明\n\n在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进行预解析，然后再去执行其他代码。\n\n变量声明：变量的声明只有一种方式，那就是用`var`关键字声明，直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）。它们有一下区别：\n（1）因为它只是一种赋值，所以不会声明提前\n```javascript\nalert(a); // undefined\nalert(b); // error \"b\" is not defined\nb = 10;\nvar a = 20;\n```\n（2）直接赋值形式是在执行阶段创建\n```javascript\nalert(a); // undefined, 这个大家都知道\nb = 10;\nalert(b); // 10, 代码执行阶段创建\n \nvar a = 20;\nalert(a); // 20, 代码执行阶段修改\n```\n（3）变量不能删除（delete），属性可以删除\n```javascript\na = 10;\nalert(window.a); // 10\n \nalert(delete a); // true\n \nalert(window.a); // undefined\n \nvar b = 20;\nalert(window.b); // 20\n \nalert(delete b); // false\n \nalert(window.b); // 仍然为 20，因为变量是不能够删除的。\n```\n但是，这里有一个意外情况，就是在“eval”的上下文中，变量是可以删除的：\n```javascript\neval('var a = 10;');\nalert(window.a); // 10\n \nalert(delete a); // true\n \nalert(window.a); // undefined\n```\n有些debug工具也是可以删除的，因为它们使用了 eval()方法来执行代码的。\n\n函数声明：函数的声明有三种方式\n（1）function name( ){ }直接创建方式\n```javascript\nfunction add(a,b){\n\treturn a+b;\n}\n\nadd(5,4);\n```\n（2）new Funtion构建函数创建\n```javascript\nvar add=new Function(\"a\", \"b\", \"return a+b;\");\n\nadd(4,5);\n```\n（3）给变量赋值匿名函数方法创建\n```javascript\nvar add = function(a,b){\n\treturn a+b;\n}\n\nadd(4,5);\n```\n后面两种方法，在声明前访问时，返回的都是一个undefined的变量。当然，在声明后访问它们都是一个function的函数。\n\n**注意**：如果变量名和函数名声明时相同，函数优先声明。\n```javascript\nalert(x); // function\n\nvar x = 10;\nalert(x); // 10\n \nx = 20;\n\nfunction x() {};\n \nalert(x); // 20\n```\n\n#### 函数的生命周期\n\n函数的的生命周期分为创建和执行两个阶段。\n\n在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。\n\n在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。\n\n#### 什么是AO、VO\n\n英文解释：\nAO：Activetion Object（活动对象）\nVO：Variable Object（变量对象）\n\nVO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：\n- 变量 (var, 变量声明);\n- 函数声明 (FunctionDeclaration, 缩写为FD);\n- 函数的形参\n\n举个例子：\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\tfunction say(){\n\t\talert(sum);\n\t}\n\treturn sum;\n}\n// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined\n```\n\n\nAO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了：\n- 函数的所有局部变量\n- 函数的所有命名参数\n- 函数的参数集合\n- 函数的this指向\n\n举个例子：\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\tfunction say(){\n\t\talert(sum);\n\t}\n\treturn sum;\n}\n\nadd(4,5);\n//  我用JS对象来表示AO\n//  AO = {\n//\t    this : window,\n//\t    arguments : [4,5],\n//\t    a : 4,\n//\t    b : 5,\n//\t    say : <reference to function>,\n//\t    sum : undefined\n//  }\n```\n\n#### JavaScript作用域链\n\n现在我们回到主题，作用域链。\n\n当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\treturn sum;\n}\n```\n假设函数是在全局作用域中创建的，在函数a创建的时候，它的作用域链填入全局对象,全局对象中有所有全局变量，此时的全局变量就是VO。此时的作用域链就是：\n\n```flow\n此时作用域链（Scope Chain）只有一级,就为Global Object\n\n\tscope(add) -> Global Object(VO)\n\t\n\tVO = {\n\t\tthis : window,\n\t\tadd : <reference to function>\n\t}\n```\n\n如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。\n```javascript\nadd(4,5);\n```\n例如，调用add后的作用域链是：\n\n```flow\n此时作用域链（Scope Chain）有两级，第一级为AO，然后Global Object（VO）\n\n\tscope(add) -> AO -> VO\n\n\tAO = {\n\t\tthis : window,\n\t\targuments : [4,5],\n\t\ta : 4,\n\t\tb : 5,\n\t\tsum : undefined\n\t}\n\t\n\tVO = {\n\t\tthis : window,\n\t\tadd : <reference to function>\n\t}\n```\n在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。\n\n看过上面的内容后，可能还有人不懂，我再通熟易懂的解释一遍，先举个例子：\n```javascript\nvar x = 10;\n \nfunction foo() {\n    var y = 20;\n \n    function bar() {\n        var z = 30;\n \n        console.log(x + y + z);\n    };\n \n    bar()\n};\n \nfoo();\n```\n上面代码的输出结果为”60″，函数bar可以直接访问”z”，然后通过作用域链访问上层的”x”和”y”。此时的作用域链为：\n```flow\n此时作用域链（Scope Chain）有三级，第一级为bar AO，第二级为foo AO,然后Global Object（VO）\n\n\tscope -> bar.AO -> foo.AO -> Global Object\n\n\tbar.AO = {\n\t\tz : 30,\n\t\t__parent__ : foo.AO\n\t}\n\n\tfoo.AO = {\n\t\ty : 20,\n\t\tbar : <reference to function>,\n\t\t__parent__ : <Global Object>\n\t}\n\t\n\tGlobal Object = {\n\t\tx : 10,\n\t\tfoo : <reference to function>,\n\t\t__parent__ : null\n\t}\n```\n\n未完待续。。。","source":"_posts/study-notes/深入了解JavaScript，从作用域链开始（1）.md","raw":"title: 深入了解JavaScript，从作用域链开始（1）\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/10/05/scope-chain/\n\n> 作用域是每种计算机语言最重要的基础之一，当然它也是JavaScript最重要的概念之一。要想真正的深入了解JavaScript，了解JavaScript的作用域链非常必要。现在让我们深入了解JavaScript作用域和作用域链的工作原理。\n\n\n----------\n\n### JavaScript的作用域是什么\n\n作用域，在维基百科上解释是：在电脑程序设计中，作用域（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。\n简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种，局部作用域又称为函数作用域。\n\n#### 全局作用域\n\n在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：\n<!-- more -->\n##### （1）程序最外层定义的函数或者变量\n```javascript\nvar a = \"tsrot\";\nfunction hello(){\n\talert(a);\n}\n\nfunction sayHello(){\n\thello();\n}\n\nalert(a);     //能访问到tsrot\nhello();      //能访问到tsrot\nsayHello();   //能访问到hello函数，然后也能访问到tsrot\n```\n\n##### （2）所有末定义直接赋值的变量（不推荐）\n```javascript\nfunction hello(){\n\ta = \"tsrot\";\n\tvar b = \"hello tsrot\";\n}\n\nalert(a);  //能访问到tsrot\nalert(b);  //error 不能访问\n```\n\n##### （3）所有window对象的属性和方法\n一般情况下，window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等等。\n\n\n#### 局部作用域（函数作用域）\n\n局部作用域在函数内创建，在函数内可访问，函数外不可访问。\n```javascript\nfunction hello(){\n\tvar a = \"tsrot\";\n\talert(a);\n}\n\nhello(); //函数内可访问到tsrot\nalert(a); //error not defined\n```\n\n### 作用域链是什么\n\n了解作用域链之前我们要知道一下几个概念：\n- 变量和函数的声明\n- 函数的生命周期\n- Activetion Object（AO）、Variable Object（VO）\n\n\n#### 变量和函数的声明\n\n在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进行预解析，然后再去执行其他代码。\n\n变量声明：变量的声明只有一种方式，那就是用`var`关键字声明，直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）。它们有一下区别：\n（1）因为它只是一种赋值，所以不会声明提前\n```javascript\nalert(a); // undefined\nalert(b); // error \"b\" is not defined\nb = 10;\nvar a = 20;\n```\n（2）直接赋值形式是在执行阶段创建\n```javascript\nalert(a); // undefined, 这个大家都知道\nb = 10;\nalert(b); // 10, 代码执行阶段创建\n \nvar a = 20;\nalert(a); // 20, 代码执行阶段修改\n```\n（3）变量不能删除（delete），属性可以删除\n```javascript\na = 10;\nalert(window.a); // 10\n \nalert(delete a); // true\n \nalert(window.a); // undefined\n \nvar b = 20;\nalert(window.b); // 20\n \nalert(delete b); // false\n \nalert(window.b); // 仍然为 20，因为变量是不能够删除的。\n```\n但是，这里有一个意外情况，就是在“eval”的上下文中，变量是可以删除的：\n```javascript\neval('var a = 10;');\nalert(window.a); // 10\n \nalert(delete a); // true\n \nalert(window.a); // undefined\n```\n有些debug工具也是可以删除的，因为它们使用了 eval()方法来执行代码的。\n\n函数声明：函数的声明有三种方式\n（1）function name( ){ }直接创建方式\n```javascript\nfunction add(a,b){\n\treturn a+b;\n}\n\nadd(5,4);\n```\n（2）new Funtion构建函数创建\n```javascript\nvar add=new Function(\"a\", \"b\", \"return a+b;\");\n\nadd(4,5);\n```\n（3）给变量赋值匿名函数方法创建\n```javascript\nvar add = function(a,b){\n\treturn a+b;\n}\n\nadd(4,5);\n```\n后面两种方法，在声明前访问时，返回的都是一个undefined的变量。当然，在声明后访问它们都是一个function的函数。\n\n**注意**：如果变量名和函数名声明时相同，函数优先声明。\n```javascript\nalert(x); // function\n\nvar x = 10;\nalert(x); // 10\n \nx = 20;\n\nfunction x() {};\n \nalert(x); // 20\n```\n\n#### 函数的生命周期\n\n函数的的生命周期分为创建和执行两个阶段。\n\n在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。\n\n在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。\n\n#### 什么是AO、VO\n\n英文解释：\nAO：Activetion Object（活动对象）\nVO：Variable Object（变量对象）\n\nVO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：\n- 变量 (var, 变量声明);\n- 函数声明 (FunctionDeclaration, 缩写为FD);\n- 函数的形参\n\n举个例子：\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\tfunction say(){\n\t\talert(sum);\n\t}\n\treturn sum;\n}\n// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined\n```\n\n\nAO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了：\n- 函数的所有局部变量\n- 函数的所有命名参数\n- 函数的参数集合\n- 函数的this指向\n\n举个例子：\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\tfunction say(){\n\t\talert(sum);\n\t}\n\treturn sum;\n}\n\nadd(4,5);\n//  我用JS对象来表示AO\n//  AO = {\n//\t    this : window,\n//\t    arguments : [4,5],\n//\t    a : 4,\n//\t    b : 5,\n//\t    say : <reference to function>,\n//\t    sum : undefined\n//  }\n```\n\n#### JavaScript作用域链\n\n现在我们回到主题，作用域链。\n\n当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\treturn sum;\n}\n```\n假设函数是在全局作用域中创建的，在函数a创建的时候，它的作用域链填入全局对象,全局对象中有所有全局变量，此时的全局变量就是VO。此时的作用域链就是：\n\n```flow\n此时作用域链（Scope Chain）只有一级,就为Global Object\n\n\tscope(add) -> Global Object(VO)\n\t\n\tVO = {\n\t\tthis : window,\n\t\tadd : <reference to function>\n\t}\n```\n\n如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。\n```javascript\nadd(4,5);\n```\n例如，调用add后的作用域链是：\n\n```flow\n此时作用域链（Scope Chain）有两级，第一级为AO，然后Global Object（VO）\n\n\tscope(add) -> AO -> VO\n\n\tAO = {\n\t\tthis : window,\n\t\targuments : [4,5],\n\t\ta : 4,\n\t\tb : 5,\n\t\tsum : undefined\n\t}\n\t\n\tVO = {\n\t\tthis : window,\n\t\tadd : <reference to function>\n\t}\n```\n在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。\n\n看过上面的内容后，可能还有人不懂，我再通熟易懂的解释一遍，先举个例子：\n```javascript\nvar x = 10;\n \nfunction foo() {\n    var y = 20;\n \n    function bar() {\n        var z = 30;\n \n        console.log(x + y + z);\n    };\n \n    bar()\n};\n \nfoo();\n```\n上面代码的输出结果为”60″，函数bar可以直接访问”z”，然后通过作用域链访问上层的”x”和”y”。此时的作用域链为：\n```flow\n此时作用域链（Scope Chain）有三级，第一级为bar AO，第二级为foo AO,然后Global Object（VO）\n\n\tscope -> bar.AO -> foo.AO -> Global Object\n\n\tbar.AO = {\n\t\tz : 30,\n\t\t__parent__ : foo.AO\n\t}\n\n\tfoo.AO = {\n\t\ty : 20,\n\t\tbar : <reference to function>,\n\t\t__parent__ : <Global Object>\n\t}\n\t\n\tGlobal Object = {\n\t\tx : 10,\n\t\tfoo : <reference to function>,\n\t\t__parent__ : null\n\t}\n```\n\n未完待续。。。","slug":"study-notes/深入了解JavaScript，从作用域链开始（1）","published":1,"updated":"2019-05-05T06:49:14.395Z","_id":"cj0dgwc7a003v2u6bv9xzh72q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/10/05/scope-chain/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/10/05/scope-chain/</a></p>\n<blockquote>\n<p>作用域是每种计算机语言最重要的基础之一，当然它也是JavaScript最重要的概念之一。要想真正的深入了解JavaScript，了解JavaScript的作用域链非常必要。现在让我们深入了解JavaScript作用域和作用域链的工作原理。</p>\n</blockquote>\n<hr>\n<h3 id=\"JavaScript的作用域是什么\"><a href=\"#JavaScript的作用域是什么\" class=\"headerlink\" title=\"JavaScript的作用域是什么\"></a>JavaScript的作用域是什么</h3><p>作用域，在维基百科上解释是：在电脑程序设计中，作用域（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。<br>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种，局部作用域又称为函数作用域。</p>\n<h4 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h4><p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：<br><a id=\"more\"></a></p>\n<h5 id=\"（1）程序最外层定义的函数或者变量\"><a href=\"#（1）程序最外层定义的函数或者变量\" class=\"headerlink\" title=\"（1）程序最外层定义的函数或者变量\"></a>（1）程序最外层定义的函数或者变量</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\thello();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(a);     <span class=\"comment\">//能访问到tsrot</span></span><br><span class=\"line\">hello();      <span class=\"comment\">//能访问到tsrot</span></span><br><span class=\"line\">sayHello();   <span class=\"comment\">//能访问到hello函数，然后也能访问到tsrot</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"（2）所有末定义直接赋值的变量（不推荐）\"><a href=\"#（2）所有末定义直接赋值的变量（不推荐）\" class=\"headerlink\" title=\"（2）所有末定义直接赋值的变量（不推荐）\"></a>（2）所有末定义直接赋值的变量（不推荐）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\ta = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"string\">\"hello tsrot\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(a);  <span class=\"comment\">//能访问到tsrot</span></span><br><span class=\"line\">alert(b);  <span class=\"comment\">//error 不能访问</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"（3）所有window对象的属性和方法\"><a href=\"#（3）所有window对象的属性和方法\" class=\"headerlink\" title=\"（3）所有window对象的属性和方法\"></a>（3）所有window对象的属性和方法</h5><p>一般情况下，window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等等。</p>\n<h4 id=\"局部作用域（函数作用域）\"><a href=\"#局部作用域（函数作用域）\" class=\"headerlink\" title=\"局部作用域（函数作用域）\"></a>局部作用域（函数作用域）</h4><p>局部作用域在函数内创建，在函数内可访问，函数外不可访问。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">\talert(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hello(); <span class=\"comment\">//函数内可访问到tsrot</span></span><br><span class=\"line\">alert(a); <span class=\"comment\">//error not defined</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"作用域链是什么\"><a href=\"#作用域链是什么\" class=\"headerlink\" title=\"作用域链是什么\"></a>作用域链是什么</h3><p>了解作用域链之前我们要知道一下几个概念：</p>\n<ul>\n<li>变量和函数的声明</li>\n<li>函数的生命周期</li>\n<li>Activetion Object（AO）、Variable Object（VO）</li>\n</ul>\n<h4 id=\"变量和函数的声明\"><a href=\"#变量和函数的声明\" class=\"headerlink\" title=\"变量和函数的声明\"></a>变量和函数的声明</h4><p>在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进行预解析，然后再去执行其他代码。</p>\n<p>变量声明：变量的声明只有一种方式，那就是用<code>var</code>关键字声明，直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）。它们有一下区别：<br>（1）因为它只是一种赋值，所以不会声明提前<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">alert(b); <span class=\"comment\">// error \"b\" is not defined</span></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure></p>\n<p>（2）直接赋值形式是在执行阶段创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a); <span class=\"comment\">// undefined, 这个大家都知道</span></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(b); <span class=\"comment\">// 10, 代码执行阶段创建</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 20, 代码执行阶段修改</span></span><br></pre></td></tr></table></figure></p>\n<p>（3）变量不能删除（delete），属性可以删除<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"keyword\">delete</span> a); <span class=\"comment\">// true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// 20</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"keyword\">delete</span> b); <span class=\"comment\">// false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// 仍然为 20，因为变量是不能够删除的。</span></span><br></pre></td></tr></table></figure></p>\n<p>但是，这里有一个意外情况，就是在“eval”的上下文中，变量是可以删除的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'var a = 10;'</span>);</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"keyword\">delete</span> a); <span class=\"comment\">// true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>有些debug工具也是可以删除的，因为它们使用了 eval()方法来执行代码的。</p>\n<p>函数声明：函数的声明有三种方式<br>（1）function name( ){ }直接创建方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure></p>\n<p>（2）new Funtion构建函数创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add=<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"return a+b;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>（3）给变量赋值匿名函数方法创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>后面两种方法，在声明前访问时，返回的都是一个undefined的变量。当然，在声明后访问它们都是一个function的函数。</p>\n<p><strong>注意</strong>：如果变量名和函数名声明时相同，函数优先声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(x); <span class=\"comment\">// function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(x); <span class=\"comment\">// 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\">x = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">alert(x); <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数的生命周期\"><a href=\"#函数的生命周期\" class=\"headerlink\" title=\"函数的生命周期\"></a>函数的生命周期</h4><p>函数的的生命周期分为创建和执行两个阶段。</p>\n<p>在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。</p>\n<p>在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。</p>\n<h4 id=\"什么是AO、VO\"><a href=\"#什么是AO、VO\" class=\"headerlink\" title=\"什么是AO、VO\"></a>什么是AO、VO</h4><p>英文解释：<br>AO：Activetion Object（活动对象）<br>VO：Variable Object（变量对象）</p>\n<p>VO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：</p>\n<ul>\n<li>变量 (var, 变量声明);</li>\n<li>函数声明 (FunctionDeclaration, 缩写为FD);</li>\n<li>函数的形参</li>\n</ul>\n<p>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>AO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了：</p>\n<ul>\n<li>函数的所有局部变量</li>\n<li>函数的所有命名参数</li>\n<li>函数的参数集合</li>\n<li>函数的this指向</li>\n</ul>\n<p>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//  我用JS对象来表示AO</span></span><br><span class=\"line\"><span class=\"comment\">//  AO = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t    this : window,</span></span><br><span class=\"line\"><span class=\"comment\">//\t    arguments : [4,5],</span></span><br><span class=\"line\"><span class=\"comment\">//\t    a : 4,</span></span><br><span class=\"line\"><span class=\"comment\">//\t    b : 5,</span></span><br><span class=\"line\"><span class=\"comment\">//\t    say : &lt;reference to function&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">//\t    sum : undefined</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"JavaScript作用域链\"><a href=\"#JavaScript作用域链\" class=\"headerlink\" title=\"JavaScript作用域链\"></a>JavaScript作用域链</h4><p>现在我们回到主题，作用域链。</p>\n<p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>假设函数是在全局作用域中创建的，在函数a创建的时候，它的作用域链填入全局对象,全局对象中有所有全局变量，此时的全局变量就是VO。此时的作用域链就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时作用域链（Scope Chain）只有一级,就为Global Object</span><br><span class=\"line\"></span><br><span class=\"line\">\tscope(add) -&gt; Global Object(VO)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tVO = &#123;</span><br><span class=\"line\">\t\tthis : window,</span><br><span class=\"line\">\t\tadd : &lt;reference to function&gt;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>例如，调用add后的作用域链是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时作用域链（Scope Chain）有两级，第一级为AO，然后Global Object（VO）</span><br><span class=\"line\"></span><br><span class=\"line\">\tscope(add) -&gt; AO -&gt; VO</span><br><span class=\"line\"></span><br><span class=\"line\">\tAO = &#123;</span><br><span class=\"line\">\t\tthis : window,</span><br><span class=\"line\">\t\targuments : [4,5],</span><br><span class=\"line\">\t\ta : 4,</span><br><span class=\"line\">\t\tb : 5,</span><br><span class=\"line\">\t\tsum : undefined</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tVO = &#123;</span><br><span class=\"line\">\t\tthis : window,</span><br><span class=\"line\">\t\tadd : &lt;reference to function&gt;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。</p>\n<p>看过上面的内容后，可能还有人不懂，我再通熟易懂的解释一遍，先举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> z = <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x + y + z);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    bar()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的输出结果为”60″，函数bar可以直接访问”z”，然后通过作用域链访问上层的”x”和”y”。此时的作用域链为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时作用域链（Scope Chain）有三级，第一级为bar AO，第二级为foo AO,然后Global Object（VO）</span><br><span class=\"line\"></span><br><span class=\"line\">\tscope -&gt; bar.AO -&gt; foo.AO -&gt; Global Object</span><br><span class=\"line\"></span><br><span class=\"line\">\tbar.AO = &#123;</span><br><span class=\"line\">\t\tz : 30,</span><br><span class=\"line\">\t\t__parent__ : foo.AO</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfoo.AO = &#123;</span><br><span class=\"line\">\t\ty : 20,</span><br><span class=\"line\">\t\tbar : &lt;reference to function&gt;,</span><br><span class=\"line\">\t\t__parent__ : &lt;Global Object&gt;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tGlobal Object = &#123;</span><br><span class=\"line\">\t\tx : 10,</span><br><span class=\"line\">\t\tfoo : &lt;reference to function&gt;,</span><br><span class=\"line\">\t\t__parent__ : null</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>未完待续。。。</p>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/10/05/scope-chain/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/10/05/scope-chain/</a></p>\n<blockquote>\n<p>作用域是每种计算机语言最重要的基础之一，当然它也是JavaScript最重要的概念之一。要想真正的深入了解JavaScript，了解JavaScript的作用域链非常必要。现在让我们深入了解JavaScript作用域和作用域链的工作原理。</p>\n</blockquote>\n<hr>\n<h3 id=\"JavaScript的作用域是什么\"><a href=\"#JavaScript的作用域是什么\" class=\"headerlink\" title=\"JavaScript的作用域是什么\"></a>JavaScript的作用域是什么</h3><p>作用域，在维基百科上解释是：在电脑程序设计中，作用域（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。<br>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种，局部作用域又称为函数作用域。</p>\n<h4 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h4><p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：<br>","more":"</p>\n<h5 id=\"（1）程序最外层定义的函数或者变量\"><a href=\"#（1）程序最外层定义的函数或者变量\" class=\"headerlink\" title=\"（1）程序最外层定义的函数或者变量\"></a>（1）程序最外层定义的函数或者变量</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\thello();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(a);     <span class=\"comment\">//能访问到tsrot</span></span><br><span class=\"line\">hello();      <span class=\"comment\">//能访问到tsrot</span></span><br><span class=\"line\">sayHello();   <span class=\"comment\">//能访问到hello函数，然后也能访问到tsrot</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"（2）所有末定义直接赋值的变量（不推荐）\"><a href=\"#（2）所有末定义直接赋值的变量（不推荐）\" class=\"headerlink\" title=\"（2）所有末定义直接赋值的变量（不推荐）\"></a>（2）所有末定义直接赋值的变量（不推荐）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\ta = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"string\">\"hello tsrot\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(a);  <span class=\"comment\">//能访问到tsrot</span></span><br><span class=\"line\">alert(b);  <span class=\"comment\">//error 不能访问</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"（3）所有window对象的属性和方法\"><a href=\"#（3）所有window对象的属性和方法\" class=\"headerlink\" title=\"（3）所有window对象的属性和方法\"></a>（3）所有window对象的属性和方法</h5><p>一般情况下，window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等等。</p>\n<h4 id=\"局部作用域（函数作用域）\"><a href=\"#局部作用域（函数作用域）\" class=\"headerlink\" title=\"局部作用域（函数作用域）\"></a>局部作用域（函数作用域）</h4><p>局部作用域在函数内创建，在函数内可访问，函数外不可访问。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"string\">\"tsrot\"</span>;</span><br><span class=\"line\">\talert(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hello(); <span class=\"comment\">//函数内可访问到tsrot</span></span><br><span class=\"line\">alert(a); <span class=\"comment\">//error not defined</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"作用域链是什么\"><a href=\"#作用域链是什么\" class=\"headerlink\" title=\"作用域链是什么\"></a>作用域链是什么</h3><p>了解作用域链之前我们要知道一下几个概念：</p>\n<ul>\n<li>变量和函数的声明</li>\n<li>函数的生命周期</li>\n<li>Activetion Object（AO）、Variable Object（VO）</li>\n</ul>\n<h4 id=\"变量和函数的声明\"><a href=\"#变量和函数的声明\" class=\"headerlink\" title=\"变量和函数的声明\"></a>变量和函数的声明</h4><p>在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进行预解析，然后再去执行其他代码。</p>\n<p>变量声明：变量的声明只有一种方式，那就是用<code>var</code>关键字声明，直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）。它们有一下区别：<br>（1）因为它只是一种赋值，所以不会声明提前<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">alert(b); <span class=\"comment\">// error \"b\" is not defined</span></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure></p>\n<p>（2）直接赋值形式是在执行阶段创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a); <span class=\"comment\">// undefined, 这个大家都知道</span></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(b); <span class=\"comment\">// 10, 代码执行阶段创建</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 20, 代码执行阶段修改</span></span><br></pre></td></tr></table></figure></p>\n<p>（3）变量不能删除（delete），属性可以删除<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"keyword\">delete</span> a); <span class=\"comment\">// true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// 20</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"keyword\">delete</span> b); <span class=\"comment\">// false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// 仍然为 20，因为变量是不能够删除的。</span></span><br></pre></td></tr></table></figure></p>\n<p>但是，这里有一个意外情况，就是在“eval”的上下文中，变量是可以删除的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'var a = 10;'</span>);</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"keyword\">delete</span> a); <span class=\"comment\">// true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>有些debug工具也是可以删除的，因为它们使用了 eval()方法来执行代码的。</p>\n<p>函数声明：函数的声明有三种方式<br>（1）function name( ){ }直接创建方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure></p>\n<p>（2）new Funtion构建函数创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add=<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"return a+b;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>（3）给变量赋值匿名函数方法创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>后面两种方法，在声明前访问时，返回的都是一个undefined的变量。当然，在声明后访问它们都是一个function的函数。</p>\n<p><strong>注意</strong>：如果变量名和函数名声明时相同，函数优先声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(x); <span class=\"comment\">// function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(x); <span class=\"comment\">// 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\">x = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">alert(x); <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数的生命周期\"><a href=\"#函数的生命周期\" class=\"headerlink\" title=\"函数的生命周期\"></a>函数的生命周期</h4><p>函数的的生命周期分为创建和执行两个阶段。</p>\n<p>在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。</p>\n<p>在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。</p>\n<h4 id=\"什么是AO、VO\"><a href=\"#什么是AO、VO\" class=\"headerlink\" title=\"什么是AO、VO\"></a>什么是AO、VO</h4><p>英文解释：<br>AO：Activetion Object（活动对象）<br>VO：Variable Object（变量对象）</p>\n<p>VO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：</p>\n<ul>\n<li>变量 (var, 变量声明);</li>\n<li>函数声明 (FunctionDeclaration, 缩写为FD);</li>\n<li>函数的形参</li>\n</ul>\n<p>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>AO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了：</p>\n<ul>\n<li>函数的所有局部变量</li>\n<li>函数的所有命名参数</li>\n<li>函数的参数集合</li>\n<li>函数的this指向</li>\n</ul>\n<p>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//  我用JS对象来表示AO</span></span><br><span class=\"line\"><span class=\"comment\">//  AO = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t    this : window,</span></span><br><span class=\"line\"><span class=\"comment\">//\t    arguments : [4,5],</span></span><br><span class=\"line\"><span class=\"comment\">//\t    a : 4,</span></span><br><span class=\"line\"><span class=\"comment\">//\t    b : 5,</span></span><br><span class=\"line\"><span class=\"comment\">//\t    say : &lt;reference to function&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">//\t    sum : undefined</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"JavaScript作用域链\"><a href=\"#JavaScript作用域链\" class=\"headerlink\" title=\"JavaScript作用域链\"></a>JavaScript作用域链</h4><p>现在我们回到主题，作用域链。</p>\n<p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>假设函数是在全局作用域中创建的，在函数a创建的时候，它的作用域链填入全局对象,全局对象中有所有全局变量，此时的全局变量就是VO。此时的作用域链就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时作用域链（Scope Chain）只有一级,就为Global Object</span><br><span class=\"line\"></span><br><span class=\"line\">\tscope(add) -&gt; Global Object(VO)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tVO = &#123;</span><br><span class=\"line\">\t\tthis : window,</span><br><span class=\"line\">\t\tadd : &lt;reference to function&gt;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>例如，调用add后的作用域链是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时作用域链（Scope Chain）有两级，第一级为AO，然后Global Object（VO）</span><br><span class=\"line\"></span><br><span class=\"line\">\tscope(add) -&gt; AO -&gt; VO</span><br><span class=\"line\"></span><br><span class=\"line\">\tAO = &#123;</span><br><span class=\"line\">\t\tthis : window,</span><br><span class=\"line\">\t\targuments : [4,5],</span><br><span class=\"line\">\t\ta : 4,</span><br><span class=\"line\">\t\tb : 5,</span><br><span class=\"line\">\t\tsum : undefined</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tVO = &#123;</span><br><span class=\"line\">\t\tthis : window,</span><br><span class=\"line\">\t\tadd : &lt;reference to function&gt;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。</p>\n<p>看过上面的内容后，可能还有人不懂，我再通熟易懂的解释一遍，先举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> z = <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x + y + z);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    bar()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的输出结果为”60″，函数bar可以直接访问”z”，然后通过作用域链访问上层的”x”和”y”。此时的作用域链为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时作用域链（Scope Chain）有三级，第一级为bar AO，第二级为foo AO,然后Global Object（VO）</span><br><span class=\"line\"></span><br><span class=\"line\">\tscope -&gt; bar.AO -&gt; foo.AO -&gt; Global Object</span><br><span class=\"line\"></span><br><span class=\"line\">\tbar.AO = &#123;</span><br><span class=\"line\">\t\tz : 30,</span><br><span class=\"line\">\t\t__parent__ : foo.AO</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfoo.AO = &#123;</span><br><span class=\"line\">\t\ty : 20,</span><br><span class=\"line\">\t\tbar : &lt;reference to function&gt;,</span><br><span class=\"line\">\t\t__parent__ : &lt;Global Object&gt;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tGlobal Object = &#123;</span><br><span class=\"line\">\t\tx : 10,</span><br><span class=\"line\">\t\tfoo : &lt;reference to function&gt;,</span><br><span class=\"line\">\t\t__parent__ : null</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>未完待续。。。</p>"},{"title":"深入了解JavaScript，优化作用域链（2）","date":"2017-01-05T07:53:29.000Z","_content":"地址：http://blog.xieliqun.com/2016/10/06/scope-chain-2/\n\n> 作为一个良好的开发者必需考虑程序的运行性能，作用域链的层级关系是JavaScript性能优化的一个重要部分。因为这关系到变量在内存里的读写速度。\n\n\n----------\n\n### 尽量使用局部变量\n\n从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。\n\n全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的，并且全局变量将常驻内存直到程序退出，而局部变量会在函数运行完直接销毁。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。\n\n一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如：\n<!-- more -->\n```javascript\nfunction toggle(){\n\tif(document.getElementById('btn').className == 'active'){\n\t\tdocument.getElementById('btn').className = '';\n\t\t//do someThing\n\t}else{\n\t\tdocument.getElementById('btn').className = 'active';\n\t\t//do someThing\n\t}\n}\n```\n以上代码中`document.getElementById('btn').className`被引用了三次，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到`document`，然后再去找它的方法和属性，这样严重的影响了程序性能。我们可以改为：\n```javascript\nfunction toggle(){\n\tvar btnClass = document.getElementById('btn').className;\n\tif(btnClass == 'active'){\n\t\tbtnClass = '';\n\t\t//do someThing\n\t}else{\n\t\tbtnClass = 'active';\n\t\t//do someThing\n\t}\n}\n```\n\n### 尽量不要改变作用域链\n\n函数每次执行时对应的执行上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个执行上下文，当函数执行完毕，执行上下文会被销毁。每一个执行上下文都和一个作用域链关联。一般情况下，在执行上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。\n\nwith语句是对象的快捷应用方式，用来避免书写重复代码。例如：\n```javascript\nvar o = {href:\"github.com\"};  \nvar href = \"blog.xieliqun.com\";  \n\nfunction buildUrl(){  \n     var q = \"?name=tsrot\";       \n     with(o){ \n          var url = href+q;  \n     }      \n     return url;  \n}\n  \nvar result = buildUrl();  \nalert(result);  //github.com?name=tsrot\nalert(href);    //blog.xieliqun.com\n```\n第一个alert使用的o对象里的href，所以弹出github.com?name=tsrot，第二个alert使用的就是全局的href。\n\n当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。此时的作用域链为：\n```flow\n\n\tscope -> with.AO -> with.VO -> buildUrl.AO -> Global Object\n\n\twith.AO = {\n\t\turl : undefined\n\t}\n\n\twith.VO = {\n\t\thref : \"github.com\"\n\t}\n\n\tbuildUrl.AO = {\n\t\tq : \"?name=tsrot\"\n\t}\n\t\n\tGlobal Object = {\n\t\to : {href:\"github.com\"},\n\t\thref : \"blog.xieliqun.com\",\n\t\tbuildUrl : <reference to function>,\n\t\tresult : undefined\n\t}\n```\n另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。\n\n\n### 闭包问题\n\n一个函数只要内部函数未销毁（内部函数存在被调用的可能），这个函数就不会销毁，将一直存在于内存中，只有所有内部函数都销毁了，并所有的业务代码都已执行完，这个函数才会被释放。我们看看最常见的闭包问题：\n```javascript\nfunction show(){\n\tvar li = document.getElementsByTagName('li');\n\tvar length = li.length;\n\tfor(var i=0;i<length;i++){\n\t\tli[i].onclick = function(){\n\t\t\talert(i);\n\t\t}\n\t}\n}\n\nshow();\n```\n当点击li标签时，弹出的一直都是length的大小。这是一个比较经典的错误。为什么会这样呢？\n\n由于show的内部函数（click事件处理程序时刻有调用可能），所以show的作用域链不能被销毁（只能页面卸载是销毁），i的值一直保持for循环执行完后的length值，此时的click的函数只是进行了声明而未运行，当click触发的时候，函数才开始执行，这个时候i的值已经是length了。所以每次触发onclick的时候才会alert length。我们进行改一下：\n```javascript\nfunction show(){\n\tvar li = document.getElementsByTagName('li');\n\tvar length = li.length;\n\tfor(var i=0;i<length;i++){\n\t\t(function(n){\n\t\t\tli[n].onclick = function(){\n\t\t\t\talert(n);\n\t\t\t}\n\t\t})(i)\n\t}\n}\n\nshow();\n```\n为什么这样就行了呢，这时候onclick引用的变量变成了n，而由于立即执行函数的原因，每个onclick函数在作用域链中分别保持着对应的n（0~length-1），这时候就可以了。\n\n闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，在使用的时候尽量销毁父函数不再使用的变量。你经常访问一些范围之外的标识符，每次访问都将导致一些性能损失。","source":"_posts/study-notes/深入了解JavaScript，优化作用域链（2）.md","raw":"title: 深入了解JavaScript，优化作用域链（2）\ndate: 2017-1-5 15:53:29\n---\n地址：http://blog.xieliqun.com/2016/10/06/scope-chain-2/\n\n> 作为一个良好的开发者必需考虑程序的运行性能，作用域链的层级关系是JavaScript性能优化的一个重要部分。因为这关系到变量在内存里的读写速度。\n\n\n----------\n\n### 尽量使用局部变量\n\n从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。\n\n全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的，并且全局变量将常驻内存直到程序退出，而局部变量会在函数运行完直接销毁。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。\n\n一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如：\n<!-- more -->\n```javascript\nfunction toggle(){\n\tif(document.getElementById('btn').className == 'active'){\n\t\tdocument.getElementById('btn').className = '';\n\t\t//do someThing\n\t}else{\n\t\tdocument.getElementById('btn').className = 'active';\n\t\t//do someThing\n\t}\n}\n```\n以上代码中`document.getElementById('btn').className`被引用了三次，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到`document`，然后再去找它的方法和属性，这样严重的影响了程序性能。我们可以改为：\n```javascript\nfunction toggle(){\n\tvar btnClass = document.getElementById('btn').className;\n\tif(btnClass == 'active'){\n\t\tbtnClass = '';\n\t\t//do someThing\n\t}else{\n\t\tbtnClass = 'active';\n\t\t//do someThing\n\t}\n}\n```\n\n### 尽量不要改变作用域链\n\n函数每次执行时对应的执行上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个执行上下文，当函数执行完毕，执行上下文会被销毁。每一个执行上下文都和一个作用域链关联。一般情况下，在执行上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。\n\nwith语句是对象的快捷应用方式，用来避免书写重复代码。例如：\n```javascript\nvar o = {href:\"github.com\"};  \nvar href = \"blog.xieliqun.com\";  \n\nfunction buildUrl(){  \n     var q = \"?name=tsrot\";       \n     with(o){ \n          var url = href+q;  \n     }      \n     return url;  \n}\n  \nvar result = buildUrl();  \nalert(result);  //github.com?name=tsrot\nalert(href);    //blog.xieliqun.com\n```\n第一个alert使用的o对象里的href，所以弹出github.com?name=tsrot，第二个alert使用的就是全局的href。\n\n当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。此时的作用域链为：\n```flow\n\n\tscope -> with.AO -> with.VO -> buildUrl.AO -> Global Object\n\n\twith.AO = {\n\t\turl : undefined\n\t}\n\n\twith.VO = {\n\t\thref : \"github.com\"\n\t}\n\n\tbuildUrl.AO = {\n\t\tq : \"?name=tsrot\"\n\t}\n\t\n\tGlobal Object = {\n\t\to : {href:\"github.com\"},\n\t\thref : \"blog.xieliqun.com\",\n\t\tbuildUrl : <reference to function>,\n\t\tresult : undefined\n\t}\n```\n另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。\n\n\n### 闭包问题\n\n一个函数只要内部函数未销毁（内部函数存在被调用的可能），这个函数就不会销毁，将一直存在于内存中，只有所有内部函数都销毁了，并所有的业务代码都已执行完，这个函数才会被释放。我们看看最常见的闭包问题：\n```javascript\nfunction show(){\n\tvar li = document.getElementsByTagName('li');\n\tvar length = li.length;\n\tfor(var i=0;i<length;i++){\n\t\tli[i].onclick = function(){\n\t\t\talert(i);\n\t\t}\n\t}\n}\n\nshow();\n```\n当点击li标签时，弹出的一直都是length的大小。这是一个比较经典的错误。为什么会这样呢？\n\n由于show的内部函数（click事件处理程序时刻有调用可能），所以show的作用域链不能被销毁（只能页面卸载是销毁），i的值一直保持for循环执行完后的length值，此时的click的函数只是进行了声明而未运行，当click触发的时候，函数才开始执行，这个时候i的值已经是length了。所以每次触发onclick的时候才会alert length。我们进行改一下：\n```javascript\nfunction show(){\n\tvar li = document.getElementsByTagName('li');\n\tvar length = li.length;\n\tfor(var i=0;i<length;i++){\n\t\t(function(n){\n\t\t\tli[n].onclick = function(){\n\t\t\t\talert(n);\n\t\t\t}\n\t\t})(i)\n\t}\n}\n\nshow();\n```\n为什么这样就行了呢，这时候onclick引用的变量变成了n，而由于立即执行函数的原因，每个onclick函数在作用域链中分别保持着对应的n（0~length-1），这时候就可以了。\n\n闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，在使用的时候尽量销毁父函数不再使用的变量。你经常访问一些范围之外的标识符，每次访问都将导致一些性能损失。","slug":"study-notes/深入了解JavaScript，优化作用域链（2）","published":1,"updated":"2019-05-05T06:49:21.222Z","_id":"cj0dgwc7a003w2u6b1emooj4b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/10/06/scope-chain-2/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/10/06/scope-chain-2/</a></p>\n<blockquote>\n<p>作为一个良好的开发者必需考虑程序的运行性能，作用域链的层级关系是JavaScript性能优化的一个重要部分。因为这关系到变量在内存里的读写速度。</p>\n</blockquote>\n<hr>\n<h3 id=\"尽量使用局部变量\"><a href=\"#尽量使用局部变量\" class=\"headerlink\" title=\"尽量使用局部变量\"></a>尽量使用局部变量</h3><p>从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。</p>\n<p>全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的，并且全局变量将常驻内存直到程序退出，而局部变量会在函数运行完直接销毁。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。</p>\n<p>一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如：<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className == <span class=\"string\">'active'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do someThing</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className = <span class=\"string\">'active'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do someThing</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码中<code>document.getElementById(&#39;btn&#39;).className</code>被引用了三次，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到<code>document</code>，然后再去找它的方法和属性，这样严重的影响了程序性能。我们可以改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> btnClass = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(btnClass == <span class=\"string\">'active'</span>)&#123;</span><br><span class=\"line\">\t\tbtnClass = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do someThing</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tbtnClass = <span class=\"string\">'active'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do someThing</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"尽量不要改变作用域链\"><a href=\"#尽量不要改变作用域链\" class=\"headerlink\" title=\"尽量不要改变作用域链\"></a>尽量不要改变作用域链</h3><p>函数每次执行时对应的执行上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个执行上下文，当函数执行完毕，执行上下文会被销毁。每一个执行上下文都和一个作用域链关联。一般情况下，在执行上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。</p>\n<p>with语句是对象的快捷应用方式，用来避免书写重复代码。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">href</span>:<span class=\"string\">\"github.com\"</span>&#125;;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"string\">\"blog.xieliqun.com\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildUrl</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">var</span> q = <span class=\"string\">\"?name=tsrot\"</span>;       </span><br><span class=\"line\">     <span class=\"keyword\">with</span>(o)&#123; </span><br><span class=\"line\">          <span class=\"keyword\">var</span> url = href+q;  </span><br><span class=\"line\">     &#125;      </span><br><span class=\"line\">     <span class=\"keyword\">return</span> url;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">var</span> result = buildUrl();  </span><br><span class=\"line\">alert(result);  <span class=\"comment\">//github.com?name=tsrot</span></span><br><span class=\"line\">alert(href);    <span class=\"comment\">//blog.xieliqun.com</span></span><br></pre></td></tr></table></figure></p>\n<p>第一个alert使用的o对象里的href，所以弹出github.com?name=tsrot，第二个alert使用的就是全局的href。</p>\n<p>当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。此时的作用域链为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">scope -&gt; with.AO -&gt; with.VO -&gt; buildUrl.AO -&gt; Global Object</span><br><span class=\"line\"></span><br><span class=\"line\">with.AO = &#123;</span><br><span class=\"line\">\turl : undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">with.VO = &#123;</span><br><span class=\"line\">\thref : &quot;github.com&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">buildUrl.AO = &#123;</span><br><span class=\"line\">\tq : &quot;?name=tsrot&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Global Object = &#123;</span><br><span class=\"line\">\to : &#123;href:&quot;github.com&quot;&#125;,</span><br><span class=\"line\">\thref : &quot;blog.xieliqun.com&quot;,</span><br><span class=\"line\">\tbuildUrl : &lt;reference to function&gt;,</span><br><span class=\"line\">\tresult : undefined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。</p>\n<h3 id=\"闭包问题\"><a href=\"#闭包问题\" class=\"headerlink\" title=\"闭包问题\"></a>闭包问题</h3><p>一个函数只要内部函数未销毁（内部函数存在被调用的可能），这个函数就不会销毁，将一直存在于内存中，只有所有内部函数都销毁了，并所有的业务代码都已执行完，这个函数才会被释放。我们看看最常见的闭包问题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> length = li.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\tli[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">show();</span><br></pre></td></tr></table></figure></p>\n<p>当点击li标签时，弹出的一直都是length的大小。这是一个比较经典的错误。为什么会这样呢？</p>\n<p>由于show的内部函数（click事件处理程序时刻有调用可能），所以show的作用域链不能被销毁（只能页面卸载是销毁），i的值一直保持for循环执行完后的length值，此时的click的函数只是进行了声明而未运行，当click触发的时候，函数才开始执行，这个时候i的值已经是length了。所以每次触发onclick的时候才会alert length。我们进行改一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> length = li.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tli[n].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\talert(n);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">show();</span><br></pre></td></tr></table></figure></p>\n<p>为什么这样就行了呢，这时候onclick引用的变量变成了n，而由于立即执行函数的原因，每个onclick函数在作用域链中分别保持着对应的n（0~length-1），这时候就可以了。</p>\n<p>闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，在使用的时候尽量销毁父函数不再使用的变量。你经常访问一些范围之外的标识符，每次访问都将导致一些性能损失。</p>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://blog.xieliqun.com/2016/10/06/scope-chain-2/\" target=\"_blank\" rel=\"noopener\">http://blog.xieliqun.com/2016/10/06/scope-chain-2/</a></p>\n<blockquote>\n<p>作为一个良好的开发者必需考虑程序的运行性能，作用域链的层级关系是JavaScript性能优化的一个重要部分。因为这关系到变量在内存里的读写速度。</p>\n</blockquote>\n<hr>\n<h3 id=\"尽量使用局部变量\"><a href=\"#尽量使用局部变量\" class=\"headerlink\" title=\"尽量使用局部变量\"></a>尽量使用局部变量</h3><p>从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。</p>\n<p>全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的，并且全局变量将常驻内存直到程序退出，而局部变量会在函数运行完直接销毁。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。</p>\n<p>一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如：<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className == <span class=\"string\">'active'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do someThing</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className = <span class=\"string\">'active'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do someThing</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码中<code>document.getElementById(&#39;btn&#39;).className</code>被引用了三次，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到<code>document</code>，然后再去找它的方法和属性，这样严重的影响了程序性能。我们可以改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> btnClass = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(btnClass == <span class=\"string\">'active'</span>)&#123;</span><br><span class=\"line\">\t\tbtnClass = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do someThing</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tbtnClass = <span class=\"string\">'active'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do someThing</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"尽量不要改变作用域链\"><a href=\"#尽量不要改变作用域链\" class=\"headerlink\" title=\"尽量不要改变作用域链\"></a>尽量不要改变作用域链</h3><p>函数每次执行时对应的执行上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个执行上下文，当函数执行完毕，执行上下文会被销毁。每一个执行上下文都和一个作用域链关联。一般情况下，在执行上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。</p>\n<p>with语句是对象的快捷应用方式，用来避免书写重复代码。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">href</span>:<span class=\"string\">\"github.com\"</span>&#125;;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"string\">\"blog.xieliqun.com\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildUrl</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">var</span> q = <span class=\"string\">\"?name=tsrot\"</span>;       </span><br><span class=\"line\">     <span class=\"keyword\">with</span>(o)&#123; </span><br><span class=\"line\">          <span class=\"keyword\">var</span> url = href+q;  </span><br><span class=\"line\">     &#125;      </span><br><span class=\"line\">     <span class=\"keyword\">return</span> url;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">var</span> result = buildUrl();  </span><br><span class=\"line\">alert(result);  <span class=\"comment\">//github.com?name=tsrot</span></span><br><span class=\"line\">alert(href);    <span class=\"comment\">//blog.xieliqun.com</span></span><br></pre></td></tr></table></figure></p>\n<p>第一个alert使用的o对象里的href，所以弹出github.com?name=tsrot，第二个alert使用的就是全局的href。</p>\n<p>当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。此时的作用域链为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">scope -&gt; with.AO -&gt; with.VO -&gt; buildUrl.AO -&gt; Global Object</span><br><span class=\"line\"></span><br><span class=\"line\">with.AO = &#123;</span><br><span class=\"line\">\turl : undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">with.VO = &#123;</span><br><span class=\"line\">\thref : &quot;github.com&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">buildUrl.AO = &#123;</span><br><span class=\"line\">\tq : &quot;?name=tsrot&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Global Object = &#123;</span><br><span class=\"line\">\to : &#123;href:&quot;github.com&quot;&#125;,</span><br><span class=\"line\">\thref : &quot;blog.xieliqun.com&quot;,</span><br><span class=\"line\">\tbuildUrl : &lt;reference to function&gt;,</span><br><span class=\"line\">\tresult : undefined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。</p>\n<h3 id=\"闭包问题\"><a href=\"#闭包问题\" class=\"headerlink\" title=\"闭包问题\"></a>闭包问题</h3><p>一个函数只要内部函数未销毁（内部函数存在被调用的可能），这个函数就不会销毁，将一直存在于内存中，只有所有内部函数都销毁了，并所有的业务代码都已执行完，这个函数才会被释放。我们看看最常见的闭包问题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> length = li.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\tli[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">show();</span><br></pre></td></tr></table></figure></p>\n<p>当点击li标签时，弹出的一直都是length的大小。这是一个比较经典的错误。为什么会这样呢？</p>\n<p>由于show的内部函数（click事件处理程序时刻有调用可能），所以show的作用域链不能被销毁（只能页面卸载是销毁），i的值一直保持for循环执行完后的length值，此时的click的函数只是进行了声明而未运行，当click触发的时候，函数才开始执行，这个时候i的值已经是length了。所以每次触发onclick的时候才会alert length。我们进行改一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> length = li.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">\t\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tli[n].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\talert(n);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">show();</span><br></pre></td></tr></table></figure></p>\n<p>为什么这样就行了呢，这时候onclick引用的变量变成了n，而由于立即执行函数的原因，每个onclick函数在作用域链中分别保持着对应的n（0~length-1），这时候就可以了。</p>\n<p>闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，在使用的时候尽量销毁父函数不再使用的变量。你经常访问一些范围之外的标识符，每次访问都将导致一些性能损失。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0dgwc2j00062u6bz37p5tqj","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc2v000b2u6bbktpsh6r"},{"post_id":"cj0dgwc1v00002u6bakfhwz59","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc2y000f2u6byoy66f83"},{"post_id":"cj0dgwc2l00072u6bimfaj38b","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc30000h2u6bghf8edev"},{"post_id":"cj0dgwc2600022u6bq9r6hos6","category_id":"cj0dgwc2n00082u6bwom5grrh","_id":"cj0dgwc33000l2u6bbawn5zzk"},{"post_id":"cj0dgwc2v000c2u6bl7h8kr9u","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc35000o2u6bovdkgn62"},{"post_id":"cj0dgwc2z000g2u6bwogqhbyy","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc37000r2u6bxxw9mpur"},{"post_id":"cj0dgwc2f00052u6bfs5mk60j","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3a000v2u6b8pius4ri"},{"post_id":"cj0dgwc31000i2u6b9d8ycvxd","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3e000x2u6bc6kmmmgu"},{"post_id":"cj0dgwc33000m2u6buwefi4qb","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3g00102u6b2o62lj6p"},{"post_id":"cj0dgwc2q000a2u6bj3gksge8","category_id":"cj0dgwc32000j2u6bgry7cw25","_id":"cj0dgwc3h00122u6b72vncwlu"},{"post_id":"cj0dgwc35000p2u6bex1op7kt","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3k00152u6bj47h98xf"},{"post_id":"cj0dgwc38000t2u6b887wzljw","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3m00192u6b9zspkpkf"},{"post_id":"cj0dgwc3a000w2u6be8uusfio","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3p001d2u6bfdp1dgca"},{"post_id":"cj0dgwc3f000z2u6bqvw7jdef","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3r001g2u6bc2r5xwhe"},{"post_id":"cj0dgwc3g00112u6b8iaydrc4","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3v001j2u6byk9dy7w1"},{"post_id":"cj0dgwc3k00172u6b6jts6c8g","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc3y001m2u6bl8gyk1ea"},{"post_id":"cj0dgwc3n001b2u6b65v8mau2","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc40001q2u6bcgeg9j1g"},{"post_id":"cj0dgwc3q001f2u6b9qpvge83","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc42001s2u6bgtmg6sfd"},{"post_id":"cj0dgwc3h00132u6betfgj2go","category_id":"cj0dgwc3m00182u6bp8vsf0tb","_id":"cj0dgwc44001w2u6bxg1n2ygy"},{"post_id":"cj0dgwc3s001h2u6brgd73bdq","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc45001x2u6bi6t7ynsu"},{"post_id":"cj0dgwc3v001k2u6bblgimyz5","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc45001y2u6bhq5t0dj5"},{"post_id":"cj0dgwc3y001n2u6bmu6enoyf","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc4700212u6bm3fje12f"},{"post_id":"cj0dgwc42001t2u6b2xs31tvv","category_id":"cj0dgwc2a00032u6b2ky8lyql","_id":"cj0dgwc4700232u6bfsrmh8rs"},{"post_id":"cj0dgwc41001r2u6bxn48uem1","category_id":"cj0dgwc44001v2u6bmkbdee9f","_id":"cj0dgwc4800262u6b3bdtq3ai"}],"PostTag":[{"post_id":"cj0dgwc1v00002u6bakfhwz59","tag_id":"cj0dgwc2e00042u6bvnz0y3zr","_id":"cj0dgwc35000n2u6busj9eu2o"},{"post_id":"cj0dgwc1v00002u6bakfhwz59","tag_id":"cj0dgwc2p00092u6bneo6k2k5","_id":"cj0dgwc36000q2u6b7lcgz904"},{"post_id":"cj0dgwc1v00002u6bakfhwz59","tag_id":"cj0dgwc2x000e2u6bjmx40myz","_id":"cj0dgwc39000u2u6bksyvefgj"},{"post_id":"cj0dgwc2600022u6bq9r6hos6","tag_id":"cj0dgwc32000k2u6b83ux9pz7","_id":"cj0dgwc3k00162u6bm9cg1mk2"},{"post_id":"cj0dgwc2600022u6bq9r6hos6","tag_id":"cj0dgwc2x000e2u6bjmx40myz","_id":"cj0dgwc3m001a2u6bt0cat79s"},{"post_id":"cj0dgwc2600022u6bq9r6hos6","tag_id":"cj0dgwc3e000y2u6b6yb7tv27","_id":"cj0dgwc3p001e2u6bfrita17i"},{"post_id":"cj0dgwc2f00052u6bfs5mk60j","tag_id":"cj0dgwc3i00142u6bhfxdb50j","_id":"cj0dgwc3y001l2u6b0ukd9yuy"},{"post_id":"cj0dgwc2f00052u6bfs5mk60j","tag_id":"cj0dgwc3p001c2u6bjxk0c0re","_id":"cj0dgwc3z001o2u6b2hq55rpj"},{"post_id":"cj0dgwc2j00062u6bz37p5tqj","tag_id":"cj0dgwc3p001c2u6bjxk0c0re","_id":"cj0dgwc4700202u6bzvj6qmmz"},{"post_id":"cj0dgwc2j00062u6bz37p5tqj","tag_id":"cj0dgwc3i00142u6bhfxdb50j","_id":"cj0dgwc4700222u6bzgzn813c"},{"post_id":"cj0dgwc2j00062u6bz37p5tqj","tag_id":"cj0dgwc44001u2u6bxto6viox","_id":"cj0dgwc4800252u6bquymr9jv"},{"post_id":"cj0dgwc2l00072u6bimfaj38b","tag_id":"cj0dgwc45001z2u6bkjpcbyq4","_id":"cj0dgwc4800272u6b6tpkd1fo"},{"post_id":"cj0dgwc2q000a2u6bj3gksge8","tag_id":"cj0dgwc4700242u6bgpmghy3r","_id":"cj0dgwc4900292u6bgqrakpz8"},{"post_id":"cj0dgwc2v000c2u6bl7h8kr9u","tag_id":"cj0dgwc4900282u6bsz4r51m8","_id":"cj0dgwc4b002b2u6b97hv20f7"},{"post_id":"cj0dgwc2z000g2u6bwogqhbyy","tag_id":"cj0dgwc4900282u6bsz4r51m8","_id":"cj0dgwc4b002d2u6bx5f9ylxl"},{"post_id":"cj0dgwc31000i2u6b9d8ycvxd","tag_id":"cj0dgwc32000k2u6b83ux9pz7","_id":"cj0dgwc4c002f2u6b1k1dmvr6"},{"post_id":"cj0dgwc33000m2u6buwefi4qb","tag_id":"cj0dgwc4c002e2u6bahnnryem","_id":"cj0dgwc4c002h2u6b76shdwc7"},{"post_id":"cj0dgwc35000p2u6bex1op7kt","tag_id":"cj0dgwc2x000e2u6bjmx40myz","_id":"cj0dgwc4d002j2u6bj5bv73ir"},{"post_id":"cj0dgwc35000p2u6bex1op7kt","tag_id":"cj0dgwc4c002g2u6blqzf8a62","_id":"cj0dgwc4d002k2u6b4952xcjg"},{"post_id":"cj0dgwc38000t2u6b887wzljw","tag_id":"cj0dgwc4c002e2u6bahnnryem","_id":"cj0dgwc4d002m2u6bg72l0mc0"},{"post_id":"cj0dgwc3a000w2u6be8uusfio","tag_id":"cj0dgwc4d002l2u6bd3h8kvb0","_id":"cj0dgwc4e002o2u6bbzswgzsl"},{"post_id":"cj0dgwc3f000z2u6bqvw7jdef","tag_id":"cj0dgwc4d002n2u6bxl4hl6f9","_id":"cj0dgwc4f002q2u6b8x797jkk"},{"post_id":"cj0dgwc3g00112u6b8iaydrc4","tag_id":"cj0dgwc4e002p2u6bti49ba0g","_id":"cj0dgwc4g002s2u6ba7sbmbx5"},{"post_id":"cj0dgwc3h00132u6betfgj2go","tag_id":"cj0dgwc4f002r2u6b8518vw3l","_id":"cj0dgwc4h002v2u6bm8uorq3u"},{"post_id":"cj0dgwc3h00132u6betfgj2go","tag_id":"cj0dgwc2x000e2u6bjmx40myz","_id":"cj0dgwc4h002w2u6bi33sa8ql"},{"post_id":"cj0dgwc3h00132u6betfgj2go","tag_id":"cj0dgwc4g002t2u6ber31zjc2","_id":"cj0dgwc4h002y2u6boegyb57k"},{"post_id":"cj0dgwc3k00172u6b6jts6c8g","tag_id":"cj0dgwc4g002u2u6b90f7a9yc","_id":"cj0dgwc4h002z2u6b2g86z7g3"},{"post_id":"cj0dgwc3n001b2u6b65v8mau2","tag_id":"cj0dgwc3p001c2u6bjxk0c0re","_id":"cj0dgwc4i00332u6bhocrufdb"},{"post_id":"cj0dgwc3n001b2u6b65v8mau2","tag_id":"cj0dgwc4h00302u6bxo06rl3l","_id":"cj0dgwc4j00342u6bbzu3rr7v"},{"post_id":"cj0dgwc3n001b2u6b65v8mau2","tag_id":"cj0dgwc4i00312u6bf7nhk5ap","_id":"cj0dgwc4j00362u6bmwper56l"},{"post_id":"cj0dgwc3q001f2u6b9qpvge83","tag_id":"cj0dgwc4i00322u6bgijckdl8","_id":"cj0dgwc4j00372u6ba3lean23"},{"post_id":"cj0dgwc3s001h2u6brgd73bdq","tag_id":"cj0dgwc4i00322u6bgijckdl8","_id":"cj0dgwc4l00392u6bm5c5uvri"},{"post_id":"cj0dgwc3v001k2u6bblgimyz5","tag_id":"cj0dgwc4j00382u6bvazcu59s","_id":"cj0dgwc4m003b2u6bwq8n54jh"},{"post_id":"cj0dgwc3v001k2u6bblgimyz5","tag_id":"cj0dgwc2x000e2u6bjmx40myz","_id":"cj0dgwc4m003c2u6bthyptkjy"},{"post_id":"cj0dgwc3y001n2u6bmu6enoyf","tag_id":"cj0dgwc4l003a2u6b0blfpkjj","_id":"cj0dgwc4m003e2u6b69nj8u5j"},{"post_id":"cj0dgwc41001r2u6bxn48uem1","tag_id":"cj0dgwc4m003d2u6bckd1bp36","_id":"cj0dgwc4m003g2u6bbokd6udd"},{"post_id":"cj0dgwc42001t2u6b2xs31tvv","tag_id":"cj0dgwc4m003f2u6b4x32ds9t","_id":"cj0dgwc4n003h2u6b9yxtyyi7"}],"Tag":[{"name":"dpkg","_id":"cj0dgwc2e00042u6bvnz0y3zr"},{"name":"apt","_id":"cj0dgwc2p00092u6bneo6k2k5"},{"name":"linux","_id":"cj0dgwc2x000e2u6bjmx40myz"},{"name":"docker","_id":"cj0dgwc32000k2u6b83ux9pz7"},{"name":"shell","_id":"cj0dgwc3e000y2u6b6yb7tv27"},{"name":"dubbo","_id":"cj0dgwc3i00142u6bhfxdb50j"},{"name":"java","_id":"cj0dgwc3p001c2u6bjxk0c0re"},{"name":"spring","_id":"cj0dgwc44001u2u6bxto6viox"},{"name":"Hexo","_id":"cj0dgwc45001z2u6bkjpcbyq4"},{"name":"随感","_id":"cj0dgwc4700242u6bgpmghy3r"},{"name":"hexo","_id":"cj0dgwc4900282u6bsz4r51m8"},{"name":"markdown","_id":"cj0dgwc4c002e2u6bahnnryem"},{"name":"lsof","_id":"cj0dgwc4c002g2u6blqzf8a62"},{"name":"maven","_id":"cj0dgwc4d002l2u6bd3h8kvb0"},{"name":"nodejs","_id":"cj0dgwc4d002n2u6bxl4hl6f9"},{"name":"nginx","_id":"cj0dgwc4e002p2u6bti49ba0g"},{"name":"python","_id":"cj0dgwc4f002r2u6b8518vw3l"},{"name":"chat","_id":"cj0dgwc4g002t2u6ber31zjc2"},{"name":"perl","_id":"cj0dgwc4g002u2u6b90f7a9yc"},{"name":"springboot","_id":"cj0dgwc4h00302u6bxo06rl3l"},{"name":"logs","_id":"cj0dgwc4i00312u6bf7nhk5ap"},{"name":"ssh","_id":"cj0dgwc4i00322u6bgijckdl8"},{"name":"ubuntu","_id":"cj0dgwc4j00382u6bvazcu59s"},{"name":"windown10","_id":"cj0dgwc4l003a2u6b0blfpkjj"},{"name":"days","_id":"cj0dgwc4m003d2u6bckd1bp36"},{"name":"wps","_id":"cj0dgwc4m003f2u6b4x32ds9t"}]}}